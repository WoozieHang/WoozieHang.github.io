<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【知识总结】 第一章-计算机系统概述</title>
    <url>/2021/10/23/ComputerOrganization-1/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>机器语言：计算机能直接识别执行的语言，机器语言的程序由0、1代码序列组成</li>
<li>汇编语言：把机器指令表示为助记符，与机器语言指令一一对应</li>
<li>高级语言：接近自然语言，按约定符号和规则写程序</li>
<li>编译程序：把高级语言程序翻译成机器语言目标代码的系统软件</li>
<li>汇编程序：把汇编语言程序翻译成机器语言目标代码的系统软件</li>
<li>字长：运算器能并行参与运算的数据位数，取决于CPU内部寄存器的数据宽度</li>
<li>系列机：一个厂家生产的，具有相同的系统结构，但具有不同组成和实现的一系列不同型号机器</li>
<li>软件兼容：现有的软件在升级换代后的新机器上可以使用</li>
<li>虚拟机器：从使用者角度，计算机系统是硬件上的虚拟机器；虚拟机依靠软件存在，软件扩充了系统功能</li>
<li>二进制位：是数字计算机中信息最小的位</li>
<li>字节：8个二进制数是1个字节。计算机系统存储器按字节编址。</li>
<li>内存地址：给存储器每个位置编号，方便访问指定位置，该编号是内存地址</li>
</ul>
<h2 id="计算机系统层次结构"><a href="#计算机系统层次结构" class="headerlink" title="计算机系统层次结构"></a>计算机系统层次结构</h2><h3 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h3><ul>
<li>硬件系统：有形的物理设备，计算机系统中实际物理装置的总称</li>
<li>软件系统：在硬件上运行的程序、相关数据、文档</li>
</ul>
<h3 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h3><h4 id="早期冯诺依曼机"><a href="#早期冯诺依曼机" class="headerlink" title="早期冯诺依曼机"></a>早期冯诺依曼机</h4><p>冯诺依曼提出了“存储程序”概念（指令以代码形式事先输入主存储器，按程序首地址开始按顺序执行直至程序结束）和二进制原理，以此概念原理为基础的各种计算机通称为冯诺依曼机，特点如下：</p>
<ul>
<li>计算机硬件系统由运算器、存储器、控制器、输入设备、输出设备5个部分组成</li>
<li>指令和数据以同等地位存到存储器中，按址访问</li>
<li>指令和数据以二进制代码表示</li>
<li>指令由操作码和地址码组成，操作码是操作的类型，地址码指出操作的地址</li>
<li>指令在存储器内按顺序存放。通常是顺序执行，特定条件下可以改变执行顺序</li>
</ul>
<h4 id="现代计算机组织结构"><a href="#现代计算机组织结构" class="headerlink" title="现代计算机组织结构"></a>现代计算机组织结构</h4><ul>
<li><strong>早期的冯诺依曼机以运算器为中心</strong>，输出输出设备通过运算器与存储器传送数据</li>
<li><strong>现代计算机以存储器为中心</strong>，输入输出尽量绕过CPU，提高效率。</li>
<li>现代计算机仍然遵循存储程序的设计思想</li>
</ul>
<h4 id="硬件组成和功能"><a href="#硬件组成和功能" class="headerlink" title="硬件组成和功能"></a>硬件组成和功能</h4><p>现代计算机虽然结构和冯诺依曼机有区别，但硬件组成和功能相同，具体如下</p>
<ul>
<li>输入设备：用于输入原始数据和程序，如键盘、鼠标</li>
<li>输出设备：用于输出计算机处理结果，如显示器、打印机</li>
<li>运算器：核心是一个算术逻辑运算部件ALU，完成信息或数据的处理运算，包括加、减、乘、除、比较、移位、逻辑运算，是计算机的执行部件</li>
<li>控制器：是整个计算机的指挥中心，在指令执行过程中产生指挥各个部件协同工作的控制信号</li>
<li>存储器：用于存放原始数据、程序、中间运算结果、最终处理结果。分为主（内）存储器和辅（外）存储器。CPU（即中央处理器，是运算器和控制器集成的芯片）能直接访问的程序和数据在主存储器中。此外，CPU和主存构成主机，外存和IO设备是外部设备。</li>
</ul>
<h3 id="计算机系统软件分类"><a href="#计算机系统软件分类" class="headerlink" title="计算机系统软件分类"></a>计算机系统软件分类</h3><ul>
<li>系统软件<ul>
<li>一组保证计算机系统高效正确运行的基础软件，作为系统资源供用户使用。</li>
<li>主要包括操作系统（OS）、数据库管理系统（DBMS）、语言处理程序、分布式软件系统、网络软件系统、标准库程序、服务性程序</li>
</ul>
</li>
<li>应用软件<ul>
<li>用户为了解决某个应用领域的问题编写的程序</li>
<li>例如科学计算程序、工程设计程序、数据统计处理程序</li>
</ul>
</li>
</ul>
<h3 id="计算机软件和硬件的关系"><a href="#计算机软件和硬件的关系" class="headerlink" title="计算机软件和硬件的关系"></a>计算机软件和硬件的关系</h3><ul>
<li>是完整计算机系统中相互依存的两大部分<ul>
<li>硬件是软件工作的物质基础，支持软件发挥性能</li>
<li>软件是硬件发挥作用的途径，完善的软件系统能充分发挥硬件各种功能</li>
</ul>
</li>
<li>软件和硬件有逻辑等价性<ul>
<li>软件能完成的工作硬件也能完成</li>
<li>硬件能完成的工作软件大多也能完成</li>
<li>软件实现更灵活、可复制</li>
<li>硬件实现更高效</li>
</ul>
</li>
</ul>
<h3 id="计算机工作原理"><a href="#计算机工作原理" class="headerlink" title="计算机工作原理"></a>计算机工作原理</h3><h4 id="存储程序工作方式"><a href="#存储程序工作方式" class="headerlink" title="存储程序工作方式"></a>存储程序工作方式</h4><p>计算机的工作过程是</p>
<ul>
<li>把数据和程序装入主存储器</li>
<li>将源程序转换成可执行文件，并保存到磁盘上</li>
<li>存储程序工作方式：把可执行文件保存到主存储器中，并从首地址开始逐条执行指令</li>
</ul>
<h4 id="高级语言程序与机器语言程序转换"><a href="#高级语言程序与机器语言程序转换" class="headerlink" title="高级语言程序与机器语言程序转换"></a>高级语言程序与机器语言程序转换</h4><ul>
<li>解释方式<ul>
<li>用专门的解释器将源程序逐行翻译为机器代码并立刻执行，不形成目标程序</li>
<li>每次执行都需要翻译一次，运行效率低，且不能脱离解释器独立运行</li>
<li>优点是只要提供特定平台的解释器，就可以方便实现源程序级别的跨平台移植</li>
</ul>
</li>
<li>编译方式<ul>
<li>专用的编译器，一次将高级语言源程序翻译成机器语言程序，编译后生成，可执行目标程序可以脱离开发环境独立运行，效率高</li>
<li>如果需要移植到其他平台，则需要采用特定平台编译器重新编译</li>
<li>大部分编译程序直接产生机器语言目标文件，也有的先产生汇编语言代码文件，再用汇编程序处理产生可执行机器语言目标文件</li>
<li>举一个GCC编译器的例子<ul>
<li>预处理阶段：输入源文件hello.c，经过预处理器cpp对源文件的“#”开头命令进行处理，去掉注释，输出hello.i</li>
<li>编译阶段：编译器ccl对预处理后的源程序进行编译，生成汇编语言源程序hello.s</li>
<li>汇编阶段：汇编器as把hello.s翻译成机器语言指令，并打包成可重定位目标文件hello.o，这是二进制文件，文本编辑器打开是乱码</li>
<li>链接阶段：链接器ld把多个可重定位目标文件和标准库函数合并为一个可执行目标文件hello，最终保存到磁盘上。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="程序与指令的执行过程"><a href="#程序与指令的执行过程" class="headerlink" title="程序与指令的执行过程"></a>程序与指令的执行过程</h4><p>程序的第一条地址存在PC中，完成一条指令，会计算下一条指令的地址，程序和指令的执行过程分为三个阶段：</p>
<ul>
<li>取指令</li>
<li>分析指令</li>
<li>执行指令</li>
</ul>
<h3 id="计算机系统层次结构-1"><a href="#计算机系统层次结构-1" class="headerlink" title="计算机系统层次结构"></a>计算机系统层次结构</h3><ul>
<li><p>层次划分为</p>
<ul>
<li>第0级机器：硬联逻辑级。由门电路、触发器等逻辑电路构成</li>
<li>第1级机器：微程序级。根据各指令操作的控制时序，用微指令写微程序，控制信息在部件之间传送</li>
<li>第2级机器：传统机器语言机器。机器语言程序员用此级指令系统写程序，并由第1级解释或第0级直接实现</li>
<li>第3级机器：操作系统机器（又叫混合层）。提供有人机交互功能的用户界面和底层系统调用服务例程。除了提供传统机器指令，还提供操作系统级别的指令（如打开文件，读写文件，关闭文件等）。</li>
<li>第4级机器：汇编语言机器。用汇编语言编写的程序，先由汇编程序翻译成第3级或第2级语言，再由相应机器解释。</li>
<li>第5级机器：高级语言机器。用高级语言写的程序由编译程序翻译成第4级或第3级机器上的语言，个别高级语言也用解释方式实现</li>
<li>第6级机器：应用语言机器。非计算机专业人员可以直接使用计算机，在用户终端用键盘或其他方式发出服务请求即可进入该级的信息处理系统</li>
</ul>
</li>
<li><p>在特定计算机系统中，有些级可能不存在</p>
</li>
<li>划分层次的意义<ul>
<li>便于分开研究层内和层间的关系，优化系统结构</li>
<li>便于理解计算机系统软件硬件逻辑等价性</li>
</ul>
</li>
<li>虚拟机的概念：在硬件上由于软件的发展，扩充了计算机系统功能，不同语言用户面对的是不同层次的虚拟机</li>
<li>0-2层是没有软件配置的裸机，3-6层是虚拟机</li>
</ul>
<h2 id="计算机性能指标"><a href="#计算机性能指标" class="headerlink" title="计算机性能指标"></a>计算机性能指标</h2><p>主要衡量性能的指标有存储容量和速度，常见的具体指标如下</p>
<ul>
<li>机器字长：计算机进行一次整数运算所能处理的二进制数据的位数，和CPU寄存器位数、加法器有关，通常是字节的整数倍</li>
<li>数据通路带宽：外部总线一次能传送的信息位数</li>
<li>主存储量：主存储器所能存储信息的最大容量，用字节衡量，或字数乘字长衡量</li>
<li>吞吐量：系统单位时间内处理请求的数量，主要取决于主存存取周期</li>
<li>响应时间：从用户发送请求，到计算机系统做出响应并获得结果需要的等待时间。包括CPU时间和等待时间（磁盘访问、存储器访问、IO、操作系统开销等）</li>
<li>CPU时钟周期：CPU最小时间单位</li>
<li>主频：CPU时钟周期的倒数，机器内部时钟的频率，单位HZ</li>
<li>CPI：平均每条指令执行需要的时钟周期数</li>
<li>IPC：每个时钟周期执行的指令条数</li>
<li>CPU执行时间：等于时钟周期数$\times$时钟周期，等于(指令数$\times$ CPI)$\times$时钟周期。这里的指令数、CPI、主频是相互制约的。</li>
<li>MIPS：每秒执行多少百万条的指令数（同时考虑了主频和CPI），等于指令条数/（$10^6\times$ 执行时间）= 1/（$10^6\times$ 每条指令执行时间）= 主频/（$10^6\times$ CPI）。这种指标有缺陷，因为不同机器的指令集不同。</li>
<li>MFLOPS：每秒执行多少百万次浮点运算，等于浮点操作次数/(执行时间$\times 10^6$)</li>
<li>GFLOPS：每秒执行多少十亿次浮点运算，等于浮点操作次数/(执行时间$\times 10^9$)</li>
<li>TFLOPS：每秒执行多少万亿次浮点运算，等于浮点操作次数/(执行时间$\times 10^{12}$)</li>
<li>PFLOPS：等于浮点操作次数/(执行时间$\times 10^{15}$)</li>
<li>EFLOPS：等于浮点操作次数/(执行时间$\times 10^{18}$)</li>
<li>ZFLOPS：等于浮点操作次数/(执行时间$\times 10^{21}$)</li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="关于常用前缀"><a href="#关于常用前缀" class="headerlink" title="关于常用前缀"></a>关于常用前缀</h3><ul>
<li>描述存储容量、文件大小时，K、M、G、T是2的幂次，如1Kb=1024b</li>
<li>描述速度、频率时，k、M、G、T，是10的幂次，如1kb/s=1000b/s</li>
<li>前者用大写的K，后者用小写的k，其他的都用大写</li>
</ul>
<h3 id="关于透明性"><a href="#关于透明性" class="headerlink" title="关于透明性"></a>关于透明性</h3><ul>
<li>计算机领域的透明性，指的是<strong>不可见</strong>的事物</li>
<li>比如<ul>
<li>高级语言程序员，不可见乘法指令、浮点数格式</li>
<li>机器语言或汇编程序员不可见IR、MAR、MDR</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第六章-总线</title>
    <url>/2021/11/05/ComputerOrganization-6/</url>
    <content><![CDATA[<h2 id="总线概述"><a href="#总线概述" class="headerlink" title="总线概述"></a>总线概述</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="总线定义"><a href="#总线定义" class="headerlink" title="总线定义"></a>总线定义</h4><ul>
<li>定义：一组能为多个部件<strong>分时</strong>和<strong>共享</strong>公共信息的传送线路</li>
<li>这里的分时和共享是总线的两个特点（时间方面和空间方面）</li>
<li>分时：同一时刻只允许一个部件使用总线，多个部件需要分时</li>
<li>共享：总线可以挂接多个部件</li>
</ul>
<h4 id="总线设备分类"><a href="#总线设备分类" class="headerlink" title="总线设备分类"></a>总线设备分类</h4><ul>
<li>主设备：有主线控制权的设备</li>
<li>从设备：被主设备访问的设备，只能响应来自主设备的总线命令</li>
</ul>
<h4 id="总线特性"><a href="#总线特性" class="headerlink" title="总线特性"></a>总线特性</h4><ul>
<li>机械特性：尺寸、形状等</li>
<li>电气特性：传输方向、有效电平范围</li>
<li>功能特性：每根传输线的功能</li>
<li>时间特性：信号和时序的关系</li>
</ul>
<h4 id="总线猝发传输方式"><a href="#总线猝发传输方式" class="headerlink" title="总线猝发传输方式"></a>总线猝发传输方式</h4><ul>
<li>指的是可以连续传送地址连续的多个数据字（而不用每次都传地址）</li>
<li>由主存总线（详见后面多总线结构）支持</li>
</ul>
<h3 id="总线分类"><a href="#总线分类" class="headerlink" title="总线分类"></a>总线分类</h3><p><em>按功能分类</em></p>
<ul>
<li>片内总线：CPU芯片内部的总线<ul>
<li>CPU内寄存器之间</li>
<li>CPU内寄存器和ALU之间</li>
</ul>
</li>
<li>系统总线<ul>
<li>数据总线<ul>
<li>计算机系统各部件传送数据信息</li>
<li>双向传输</li>
<li>位数和机器字长、存储字长有关</li>
</ul>
</li>
<li>地址总线<ul>
<li>指出数据总线上的数据所在主存单元</li>
<li>单向传输</li>
<li>位数和主存地址空间大小有关</li>
</ul>
</li>
<li>控制总线<ul>
<li>传输CPU控制命令或主存或外设返回CPU的反馈信号</li>
<li>可以是单向或双向传输</li>
</ul>
</li>
<li>电源线和地线：为总线、设备、部件提供电源</li>
</ul>
</li>
<li>通信总线<ul>
<li>计算机系统之间传送信息的总线</li>
<li>又叫外部总线<br><em>按时序控制方式分类</em></li>
</ul>
</li>
<li>同步总线</li>
<li>异步总线</li>
</ul>
<p><em>按数据传输格式分类</em></p>
<ul>
<li>并行总线</li>
<li>串行总线</li>
</ul>
<h3 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h3><ul>
<li>单总线结构<ul>
<li>把CPU、内存、IO设备接口（IO设备有磁盘、打印机、显示器、键盘）挂到<strong>一组</strong>总线上</li>
<li>这里的单指的是单组，包括地址总线、数据总线、控制总线多根线</li>
<li>结构简单、成本低；带宽低、负载重、不能并发传送</li>
</ul>
</li>
<li>双总线结构<ul>
<li>把CPU、内存、通道挂到主存总线（包括地址总线、数据总线、控制总线）上</li>
<li>把外部设备接口和通道（通道认为是简化版的CPU，复杂对IO进行管理）挂到IO总线上</li>
<li>实现了存储器总线和低速的IO总线分离；需要增加通道硬件设备</li>
</ul>
</li>
<li>三总线结构<ul>
<li>CPU和主存挂到主存总线（包括地址总线、数据总线、控制总线多根线）</li>
<li>主存和<strong>高速</strong>IO设备接口（如磁盘是高速IO设备）挂到DMA总线（直接访存总线）</li>
<li>CPU和IO设备接口挂到IO总线</li>
<li>提高IO设备的性能和系统吞吐量；系统工作效率变低（同一时刻只有一套总线工作）</li>
</ul>
</li>
</ul>
<h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul>
<li>总线传输周期<ul>
<li>即总线周期，指一次总线操作需要的时间</li>
<li>包括申请分配阶段、寻址阶段、传输阶段、结束阶段（详见总线事务）</li>
<li>由若干时钟周期组成</li>
</ul>
</li>
<li>总线时钟周期：计算机的时钟周期，总线也受到时钟控制</li>
<li>总线的工作频率：总线周期的倒数，即每秒传输几次数据</li>
<li>总线的时钟频率：时钟周期的倒数</li>
<li>总线宽度：即总线的位数，也可以说是根数，比如32根即32位的总线</li>
<li><strong>总线带宽</strong><ul>
<li>总线的数据传输率，即单位时间传送的数据字节数</li>
<li>等于$\frac{1}{8}\times$总线工作频率$\times$总线宽度</li>
</ul>
</li>
<li>总线复用：同一种信号线在不同时间传输不同的信息，节约空间成本</li>
<li>信号线数：地址总线、数据总线、控制总线的线数总和</li>
</ul>
<h2 id="总线事务"><a href="#总线事务" class="headerlink" title="总线事务"></a>总线事务</h2><p><em>指的是从请求总线到完成总线使用的一个总线周期内的一系列获得</em></p>
<ul>
<li>申请分配阶段<ul>
<li>请求操作：主设备（CPU或DMA）申请获得总线控制权</li>
<li>仲裁阶段：总线仲裁机构决定把下一周期总线使用权授予某<strong>一个</strong>申请者</li>
</ul>
</li>
<li>寻址阶段：主设备通过总线给出从设备地址、有关命令，启动从模块</li>
<li>传输阶段：主模块和从模块数据交换（单向或双向）</li>
<li>释放阶段：主模块撤出在系统总线上的有关信息，让出总线控制权</li>
</ul>
<h2 id="总线定时"><a href="#总线定时" class="headerlink" title="总线定时"></a>总线定时</h2><h3 id="同步定时方式"><a href="#同步定时方式" class="headerlink" title="同步定时方式"></a>同步定时方式</h3><ul>
<li>定义：系统采用统一时钟信号协调发送方接收方的传送定时关系</li>
<li>优点：传送速度快、控制逻辑简单</li>
<li>缺点：主从设备强制同步；适合总线短、所连部件存取时间接近（因为时钟周期以较慢部件为准，存取时间差距大会导致高速部件效率低）；不能校验数据有效性</li>
</ul>
<h3 id="异步定时方式"><a href="#异步定时方式" class="headerlink" title="异步定时方式"></a>异步定时方式</h3><ul>
<li>定义：主从设备间，没有统一的时钟，双方依靠握手信号实现定时控制</li>
<li>优点：总线周期长度可变；对于工作速度差别大的部件也可以可靠高效的交换信息</li>
<li>缺点：速度慢，控制复杂</li>
<li>分类<ul>
<li>不互锁方式<ul>
<li>主设备发送请求，一段时间后撤销请求</li>
<li>从设备发送回答，一段时间后撤销回答</li>
</ul>
</li>
<li>半互锁方式<ul>
<li>主设备发送请求，接收到回答后再撤销请求</li>
<li>从设备发送回答，一段时间后撤销回答</li>
</ul>
</li>
<li>全互锁方式<ul>
<li>主设备发送请求，接收到回答后再撤销请求</li>
<li>从设备发送回答，获知主设备请求撤销后撤销回答</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第七章-输入输出系统</title>
    <url>/2021/11/06/ComputerOrganization-7/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>输入：信息从外部送到主机</li>
<li>输出：信息从主机送到外部</li>
<li>接口：外设和主机传输数据进行协调（比如速度匹配、电平和格式转换）的逻辑部件</li>
<li>外部设备：输入输出设备或通过输入输出接口才能访问的外存储设备<ul>
<li>输入设备：键盘、鼠标</li>
<li>输出设备：打印机、显示器</li>
<li>外存设备：硬磁盘、光盘、U盘</li>
</ul>
</li>
<li>IO系统构成<ul>
<li>IO软件<ul>
<li>包括：驱动程序、用户程序、管理程序、升级补丁</li>
<li>通过IO指令和通道指令（详见后面IO控制方式的通道方式）实现CPU和IO设备信息交换</li>
</ul>
</li>
<li>IO硬件：<ul>
<li>包括：外部设备、设备控制器和接口、IO总线</li>
<li>设备控制器控制IO设备</li>
<li>IO接口（或设备控制器、适配器）和总线相连</li>
<li>IO端口是接口电路的一些寄存器，可被CPU访问；IO接口是主机和外部的交接面（详见IO接口小节）</li>
</ul>
</li>
</ul>
</li>
<li>IO控制方式<ul>
<li>程序查询方式：CPU通过程序查询IO设备是否可用</li>
<li>程序中断方式：IO设备可用时向CPU发出中断请求</li>
<li>DMA方式：用于主存和IO设备的数据交换，无需调用中断服务程序</li>
<li>通道方式<ul>
<li>系统设置通道控制部件，每个通道挂接若干外设</li>
<li>通道程序保存在主存，由通道执行通道指令</li>
<li>通道指令实现数据传送，即执行IO操作（包括读、写、磁盘走带、寻道等）</li>
<li>IO指令实现启停IO设备、查询通道和IO设备状态、对通道进行控制等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="外部设备"><a href="#外部设备" class="headerlink" title="外部设备"></a>外部设备</h2><h3 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h3><ul>
<li>键盘<ul>
<li>矩阵形式排列按键</li>
<li>按下键电信号连通；松开键电信号断开</li>
<li>键盘输入信息步骤：查出按哪个键、翻译为ASCII码、编码传给主机</li>
</ul>
</li>
<li>鼠标<ul>
<li>控制光标位置的定位输入设备</li>
<li>分为机械式和光电式</li>
<li>鼠标底部有传感器，可能检测运动的方向和距离</li>
</ul>
</li>
</ul>
<h3 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h3><ul>
<li>显示器<ul>
<li>按器件分类<ul>
<li>阴极射线管（CRT）显示器</li>
<li>液晶显示器（LCD）</li>
<li>发光二极管（LED）显示器</li>
</ul>
</li>
<li>按信息内容分类<ul>
<li>字符显示器</li>
<li>图形显示器</li>
<li>图像显示器</li>
</ul>
</li>
<li>按扫描方式分类（CRT显示器）<ul>
<li>光栅扫描显示器：只能按固定顺序扫描，比如一行一行扫描</li>
<li>随机扫描显示器：可以按随意方向扫描</li>
</ul>
</li>
<li>显示器按点阵方式运行，主要参数有<ul>
<li>屏幕大小：对角线长度，单位英寸</li>
<li>分辨率：长宽的像素乘积</li>
<li>灰度级：同一个像素的灰度个数，比如8位有256个灰度，是256级</li>
<li>刷新：在光点消失前重新扫描显示，一次刷新需要扫描整个屏幕（通常是按行扫描）</li>
<li>刷新频率：单位时间刷新的次数，通常是60-120HZ（大于30HZ人类视觉就感受不到闪烁）</li>
<li>显示存储器（VRAM）：即刷新存储器</li>
<li>VRAM容量：分辨率$\times$灰度级位数，单位比特</li>
<li>VRAM带宽：VRAM容量$\times$帧频（帧频是单位时间的画面数量，可以认为等于刷新频率）</li>
</ul>
</li>
</ul>
</li>
<li>打印机<ul>
<li>按工作原理分类<ul>
<li>击打式：比如针式打印机</li>
<li>非击打式：用物理化学方法印刷，比如喷墨式、激光打印机</li>
</ul>
</li>
<li>按工作方式分类（都是点阵打印机）<ul>
<li>针式打印机：多层复写，适合票据打印。原理简单、价格便宜；分辨率低、打印速度慢</li>
<li>喷墨式打印机：噪声小、高质量彩印、打印快；防水差</li>
<li>激光打印机：激光技术和电子显像技术结合，核心部件是感光鼓。打印质量高、速度快、噪声小；价格贵、不能复写打印</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="存储设备"><a href="#存储设备" class="headerlink" title="存储设备"></a>存储设备</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul>
<li>目前主要使用磁表面存储器，如磁盘、磁带、磁鼓</li>
<li>容量大、可重复记录、可脱机存储、非破坏读出；存取慢、结构复杂</li>
</ul>
<h4 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h4><p><em>本节在第三章的外存储器中也有介绍，可以对应参考</em></p>
<ul>
<li>组成<ul>
<li>磁盘<ul>
<li>磁头数：即盘面数，一个磁头对应一个盘面</li>
<li>柱面数：即一个盘面的磁道数</li>
<li>扇区数：即一个磁道的扇区个数。扇区又叫块，磁盘读写基本单位，磁盘按块存取。</li>
</ul>
</li>
<li>磁盘驱动器：驱动磁盘转动并在盘面上通过磁头进行读写的装置，每个驱动器对应一个磁盘</li>
<li>磁盘控制器：属于磁盘面向计算机的接口设备，接受计算机命令，向磁盘驱动器发出控制信号</li>
</ul>
</li>
<li>原理<ul>
<li>磁头和磁性介质相对运动完成读写操作</li>
<li>用存储介质的磁层磁化翻转状态表示二进制信息</li>
</ul>
</li>
<li>性能指标<ul>
<li>容量<ul>
<li>非格式化容量：可利用的磁化单元总数</li>
<li>格式化容量：按某种格式能记录的信息总量</li>
</ul>
</li>
<li>记录密度<ul>
<li>道密度：半径方向单位长度磁道数</li>
<li>位密度：磁道单位长度的二进制代码位数</li>
<li>面密度：位密度乘以道密度，即单位面积二进制信息量</li>
</ul>
</li>
<li>平均存取时间<ul>
<li>寻道时间：半径方向定位，移动磁头到目标磁道的平均时间</li>
<li>旋转时间：角度定位，取盘面旋转半圈的时间</li>
<li>传输时间：定位后的传输时间</li>
</ul>
</li>
<li>数据传输率：单位时间传输到主机的字节数，等于每秒转圈数$\times$一个磁道的容量</li>
</ul>
</li>
<li>磁盘地址<ul>
<li>驱动器号</li>
<li>磁道号（柱面号）</li>
<li>盘面号</li>
<li>扇区号</li>
</ul>
</li>
<li>磁盘工作过程<ul>
<li>操作为：寻址、读盘、写盘</li>
<li>每个操作对应一个控制字，具体操作是取控制字、执行控制字</li>
<li>硬盘的所有读写操作都是串行，不能同时进行</li>
</ul>
</li>
</ul>
<h4 id="磁盘阵列"><a href="#磁盘阵列" class="headerlink" title="磁盘阵列"></a>磁盘阵列</h4><ul>
<li>RAID（廉价冗余磁盘阵列）：把多个物理磁盘组成一个独立逻辑磁盘，数据交叉存储，并行访问</li>
<li>RAID按可靠性等级从低到高分为<ul>
<li>RAID0：无冗余、无校验</li>
<li>RAID1：采用磁盘镜像</li>
<li>RAID2：采用纠错海明码</li>
<li>RAID3：采用位交叉奇偶校验</li>
<li>RAID4：采用块交叉奇偶校验</li>
<li>RAID5：采用无独立校验的奇偶校验</li>
</ul>
</li>
<li>RAID0容量大、并行存取、速度快；没有容错能力</li>
<li>RAID1用两个磁盘同时读写，相互备份；容量减半</li>
<li>特点总结：使用多个磁盘并行存取，速度快；通过<strong>镜像</strong>和<strong>校验</strong>提高可靠性和容错能力</li>
</ul>
<h4 id="光盘存储器"><a href="#光盘存储器" class="headerlink" title="光盘存储器"></a>光盘存储器</h4><ul>
<li>利用光学原理，非接触方式记录信息</li>
<li>组成：驱动器、控制器、光盘片、驱动软件</li>
<li>特点：存储密度高、轻便、便宜、容量大、存储期限久、易保存</li>
<li>分类<ul>
<li>CD-ROM：只读型光盘</li>
<li>CD-R：只可写入一次信息</li>
<li>CD-RW：可重复读写的光盘</li>
<li>DVD-ROM（DVD是通用数字化多功能光盘）：高容量CD-ROM</li>
</ul>
</li>
</ul>
<h4 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h4><ul>
<li>详见第三章ROM存储器小节的固态硬盘内容</li>
</ul>
<h2 id="IO接口"><a href="#IO接口" class="headerlink" title="IO接口"></a>IO接口</h2><p><em>IO接口是主机和外设的交接面，解决主机和外设信息形式和工作速度的差异问题</em></p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>控制主机和外设的通信，协调工作速度不同的问题</li>
<li>对CPU送来的地址码进行译码并选择设备</li>
<li>实现数据缓冲，也是为了解决速度不匹配问题</li>
<li>信号格式转换，解决信息形式不一致问题。比如电平转换、并-串或串-并转换、模-数或数-模转换</li>
<li>传送CPU控制命令、反馈外设的状态信息</li>
</ul>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul>
<li>IO接口的外部，主机侧通过IO总线连接内存、CPU等主机的设备，外设侧连接着各个外部设备</li>
<li>IO接口内部包括<ul>
<li>数据缓冲寄存器<ul>
<li>双向的保存缓冲数据</li>
<li>连接数据总线</li>
</ul>
</li>
<li>状态寄存器<ul>
<li>从外设到主机传送状态信息</li>
<li>连接数据总线和IO控制逻辑部件</li>
</ul>
</li>
<li>控制寄存器<ul>
<li>从主机到外设传送控制信息</li>
<li>连接数据总线和IO控制逻辑部件</li>
</ul>
</li>
<li>IO控制逻辑部件<ul>
<li>地址译码、传送控制信号到外设控制逻辑、传送状态到状态寄存器、发送或接收缓冲寄存器数据</li>
<li>连接地址总线、控制总线、控制寄存器、状态寄存器、数据缓冲寄存器</li>
</ul>
</li>
<li>外设界面控制逻辑<ul>
<li>接收或发送数据到外设，接受外设的状态发给IO控制逻辑，把IO控制逻辑发来的控制发送给外设</li>
<li>连接外设、连接IO控制逻辑部件</li>
</ul>
</li>
</ul>
</li>
<li>对IO接口里的寄存器的访问通过<strong>操作系统的IO特权指令</strong></li>
<li>IO接口的这些可读写寄存器叫做IO端口</li>
</ul>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li>按IO接口外设侧的传送数据方式分类<ul>
<li>并行接口：多个位同时传</li>
<li>串行接口：一位一位的传</li>
</ul>
</li>
<li>按主机的IO控制方式分类<ul>
<li>程序查询接口</li>
<li>中断接口</li>
<li>DMA接口</li>
</ul>
</li>
<li>按功能的灵活性分类<ul>
<li>可编程接口</li>
<li>不可编程接口</li>
</ul>
</li>
</ul>
<h3 id="IO端口"><a href="#IO端口" class="headerlink" title="IO端口"></a>IO端口</h3><ul>
<li>指的是接口电路被CPU可直接访问的寄存器</li>
<li>分为数据端口（CPU可读写）、状态端口（CPU可读）、控制端口（可写）</li>
<li>IO端口加上一些控制逻辑组成IO接口</li>
<li>IO端口被CPU访问需要进行编址，编址方式有<ul>
<li>统一编址<ul>
<li>又叫存储器映射方式，把IO当作存储器的单元进行地址分配</li>
<li>优点是不需要专门的IO指令，方便；缺点是内存容量变小，执行速度慢</li>
</ul>
</li>
<li>独立编址<ul>
<li>又叫IO映射方式，IO端口的地址空间和主存地址空间是两个独立的空间</li>
<li>地址码形式相同，需要设置专门的IO指令来访问IO端口</li>
<li>优点是编程清晰、容易理解；缺点是需要CPU提高存储器读写、IO设备读写两组控制信号，复杂</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="IO方式"><a href="#IO方式" class="headerlink" title="IO方式"></a>IO方式</h2><h3 id="程序查询"><a href="#程序查询" class="headerlink" title="程序查询"></a>程序查询</h3><ul>
<li>由主机程序实现信息交换</li>
<li>工作流程如下<ul>
<li>CPU初始化程序，设置传送参数</li>
<li>向IO接口发出命令，启动IO设备</li>
<li>取外设状态，不断查询外设状态，直至就绪</li>
<li>传送一次数据</li>
<li>修改地址，计数器（记录还需要传送几次数据）减1</li>
<li>当计数器大于0则返回第三步，否则程序结束</li>
</ul>
</li>
<li>优点是设计简单、设备量少；缺点是CPU查询等待耗费时间（CPU踏步等待现象），且一段时间只能和一台设备交换信息</li>
</ul>
<h3 id="程序中断"><a href="#程序中断" class="headerlink" title="程序中断"></a>程序中断</h3><ul>
<li>详见计组笔记第五章的异常和中断机制</li>
<li>补充一个IO接口角度的中断驱动方式工作流程<ul>
<li>接收CPU读命令</li>
<li>从外部设备读数据到数据寄存器</li>
<li>提供控制线给CPU发送中断信号</li>
<li>接收CPU取数据请求</li>
<li>把数据放到数据总线，传到CPU的寄存器中</li>
</ul>
</li>
</ul>
<h3 id="DMA方式"><a href="#DMA方式" class="headerlink" title="DMA方式"></a>DMA方式</h3><h4 id="DMA方式特点"><a href="#DMA方式特点" class="headerlink" title="DMA方式特点"></a>DMA方式特点</h4><ul>
<li>外设和内存有直接数据通路，全称是直接存储器存取方式</li>
<li>数据不经过CPU，IO和CPU并行工作，不需要保存恢复CPU现场等操作，传送速度快</li>
<li>数据块传送时，主存地址、传送数据计数由硬件电路实现</li>
<li>主存开辟专门的缓冲区，接收和供给外设数据</li>
<li>开始前：通过程序进行预处理</li>
<li>结束后：通过中断方式进行后处理</li>
</ul>
<h4 id="DMA控制器"><a href="#DMA控制器" class="headerlink" title="DMA控制器"></a>DMA控制器</h4><ul>
<li>又叫DMA接口</li>
<li>组成为<ul>
<li>主存地址计数器：存放数据主存地址</li>
<li>传送长度计数器：存放数据长度，计数溢出时即传送完毕（减到长度为0时）</li>
<li>数据缓冲寄存器：缓存传送的数据</li>
<li>DMA请求触发器：接收IO设备的就绪控制信号</li>
<li>控制/状态逻辑：协调同步DMA请求信号和CPU响应信号、指定传送方向、修改传送参数</li>
<li>中断机构：传送完毕后向CPU提出中断请求</li>
</ul>
</li>
<li>以单总线结构为例（即主存、CPU和IO接口都挂在一组总线上），DMA控制器功能如下（可结合后面的传送过程部分进行理解）<ul>
<li>接受外设的DMA请求DRQ，向CPU发出总线请求HRQ</li>
<li>CPU发出总线响应信号HLDA，让出系统总线控制权（地址总线、数据总线、控制总线）给DMA控制器，进入DMA周期</li>
<li>确定传送数据的主存地址和长度，自动修改主存地址计数器和传送长度计数器</li>
<li>规定传送方向，发出读写控制信号，执行数据传送</li>
<li>向CPU报告DMA操作完成</li>
</ul>
</li>
</ul>
<h4 id="传送方式"><a href="#传送方式" class="headerlink" title="传送方式"></a>传送方式</h4><p><em>CPU和IO设备同时访问主存时会发生冲突，本节介绍解决冲突的方式</em></p>
<ul>
<li>块传送方式（停止CPU访存）<ul>
<li>由DMA控制器向CPU发送停止信号，总线控制权交给DMA控制器</li>
<li>工作完成后向CPU发出操作完成信号，总线控制器归还给CPU</li>
<li>适合高速IO</li>
</ul>
</li>
<li>单字传送方式（周期挪用、周期窃取）<ul>
<li>当CPU不在访存：此时无冲突</li>
<li>当CPU正在访存：待存取周期结束再让出总线控制器给DMA控制器</li>
<li>当CPU正在申请访存：IO访存的优先级更高，因为IO不立刻访存会丢失数据</li>
<li>适合低速IO</li>
</ul>
</li>
<li>DMA和CPU交替访存<ul>
<li>要求主存存取周期不到CPU工作周期的一半</li>
<li>CPU工作周期分成两个部分，分别供CPU访存和DMA访存</li>
<li>不需要总线使用权的申请、建立、归还，而是通过分时控制</li>
</ul>
</li>
</ul>
<h4 id="传送过程"><a href="#传送过程" class="headerlink" title="传送过程"></a>传送过程</h4><p><em>可结合前面的DMA控制器功能的部分进行理解</em></p>
<ul>
<li>预处理阶段<ul>
<li>CPU执行IO指令<ul>
<li>测试IO设备状态</li>
<li>设置DMA控制器的传送长度计数器和主存地址计数器的初值</li>
<li>设置传送方向</li>
<li>启动IO设备</li>
</ul>
</li>
<li>IO设备准备好后向DMA控制器发送DMA请求</li>
<li>DMA控制器向CPU发送总线请求（上一条的DMA请求和总线请求可以统称为DMA请求）</li>
</ul>
</li>
<li>数据传送阶段<ul>
<li>基本传送单位：单字节、单字或数据块</li>
<li>本阶段完全由DMA硬件控制。比如基本传送单位为数据块的情况（比如硬盘），循环由DMA控制器实现而不是CPU</li>
<li>本阶段流程细化为（按单总线结构）<ul>
<li>判断是否允许传送</li>
<li>是则把主存地址送总线，数据根据传送方向送IO设备或主存，修改主存地址计数器和传送长度计数器</li>
<li>判断是否结束传送。不结束则返回第一步，结束则进入后处理阶段</li>
</ul>
</li>
</ul>
</li>
<li>后处理阶段<ul>
<li>DMA控制器向CPU发送中断请求</li>
<li>CPU执行中断服务程序做DMA结束处理<ul>
<li>校验数据传输是否正确</li>
<li>错误需要转入诊断程序</li>
<li>决定是否继续用DMA传送数据块</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="和中断方式的区别"><a href="#和中断方式的区别" class="headerlink" title="和中断方式的区别"></a>和中断方式的区别</h4><ul>
<li>中断方式是程序的切换，需要保存、恢复现场；DMA方式数据传送阶段不占用CPU任何资源</li>
<li>中断响应在指令执行周期后；DMA响应可以在各个机器周期后（取指、间址、执行周期后），CPU不需占用总线时，便可以进行响应</li>
<li>中断传送需要CPU干预；DMA传送不需要CPU干预，适合高速外设成组数据传送</li>
<li>DMA请求优先级高于中断请求，因为DMA传送几乎不占用CPU资源</li>
<li>中断方式还可以处理异常；DMA方式仅用于数据IO传送</li>
<li>中断方式靠程序传送；DMA方式靠硬件传送</li>
</ul>
<h3 id="通道控制方式"><a href="#通道控制方式" class="headerlink" title="通道控制方式"></a>通道控制方式</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul>
<li>CPU向IO通道发送IO指令</li>
<li>IO指令给出了通道程序首地址、要访问的IO设备</li>
<li>通道接收IO指令，执行通道程序</li>
<li>执行完成后通道向CPU发送中断请求</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>通道程序保存在内存，即和CPU共享内存</li>
<li>通道自己控制数据块大小、传输的内存位置<ul>
<li>DMA方式在预处理阶段由CPU设置这些信息</li>
</ul>
</li>
<li>一个通道可以控制多台设备和内存的数据交换<ul>
<li>DMA方式只能是一台设备</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 密码学基础</title>
    <url>/2022/03/04/Cryptography-1/</url>
    <content><![CDATA[<h2 id="安全目标"><a href="#安全目标" class="headerlink" title="安全目标"></a>安全目标</h2><ul>
<li>机密性<ul>
<li>防止信息非授权泄露</li>
</ul>
</li>
<li>完整性<ul>
<li>防止信息非授权修改</li>
</ul>
</li>
<li>可用性<ul>
<li>信息及时可靠的访问使用</li>
</ul>
</li>
</ul>
<h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h3><ul>
<li>危害机密性<ul>
<li>侦听：非授权实体访问或拦截信息</li>
<li>流量分析：通过监控在线流量来获取其他信息</li>
</ul>
</li>
<li>危害完整性<ul>
<li>篡改：拦截到信息之后攻击者对信息进行修改</li>
<li>伪装：假装成别的实体</li>
<li>重放：获得的消息再次发送</li>
<li>否认：发送者否认曾经发送过信息或接收者否认曾经接收过信息</li>
</ul>
</li>
<li>危害可用性<ul>
<li>拒绝服务攻击：减慢或中断系统的服务</li>
</ul>
</li>
</ul>
<h3 id="主动攻击和被动攻击"><a href="#主动攻击和被动攻击" class="headerlink" title="主动攻击和被动攻击"></a>主动攻击和被动攻击</h3><ul>
<li>危害机密性为被动攻击<ul>
<li>获取信息而不修改信息的攻击</li>
<li>容易预防但难以检测</li>
</ul>
</li>
<li>危害完整性和可用性 <ul>
<li>修改或伪造信息的攻击</li>
<li>难以预防但易于检测</li>
</ul>
</li>
</ul>
<h3 id="密码学术语"><a href="#密码学术语" class="headerlink" title="密码学术语"></a>密码学术语</h3><ul>
<li>明文<ul>
<li>原始消息</li>
</ul>
</li>
<li>密文<ul>
<li>加密 </li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第一章-绪论</title>
    <url>/2021/10/17/DataStructure-1/</url>
    <content><![CDATA[<h2 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h2><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><ul>
<li>数据：信息的载体，描述客观事物属性，如数字、字符、所有能输入计算机中识别处理的符号集合</li>
<li>数据元素：数据基本单位（数据表中的一行），由数据项组成</li>
<li>数据项：数据元素不可分割的最小单位（理解成属性）</li>
<li>数据对象：数据元素的集合，数据的子集</li>
<li>数据类型：值的集合和定义在此集合上的一组操作的总称<ul>
<li>原子类型：值不可再分</li>
<li>结构类型：值可以再分</li>
<li>抽象数据类型：抽象数据组织和操作（即结构和运算）</li>
</ul>
</li>
<li>数据结构：存在<strong>关系</strong>的数据元素的集合<ul>
<li>数据指数据元素</li>
<li>结构指数据元素之间的关系</li>
<li>定义数据结构需要数据对象、结构关系、操作运算</li>
</ul>
</li>
</ul>
<h3 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h3><ul>
<li>逻辑结构：独立于计算机（物理存储），从逻辑上描述数据的关系，分为线性结构和非线性结构<ul>
<li>线性结构（一对一的关系）<ul>
<li>一般线性表</li>
<li>受限线性表：栈、队列、串</li>
<li>线性表推广：数组</li>
</ul>
</li>
<li>非线性结构<ul>
<li>集合（属于同集合的关系）</li>
<li>树形结构（一对多的关系）：一般树、二叉树</li>
<li>图状结构（多对多的关系）：有向图、无向图</li>
</ul>
</li>
</ul>
</li>
<li>存储结构：计算机中对数据和关系的表示<ul>
<li>顺序存储：逻辑相邻的元素在物理上也相邻存储<ul>
<li>优点：可随机存取、节约空间</li>
<li>缺点：只能使用相邻的整块存储单元，容易产生碎片</li>
</ul>
</li>
<li>链式存储：逻辑相邻的元素在物理上可不相邻<ul>
<li>优点：不会出现碎片，充分利用所有存储单元</li>
<li>缺点：引入额外指针空间开销、只能顺序存取</li>
</ul>
</li>
<li>索引存储：存储信息的同时，维护一个索引表（表的每个索引项包含关键字和地址）<ul>
<li>优点：搜索速度快</li>
<li>缺点：索引表占用额外的存储空间，增删元素时维护索引表需要额外的开销</li>
</ul>
</li>
<li>散列存储：根据关键字直接算出存储地址，又叫哈希(Hash)存储<ul>
<li>优点：检索增删操作快</li>
<li>缺点：如果散列函数不好，可能出现大量的冲突，从而增加时间空间开销</li>
</ul>
</li>
</ul>
</li>
<li>数据元素：包括运算定义和运算实现<ul>
<li>定义：针对<strong>逻辑结构</strong>，指出运算的<strong>功能效果</strong></li>
<li>实现：针对<strong>存储结构</strong>，指出运算的<strong>操作步骤</strong></li>
</ul>
</li>
</ul>
<h2 id="算法和算法评价"><a href="#算法和算法评价" class="headerlink" title="算法和算法评价"></a>算法和算法评价</h2><h3 id="算法基本概念"><a href="#算法基本概念" class="headerlink" title="算法基本概念"></a>算法基本概念</h3><ul>
<li>定义：问题求解步骤的描述，指令的有限序列，指令由若干操作组成</li>
<li>特性：<ul>
<li>有穷性：算法在有穷步结束，每一步在有穷时间完成</li>
<li>确定性：相同输入得到相同输入</li>
<li>可行性：算法的操作可以通过已有的基本运算执行有穷次实现</li>
<li>输入：零个或多个</li>
<li>输出：一个或多个</li>
</ul>
</li>
<li>目标：<ul>
<li>正确性</li>
<li>可读性</li>
<li>鲁棒性</li>
<li>效率和低空间开销</li>
</ul>
</li>
</ul>
<h3 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h3><ul>
<li>时间复杂度：假设$n$为问题规模，$f(n)$为频度，则时间复杂度定义为$T(n)=O(f(n))$<ul>
<li>最坏时间复杂度：最坏输入情况下的时间复杂度</li>
<li>平均时间复杂度：给定每种输入的概率后算出的时间复杂度期望</li>
<li>最好时间复杂度：最好输入情况下的时间复杂度</li>
<li>期望时间复杂度：针对随机算法，最坏输入情况下的期望随机复杂度。</li>
</ul>
</li>
<li>空间复杂度：定义为算法所耗费的存储空间<ul>
<li>一般认为输入的空间取决于问题，与算法无关</li>
<li>只考虑额外空间即可</li>
<li>原地工作算法指额外空间开销为$O(1)$</li>
</ul>
</li>
</ul>
<h3 id="程序时间复杂度分析技巧"><a href="#程序时间复杂度分析技巧" class="headerlink" title="程序时间复杂度分析技巧"></a>程序时间复杂度分析技巧</h3><ul>
<li>循环体变量参与循环条件判断：考虑该变量和循环次数的关系，用循环次数参与循环条件判断</li>
<li>循环体变量不参与循环条件判断：数学归纳法或者直接累计</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-线性表</title>
    <url>/2021/10/17/DataStructure-2/</url>
    <content><![CDATA[<h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><ul>
<li>线性表是具有相同数据类型的n个($n\geq 0$)数据元素的有限序列</li>
<li>$n$为表长</li>
<li>用$L$命名，则表示为$L=(a_1,a_2,\cdots,a_i,a_{i+1},\cdots,a_n)$，注意从1开始</li>
<li>特点<ul>
<li>元素有限</li>
<li>逻辑上有顺序性（<strong>注：这里指先后次序而不是物理的顺序存储</strong>）</li>
<li>表中元素为数据元素，类型相同，存储空间大小相同</li>
<li>不考虑存储结构，属于逻辑结构</li>
</ul>
</li>
</ul>
<h2 id="线性表的顺序表示"><a href="#线性表的顺序表示" class="headerlink" title="线性表的顺序表示"></a>线性表的顺序表示</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>线性表的顺序存储称作顺序表</li>
<li>线性表位序从1开始，数组下标从0开始</li>
<li>特点：逻辑结构和物理结构相同（插入删除要移动大量元素），可随机存取、存储密度高</li>
</ul>
<h2 id="线性表的链式表示"><a href="#线性表的链式表示" class="headerlink" title="线性表的链式表示"></a>线性表的链式表示</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li>线性表的链式存储称作单链表</li>
<li>优点：不需要大量连续存储单元、插入删除不需要移动大量元素</li>
<li>缺点：不能随机存取，引入额外指针空间开销</li>
</ul>
<h3 id="头结点和头指针"><a href="#头结点和头指针" class="headerlink" title="头结点和头指针"></a>头结点和头指针</h3><ul>
<li>不管是否有头结点，<strong>头指针</strong>都指向链表第一个结点</li>
<li><strong>头结点</strong>是带头结点链表的第一个结点，但不存储信息</li>
<li>引入头结点的好处<ul>
<li>统一链表第一个数据结点和其他位置结点的操作</li>
<li>对空表和非空表的处理进行了统一</li>
</ul>
</li>
<li>头结点指针为NULL，则链表为空</li>
</ul>
<h3 id="头插法和尾插法"><a href="#头插法和尾插法" class="headerlink" title="头插法和尾插法"></a>头插法和尾插法</h3><ul>
<li>头插法，操作简单，但数据顺序和输入顺序相反</li>
<li>尾插法，额外增加一个尾指针</li>
<li>复杂度都是$O(n)$</li>
</ul>
<h3 id="其他链表"><a href="#其他链表" class="headerlink" title="其他链表"></a>其他链表</h3><ul>
<li>双链表：每个结点中有前驱指针和后继指针（带头空表判断：头结点指针为NULL）</li>
<li>循环单链表：在单链表的基础上，表尾结点指针指向头结点（带头空表判断：头结点后继为头结点）</li>
<li>循环双链表：在双链表的基础上，表尾结点后继指向头结点，头结点前驱指向表尾结点（带头空表判断：头结点前驱和后继指针都指向头结点）</li>
<li>静态链表：借助数组描述线性表的链式存储结构<ul>
<li>数据域：存储数据</li>
<li>指针域：存储结点的相对地址（数组下标，游标），从0开始</li>
<li>指针的NULL用-1表示</li>
<li>增删操作不需要移动元素，只需要修改指针。</li>
</ul>
</li>
</ul>
<h3 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h3><ul>
<li>存取方式<ul>
<li>顺序表可以随机存储</li>
<li>链表只能顺序存储</li>
</ul>
</li>
<li>逻辑结构和物理结构<ul>
<li>顺序表逻辑相邻的元素在物理存储上相邻</li>
<li>链表通过指针表示元素的逻辑关系</li>
</ul>
</li>
<li>按值查找<ul>
<li>顺序表有序时可以折半查找</li>
<li>链表不能折半查找</li>
</ul>
</li>
<li>按序号查找<ul>
<li>顺序表$O(1)$</li>
<li>链表$O(n)$</li>
</ul>
</li>
<li>插入和删除<ul>
<li>顺序表平均要移动半个表长的元素</li>
<li>链表只需要对应指针域</li>
</ul>
</li>
<li>存储密度<ul>
<li>顺序表较大</li>
<li>链表需要额外的指针域</li>
</ul>
</li>
<li>空间分配<ul>
<li>顺序表静态分配容易内存溢出或空间大量闲置；动态分配需要移动大量元素，且要求内存有大量连续空间</li>
<li>链表在需要时申请分配空间，操作灵活，空间利用高效。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-栈、队列和数组</title>
    <url>/2021/10/17/DataStructure-3/</url>
    <content><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>只能在栈顶进行插入和删除的线性表</li>
<li>后进先出结构</li>
<li>重要的数学结论：n个不同的元素，进栈顺序已知，则出栈顺序不同的排列有$\frac{C_{2n}^{n}}{n+1}$</li>
</ul>
<h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><ul>
<li>利用连续存储单元存放元素，同时附设一个栈顶指针top</li>
<li>top可以表示栈顶元素的下标（非空情况从0开始），也可以表示栈顶元素的位序(数值上等于栈大小，非空情况从1开始)</li>
<li>前者空栈时，top为-1；后者空栈时top为0</li>
<li>前者进栈为$S.data[++S.top]$，后者进栈为$S.data[S.top++]$</li>
<li>前者出栈为$S.data[S.top-\ -]$，后者出栈为$S.data[-\ -S.top]$</li>
<li>共享栈<ul>
<li>将两个栈的栈底设置在一维数组的两端，栈顶向内延申共享空间。</li>
<li>以top表示栈顶元素下标为例<ul>
<li>$top1=-1$时1栈为空</li>
<li>$top2=Maxsize$时2栈为空</li>
<li>$top1=top2-1$时栈满</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><ul>
<li>采用链式存储的栈，优点是便于多个栈共享存储空间，提高效率，不存在栈满上溢的情况。</li>
<li>通常用单链表实现，所有操作在表头进行</li>
<li>对于带头结点和不带头结点的链栈，具体的实现会有不同</li>
</ul>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li>只能在队头删除，在队尾插入的受限线性表</li>
<li>先进先出</li>
</ul>
<h3 id="顺序存储-1"><a href="#顺序存储-1" class="headerlink" title="顺序存储"></a>顺序存储</h3><ul>
<li>使用连续的存储单元存放队列中的元素，附设指针front和rear。（不同教材指针定义不唯一，本笔记规定front表示队头位置，rear表示队尾元素的下一个位置）</li>
<li>使用顺序队列存在假溢出问题，即下标到了Maxsize，但是数组中还有空位置</li>
<li>可以改进为循环队列<ul>
<li>初始：$front=rear=0$</li>
<li>入队：$rear=(rear+1)\ mod\ Maxsize$</li>
<li>出队：$front=(front+1)\ mod\ Maxsize$</li>
<li>队长：$(rear+Maxsize-front)\ mod\ Maxsize$</li>
<li>这里可以发现，最大容量实际上到不了$Maxsize$，原因队空和队满的判断都是$rear=front$，处理方法有三种<ul>
<li>牺牲一个单元，默认情况，即队满判断是$(rear+1)\ mod\ Maxsize=front$</li>
<li>增加一个size记录元素个数，以此区分队满和队空</li>
<li>增设tag标记，删除元素后tag为0，插入元素后tag为1。初始tag为0。以此记录最近一次操作是插入还是删除来判断队满和队空</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="链式存储-1"><a href="#链式存储-1" class="headerlink" title="链式存储"></a>链式存储</h3><ul>
<li>队列的链式称为链队列</li>
<li>本质上是同时带有队头指针和队尾指针的单链表</li>
<li>不带头结点情况<ul>
<li>当front和rear都是NULL时，队列为空</li>
<li>出队先判断是否空，空则无法出队；不空则front指向其后继。若没有后继，则front和rear都置NULL</li>
<li>入队先判断是否空，不空则将新结点插入到rear的后面并更新rear；空则设置front和rear都指向新结点</li>
</ul>
</li>
<li>带头结点情况（统一了操作，更方便，front此时就是头结点）<ul>
<li>当front=rear时，队列为空</li>
<li>入队插入到rear后并更新rear</li>
<li>出队判断是否空，空则无法出队；不空则删除front的后继。若front后继为rear，则rear=front</li>
</ul>
</li>
<li>双端队列<ul>
<li>普通情况：在两端都可以入队或出队</li>
<li>输出受限：只能在一端出队，可在两端入队</li>
<li>输入受限：只能在一端入队，可在两端出队</li>
</ul>
</li>
</ul>
<h2 id="栈和队列的应用"><a href="#栈和队列的应用" class="headerlink" title="栈和队列的应用"></a>栈和队列的应用</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><ul>
<li>问题：假设输入表达式包含圆括号方括号，任意嵌套，要求判断表达式合法性</li>
<li>算法：利用栈，遇到左括号压栈，遇到右括号则和栈中左括号进行匹配消解，不匹配则不合法。</li>
</ul>
<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><ul>
<li>后缀表达式的值计算：遇到操作数压栈，遇到操作符则弹出操作数进行计算，结果压栈</li>
<li>中缀表达式转后缀表达式：<ul>
<li>人脑方法：利用二叉树的中序遍历和后序遍历得到结果</li>
<li>计算机算法<ul>
<li>遇到数字直接输出到后缀表达式</li>
<li>遇到’(‘入栈</li>
<li>遇到’)’依次弹出栈，加到后缀表达式，直到弹出了’(‘，不用加到后缀表达式</li>
<li>遇到其他运算符根据优先级规定，可能入栈，可能连续弹出，因为不好记，所以直接对照人脑方法得出的答案即可（仅限笔试）。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul>
<li>任何递归算法都可以用栈改成非递归算法</li>
<li>当然除了用栈，也可以根据状态转移方程用dp来做</li>
</ul>
<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>又叫做层次遍历，队列的应用</p>
<h3 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h3><p>队列在操作系统的资源管理中也有应用：</p>
<ul>
<li>打印机数据缓冲区就是一个数据队列</li>
<li>cpu资源竞争也是进程的队列。</li>
</ul>
<h2 id="数组和特殊矩阵"><a href="#数组和特殊矩阵" class="headerlink" title="数组和特殊矩阵"></a>数组和特殊矩阵</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ul>
<li>数组是由$n$个($n\geq 1$)同类型数据元素构成的有限序列，每个数据元素称为一个数组元素</li>
<li>数组下标取值范围叫做维界</li>
<li>数组是线性表的推广<ul>
<li>一维数组可以看作是线性表</li>
<li>二维数组可以看作是数据元素是定长线性表的线性表</li>
<li>数组一旦被定义，维数和维界都不变</li>
<li>除了初始化和销毁，数组只能存取元素、修改元素（不能叫插入和删除，这个应该是和线性表的区别）</li>
</ul>
</li>
</ul>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul>
<li>数组本身是逻辑结构，但是大部分计算机语言都提供数组数据类型</li>
<li>逻辑意义上的数组可以用计算机语言中的数组数据类型进行存储</li>
<li>$LOC(a_i)=LOC(a_0)+i\times L(0\leq i&lt;n)$，$L$是每个元素所占的存储单元个数</li>
<li>多维数组映射方法(假设m行n列)<ul>
<li>行优先：$LOC(a_{i,j})=LOC(a_{0,0})+[n\times(i)+j]\times L$</li>
<li>列优先：$LOC(a_{i,j})=LOC(a_{0,0})+[m\times(j)+i]\times L$</li>
</ul>
</li>
</ul>
<h3 id="矩阵的压缩存储"><a href="#矩阵的压缩存储" class="headerlink" title="矩阵的压缩存储"></a>矩阵的压缩存储</h3><ul>
<li>压缩存储：相同值元素只分配一个存储空间，零元素不分配空间，能节约存储</li>
<li>特殊矩阵<ul>
<li>矩阵有很多相同的元素，或很多零元素，并且这些元素分布有一定规律。</li>
<li>常见的特殊矩阵：对称矩阵、上三角矩阵、下三角矩阵、对角矩阵、三对角矩阵</li>
</ul>
</li>
</ul>
<h3 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h3><ul>
<li>只存放下三角部分，包括对角元素，把$A[n][n]$用$B[\frac{n^2+n}{2}]$压缩表示</li>
<li>对于$A[i][j]$，$i\geq j$，其前面有元素个数$x=1+2+\cdots+i-1+j$（二维矩阵按行优先展开为一维数组，后同），故其对应于$B[x]$。数组下标都是从0开始的。</li>
</ul>
<h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><ul>
<li>下三角矩阵上三角区域元素为常数</li>
<li>上三角矩阵下三角区域元素为常数</li>
<li>注意在数学里，这个常数大都是0，但这里认为是某常数C</li>
<li>存储和对称矩阵类似，但要多一个位置存储该常数即可</li>
</ul>
<h3 id="三对角矩阵"><a href="#三对角矩阵" class="headerlink" title="三对角矩阵"></a>三对角矩阵</h3><ul>
<li>又叫做带状矩阵，所有非零元素都集中在以主对角线为中心的3条对角线区域</li>
<li>同样可以按行优先方式展开到一维数组中</li>
</ul>
<h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><ul>
<li>对于非零元素个数远少于矩阵元素个数的情况，矩阵为稀疏矩阵</li>
<li>采用三元组(行标，列标，值)的方式进行压缩</li>
<li>稀疏矩阵压缩后无法随机存取</li>
<li>稀疏矩阵的三元组可以用数组存储也可以用十字链表存储</li>
</ul>
<h4 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h4><ul>
<li>每一行都有行头结点</li>
<li>每一列都有列头结点</li>
<li>数据结点除了三元组，还包括列后继指针，行后继指针</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-串</title>
    <url>/2021/10/17/DataStructure-4/</url>
    <content><![CDATA[<h2 id="串定义"><a href="#串定义" class="headerlink" title="串定义"></a>串定义</h2><ul>
<li>字符串简称串</li>
<li>由零个或多个字符组成的有限序列，记为$S=’a_1a_2\cdots a_n’$，$n\geq 0$</li>
<li>空串用空集$\emptyset$表示</li>
<li>串中任意多个连续字符子序列称作子串，包含子串的叫主串</li>
<li>子串的位置指子串第一个字符在主串中的位置</li>
<li>两个串相等，指长度相等且对应位置字符相等</li>
<li>串的逻辑结构和线性表类似，但串的数据对象仅为字符，且串的操作对象一般是子串。</li>
</ul>
<h2 id="串的存储结构"><a href="#串的存储结构" class="headerlink" title="串的存储结构"></a>串的存储结构</h2><ul>
<li>定长顺序存储：一般利用定长数组实现</li>
<li>堆分配动态存储：利用malloc和free函数</li>
<li>块链存储：每个结点可以放一个字符，也可以放多个。例如结点大小可以是4，最后一个结点如果不满4个字符用#补齐。</li>
</ul>
<h2 id="串的模式匹配"><a href="#串的模式匹配" class="headerlink" title="串的模式匹配"></a>串的模式匹配</h2><p>子串的定位称作串的模式匹配，即求子串（模式串）在主串中的位置</p>
<h3 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h3><p>即暴力搜索，假设主串大小$m$，子串$n$，则复杂度为$O(mn)$</p>
<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h4 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h4><ul>
<li>设主串为$s_1\cdots s_n$，模式串为$p_1 \cdots p_m$</li>
<li>当主串的第i个字符和模式串的第j个字符失配，跳到子串的第$next[j]$字符位置，与主串第i个位置进行继续比较（<strong>这里i和j都是从1开始</strong>）</li>
</ul>
<h4 id="next数组人工算法"><a href="#next数组人工算法" class="headerlink" title="next数组人工算法"></a>next数组人工算法</h4><ul>
<li>$next[j]=0$，当$j=1$。直观意思是$s_i$与$p_0$比较，本质就是$s_{i+1}$与$p_1$比较</li>
<li>$next[j]=max K$，当$K$集合非空。这里的$K$中元素$k$满足$1&lt;k&lt;j$，且$p_1\cdots p_{j-1}$的前$k-1$个字符和后$k-1$个字符自匹配</li>
<li>$next[j]=1$，其他情况</li>
</ul>
<h4 id="next数组机器算法"><a href="#next数组机器算法" class="headerlink" title="next数组机器算法"></a>next数组机器算法</h4><p>使用类似于数学归纳法的思想递推</p>
<ul>
<li>$next[1]=0$</li>
<li>假设已知$next[j]=k$，则$next[j+1]=$？<ul>
<li>由$next[j]=k$，显然$p_1\cdots p_{j-1}$的前k-1子串和后k-1子串匹配</li>
<li>比较$p_k$和$p_j$<ul>
<li>如果相等，说明$p_1\cdots p_j$的前k子串和后k子串匹配，则$next[j+1]=k+1$</li>
<li>如果不相等，令$k=next[k]$，如果$k&gt;0$则继续比较$p_k$和$p_j$，以此类推；如果$k=0$则$next[j+1]=k+1=1$（理解成$p_1\cdots p_j$的前0子串和后0子串匹配）</li>
<li>不相等的情况是KMP算法生涩的地方，可以直接记住，也可以根据例子来进行理解</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="KMP算法原理"><a href="#KMP算法原理" class="headerlink" title="KMP算法原理"></a>KMP算法原理</h4><p>举例帮助理解：主串cabcabcac，子串abcac</p>
<ul>
<li>c和a不匹配，即子串第$1$个位置不匹配，$next[1]=0$，即主串的第$1$个和子串的第$0$个比较，也就是主串的第$2$个和子串第$1$个比较</li>
<li>主串的abca和子串abca匹配，但主串第$6$的b和子串第$5$的c不匹配</li>
<li>$next[5]=1+1=2$，则主串的第$6$个b和子串第$2$的b进行比较</li>
<li>完成匹配</li>
</ul>
<h4 id="KMP算法进一步优化"><a href="#KMP算法进一步优化" class="headerlink" title="KMP算法进一步优化"></a>KMP算法进一步优化</h4><p>注意到前面核心步骤处：</p>
<ul>
<li>设主串为$s_1\cdots s_n$，模式串为$p_1 \cdots p_m$</li>
<li>当主串的第i个字符和模式串的第j个字符失配，跳到子串的第$next[j]$字符位置，与主串第i个位置进行继续比较（<strong>这里i和j都是从1开始</strong>）</li>
</ul>
<p>那么</p>
<ul>
<li>若$p_{next[j]}=p_j$，必有$p_{next[j]}=p_j\neq s_i$，失配是必然</li>
<li>因此为了避免$p_j=p_{next[j]}$，将$next[j]$反复修正为$next[next[j]]$，直至$p_j\neq p_{next[j]}$</li>
<li>修正后的next记作nextval，可以从j=1开始修正，这样每次只需要修正一次$nextval[j]=nextval[nextval[j]]$即可</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第六章-图</title>
    <url>/2021/10/19/DataStructure-6/</url>
    <content><![CDATA[<h2 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><ul>
<li>图G由顶点集V和边集E构成，记为G=(V,E)</li>
<li>V(G)表示G中的顶点的有限<strong>非空</strong>集，|V|为点数</li>
<li>E(G)表示G中的边的有限集，|E|为边数</li>
<li>图不可以没有顶点，不能是空图，但可以没有边</li>
</ul>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>有向图：如果E是有向边（弧）的有限集合，则G是有向图，从v到w的弧是顶点的有序对<v,w>，v是弧尾，w是弧头（也称作v邻接到w）</v,w></li>
<li>无向图：如果E是无向边的有限集合，则G是无向图，边是顶点的无序对（v，w），w和v互为邻接点，边（v，w）依附于v和w两个点</li>
<li>简单图：没有重复边，没有顶点到自身的边，数据结构中只讨论简单图</li>
<li>完全图：任意两点之间都有一条边，一般是指无向图</li>
<li>有向完全图：任意两点之间都有一对方向相反的弧</li>
<li>子图：两个图G(V,E)和G’(V’,E’)，如果V’是V子集，E’是E子集，则G’是G子图</li>
<li>生成子图：V’=V的子图</li>
<li>点的连通：无向图两个顶点之间有路径则两个点是连通的</li>
<li>连通图：任意两点是连通的</li>
<li>连通分量：无向图（可以是<strong>非连通图</strong>）的极大连通子图（一个图的连通分量显然不一定唯一）</li>
<li>强连通：有向图两个顶点之间相互可达</li>
<li>强连通图：有向图任意两点之间强连通</li>
<li>强连通分量：有向图的极大强连通子图</li>
<li>生成树：<strong>连通图</strong>的生成树是包含图中全部顶点的极小连通子图</li>
<li>顶点的度、入度、出度：无向图顶点上依附的边数为度（记为TD）；有向图根据出边和入边进一步区分度为入度和出度（记为ID和OD）</li>
<li>无向图的顶点度之和是边数两倍</li>
<li>有向图顶点入度和 = 出度和 = 图边数 = 度数和的一半</li>
<li>带权图（网）：给图的边标上权值的图</li>
<li>稠密图、稀疏图：边数少的图为稀疏图，反之为稠密图。一般认为|E|&lt;|V|log|V|时为稀疏图</li>
<li>路径：顶点$v_p$到$v_q$的路径指的是顶点序列$v_p、v_{i1}、\cdots、v_q$，路径上边个数是路径长度，首位顶点相同的路径叫做回路或者环。n个顶点的图，如果边数大于n-1，则一定有环</li>
<li>简单路径：顶点不重复的路径</li>
<li>简单回路：除了首位顶点外，其他顶点不重复的回路</li>
<li>距离：两个顶点的最短路径长度，如果不存在路径则距离为无穷</li>
<li>有向树：一个顶点的入度为0，其余顶点的入度为1的有向图</li>
</ul>
<h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><ul>
<li>定义：用一维数组存储顶点，二维矩阵存储两点之间是否有边（或者存边的权值）</li>
<li>简单应用时可以直接用二维数组作为图的邻接矩阵，忽略顶点信息</li>
<li>如果不需要考虑边的权值，矩阵的元素就是1或0</li>
<li>无向图的邻接矩阵是对称矩阵，可以压缩存储</li>
<li>邻接矩阵的空间开销是$O(|V|^2)$</li>
<li>特点<ul>
<li>无向图的邻接矩阵是对称的，适合压缩存储，只保存例如下三角矩阵</li>
<li>无向图第i行或第i列非零元素个数，刚好是顶点的度$TD(v_i)$</li>
<li>有向图第i行非零元素的个数，刚好是顶点的出度$OD(v_i)$；第i列非零元素的个数，刚好是顶点的入度$ID(v_i)$</li>
<li>任意确定两点之间是否有边，但得到总边数开销大</li>
<li>稠密图适合用邻接矩阵</li>
<li>假设G的邻接矩阵是$A$，$B=A^n$，则$B[i][j]$表示从$i$顶点到$j$顶点，长度为$n$的路径个数</li>
</ul>
</li>
</ul>
<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><ul>
<li>对于稀疏图，邻接表更适合</li>
<li>图G中每个顶点建立一个单链表，第i个单链表中的结点表示依附于$v_i$的边（对于有向图则是以$v_i$为尾的弧），该单链表是顶点$v_i$的边表（对于有向图则是出边表）。顶点信息和顶点边表头指针采用顺序存储，称为顶点表。</li>
<li>简单来说，邻接表中存在两种结点：顶点表结点（顶点信息、边表头指针）、边表结点（邻接点信息、指针域）</li>
<li>特点：<ul>
<li>无向图空间开销O(|V|+2|E|)，有向图空间开销O(|V|+|E|)</li>
<li>适合稀疏图，比邻接矩阵节约了很多空间</li>
<li>邻接表找到顶点的所有边更快，但是确定两个点之间是否有边效率不如邻接矩阵</li>
<li>有向图的邻接表中，求顶点出度只需要计算该顶点的出边表中结点个数；但是求该顶点的入度需要遍历整个邻接表的所有出边表</li>
<li>邻接表的表示不唯一，和数据输入次序有关</li>
</ul>
</li>
</ul>
<h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><ul>
<li>有向图的一种链式存储结构</li>
<li>每条弧一个弧结点，包含尾顶点域、头顶点域、相同弧头的下一弧（对应矩阵表示的同列的下方第一个非零弧）、相同弧尾的下一弧（对应矩阵表示的同行的右方第一个非零弧）、弧信息域</li>
<li>每个顶点一个顶点结点，包含顶点数据信息、以该顶点为弧头的第一个弧结点（该顶点所在列第一个非零弧）、以该顶点为弧尾的第一个弧结点（该顶点所在行第一个非零弧）</li>
<li>十字链表很容易得到以结点为头或尾的弧，所以容易求出度入度</li>
<li>表示不唯一，和信息输入顺序有关，但图是唯一的</li>
</ul>
<h3 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h3><ul>
<li>无向图的一种链式存储结构</li>
<li>无向图邻接表，一条边有两个边结点</li>
<li>无向图邻接多重表，一条边只有一个边结点</li>
<li>邻接多重表中存在两种结点：顶点表结点（顶点信息、边表头指针）、边表结点（标志边是否被搜过的标志域，顶点i域，依附顶点i的下一条边，顶点j域，依附于顶点j的下一条边，边信息域）</li>
</ul>
<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><ul>
<li>借助队列，空间开销$O(|V|)$</li>
<li>邻接表存储方式，复杂度$O(|E|+|V|)$</li>
<li>邻接矩阵存储方式，复杂度$O(V^2)$</li>
<li>BFS算法可以解决单源非带权图最短路径问题</li>
<li>广度优先生成树：即广度优先遍历后得到的生成树</li>
<li>基于邻接表的遍历序列不唯一，基于邻接矩阵的遍历序列唯一</li>
</ul>
<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><ul>
<li>简洁的递归实现</li>
<li>递归本质上用到了栈，空间开销$O(|V|)$</li>
<li>邻接表存储方式，复杂度$O(|E|+|V|)$</li>
<li>邻接矩阵存储方式，复杂度$O(V^2)$</li>
<li>深度优先生成树：即深度优先遍历后得到的生成树，如果对非连通图调用则会生成森林</li>
<li>基于邻接表的遍历序列不唯一，基于邻接矩阵的遍历序列唯一</li>
</ul>
<h3 id="图的连通性判断"><a href="#图的连通性判断" class="headerlink" title="图的连通性判断"></a>图的连通性判断</h3><ul>
<li>无向图是连通的，则从任一结点出发，遍历一遍可以访问到所有结点</li>
<li>无向图是非连通的，从任一结点出发，遍历一遍可以访问到该结点所在的连通分支上所有结点</li>
<li>使用for循环选取初始点进行遍历，防止一次无法遍历完所有点</li>
<li>无向图for循环次数即连通分支数</li>
</ul>
<h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ul>
<li>最小生成树不一定唯一</li>
<li>最小生成树权值和唯一</li>
<li>最小生成树边数为顶点数减1</li>
<li>最小生成树任意去掉一边后变不连通，任意增加一边形成回路</li>
</ul>
<h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><ul>
<li>任选一个点加入T</li>
<li>每次选择距离T最近的一个结点加入T</li>
<li>直到所有顶点都加入T</li>
<li>复杂度$O(|V|^2)$，适合稠密图（事实上优先队列如果是基于数组，则是$O(|V|^2+|E|)$，如果优先队列是基于堆，则是$O((|V|+|E|)log\ |V|)$）</li>
</ul>
<h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><ul>
<li>初始化时T中所有顶点各自为一个连通分量</li>
<li>不断选择未访问过的边中权值最小的边（边用堆存储，以方便找最小边），如果该边两端不在同一个连通分量中（用到并查集），则此边加入T，否则舍弃该边。</li>
<li>直到所有顶点都在同一个连通分量中</li>
<li>复杂度$O(|E|log |E|)$，适合稀疏图</li>
</ul>
<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><p>这里的最短路径指的是带权长度最短路径</p>
<h4 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h4><ul>
<li>解决单源最短路径问题</li>
<li>要求权值非负</li>
<li>根据源点到各个点边权初始化dist[]</li>
<li>S表示已经确定最短路径的点集，起始只有源点</li>
<li>每次选dist中最小的dist[j]加入S，并更新$dist[i]=min\{dist[i],dist[j]+e(i,j)\}$</li>
<li>path[k]可以记录到第k个结点最短路径上k的前驱结点</li>
<li>最终所有点都加入S</li>
<li>复杂度$O(|V|^2)$</li>
</ul>
<h4 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h4><ul>
<li>解决所有顶点之间最短路径问题</li>
<li>权值可以为负，但不能有负边组成环</li>
<li>假设点为$v_1,\cdots,v_n$</li>
<li>$A^0[i][j]$表示$v_i$结点到$v_j$结点的边权，$i,j=1,2,\cdots,n$</li>
<li>$A^k[i][j]=\min\{A^{k-1}[i][j],A^{k-1}[i][k]+A^{k-1}[k][j]\}$，表示中间结点为$v_1,\cdots,v_k$范围的最短路径</li>
<li>复杂度$O(|V|^3)$</li>
</ul>
<h3 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h3><ul>
<li>不存在环的有向图，简称DAG</li>
<li>表达式可以用树结构表示</li>
<li>表达式总有公共子式的情况，用树表达会有重复的空间</li>
<li>使用有向无环图可以存储表达式，节约空间</li>
</ul>
<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><ul>
<li>AOV网：DAG图表示一个工程，<strong>顶点表示活动</strong>的网络，边表示活动进行的先后顺序限制</li>
<li>拓扑排序：DAG图顶点组成的序列，每个顶点恰出现一次，存在A到B的路径，则B排在A后面</li>
<li>删源点法<ul>
<li>找没入度点删除</li>
<li>如果所有点都有入度且没删完，则无法拓扑排序，不是DAG图</li>
<li>否则删除的顺序就是拓扑排序顺序</li>
</ul>
</li>
<li>DFS法<ul>
<li>从转置图的未访问过的结点开始，进行DFS，（可能进行多次，直到所有结点都访问过）</li>
<li>遍历完成结点和该结点的所有邻点后，将该点输出拓扑序列</li>
<li>如果DFS出现环，则说明不是DAG图，不能拓扑排序</li>
<li>如果不是转置图，则求出的是逆拓扑排序</li>
</ul>
</li>
</ul>
<h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><ul>
<li>AOE网：DAG图表示一个工程，<strong>顶点表示事件，边表示活动</strong>，边权值表示活动需要的时间</li>
<li>AOE网性质：<ul>
<li>顶点的所有入边活动都结束，则该顶点事件才能发生</li>
<li>顶点事件发生，该顶点出边活动才能开始</li>
<li>AOE网仅有一个源点，表示整个工程的开始事件</li>
<li>AOE网仅有一个汇点，表示整个工程的结束事件</li>
</ul>
</li>
<li>关键路径：从源点到汇点的最大路径长度，影响工程最短完成时间的因素</li>
<li>参量定义<ul>
<li>事件$v_k$最早发生时间$ve(k)$<ul>
<li>从前往后算</li>
<li>$ve(0)=0$</li>
<li>$ve(k)=\max\{we(j)+e(j,k)\}$，k是j的后继</li>
</ul>
</li>
<li>事件$v_k$最迟发生（使得工程完成不推迟）时间$le(k)$<ul>
<li>从后往前算</li>
<li>$le($汇点$)=ve($汇点$)$</li>
<li>$le(k)=\min\{le(j)+weight(j,k)\}$，k是j的前驱</li>
</ul>
</li>
<li>活动$a_i$最早开始时间$e(i)$：弧尾事件最早发生时间</li>
<li>活动$a_i$最晚开始事件$l(i)$：弧头事件最晚发生时间-该活动时间</li>
<li>差额（活动可拖延时间）$d$：活动的最迟开始时间-活动最早开始时间</li>
<li>不可拖延的活动（$d=0$）是关键活动</li>
</ul>
</li>
<li>关键路径算法<ul>
<li>从源点出发求ve</li>
<li>从汇点出发求vl</li>
<li>求e</li>
<li>求l</li>
<li>求可拖延时间d</li>
<li>所有d=0的活动构成关键路径</li>
</ul>
</li>
<li>注意点<ul>
<li>关键路径所有活动都是关键活动，缩短关键活动可以缩减工期</li>
<li>缩短关键活动太多可能会使其变为非关键活动</li>
<li>关键路径不一定唯一</li>
<li>有多个关键路径的工程想缩短工期需要缩短在所有关键路径上的关键活动（比如桥）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第七章-查找</title>
    <url>/2021/10/20/DataStructure-7/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>查找：在数据结构中寻找满足条件的元素的过程。查找可能成功或失败</li>
<li>查找表：用于查找的数据结构，支持插入，删除，查询元素，不支持插入删除的是静态查找表，否则是动态查找表</li>
<li>关键字：标识元素的数据项的值</li>
<li>平均查找长度ASL:给定每个元素的查找概率，计算出所有查找过程的平均关键字比较次数</li>
</ul>
<h2 id="顺序查找和折半查找"><a href="#顺序查找和折半查找" class="headerlink" title="顺序查找和折半查找"></a>顺序查找和折半查找</h2><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><ul>
<li>一般线性表顺序查找：从一端开始，逐个搜索关键字是否满足条件</li>
<li>有序表顺序查找：因为有序，有些失败的情况不一定要扫完整个表</li>
<li>可以用顺序存储或链式存储</li>
<li>可以用二叉树表示查找过程，叶子结点表示失败的情况，方便计算ASL</li>
</ul>
<h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><ul>
<li>适合有序的顺序存储表</li>
<li>每次和中间位置元素比较，若相等则查找成功，否则缩短一半的搜索范围</li>
<li>可以用二叉树表示查找过程，叶子结点表示失败的情况，方便计算ASL</li>
</ul>
<h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><ul>
<li>又叫索引顺序查找</li>
<li>结合了顺序查找和分块查找的优点</li>
<li>查找表分成若干子块，块内无序，块间有序</li>
<li>需要索引表，记录每个块最大关键字和第一个元素地址</li>
<li>查找先顺序查找或折半查找，确定元素所在块，再在块内顺序查找。</li>
<li>平均查找长度 = 分块查找的平均查找长度 + 块内查找的平均查找长度</li>
</ul>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>结点是红色或黑色二叉查找树</li>
<li>根结点和叶结点（是空结点可忽略）都是黑色的</li>
<li>红色结点不能连续</li>
<li>根到所有叶结点路径上黑色结点个数相同</li>
</ul>
<h3 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h3><ul>
<li>叶子的普通深度不会超过2倍的其黑色深度</li>
<li>由黑色高度至少是$\frac{h}{2}$，则$n\geq 2^{\frac{h}{2}}-1$</li>
<li>所有叶结点的深度值不会超过两倍的差距</li>
</ul>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul>
<li>插入结点z设置为红色</li>
<li>如果z是根结点，则z变成黑色，树黑高加1</li>
<li>如果z的父亲是黑色，则此时已经满足红黑树</li>
<li>如果z的父亲是红色（显然z必然有爷爷，从而必然有叔叔）<ul>
<li>如果z的叔叔是黑色，根据z、z父亲、z爷爷的路径形状进行LL、LR、RR、RL旋转，同时调整z、z父亲、z爷爷的颜色，使得平衡后的子树树根为黑</li>
<li>如果z的叔叔是红色，则令z爷爷是红，z的父亲和叔叔变黑，此后把爷爷看作z，回到最开始步骤，继续向上层调整</li>
</ul>
</li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>如果是非终端结点，则把后继值放入该结点，然后删除后继，注意此时只移动值，不改变颜色</li>
<li>如果是红色终端结点，或根结点，则直接删除</li>
<li>如果是黑色终端，且不是根结点（必然有父亲p，兄弟y，记m和n为y的孩子，且m靠近x的一侧），用NULL的双黑色（黑色计算两次）的叶结点x代替该删除结点，下面目标就是把双黑x变成单黑x<ul>
<li>情况1：如果y为红色，此时p为黑，旋转y和p，并交换y和p的颜色，转情况2/3/4</li>
<li>情况2：如果y为黑色，m红，n黑，旋转m和y，并交换y和m的颜色，转情况3</li>
<li>情况3：如果y为黑色，n红，旋转y和p，交换y和p的颜色，x变单黑，n变黑，完成调整</li>
<li>情况4：如果y为黑色，m黑，n黑，则x变单黑，y变红<ul>
<li>p如果是根（必然是黑），不用变色，调整完成，调整前后总的黑色深度减1</li>
<li>p如果是红色，则变为黑，调整完成。</li>
<li>p如果是黑色，且不是根结点，则把p看作x，继续向根方向循环处理，运行情况1-4。</li>
</ul>
</li>
</ul>
</li>
<li>记忆<ul>
<li>插入：叔叔黑色自身LR；叔叔红色往下拉<ul>
<li>自身LR指的是，自身、自身的父亲、自身的爷爷三个人LR旋转</li>
<li>LR后的子树根是黑色</li>
</ul>
</li>
<li>删除：兄弟红色远侄LR、近侄红色近侄孙LR、远侄红色则远侄LR、都不红色则上拉<ul>
<li>结束只能是第三个或第四个情况</li>
<li>第三个情况的子树根颜色不变</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul>
<li>又叫做多路平衡查找树</li>
<li>B树结点孩子最大值是阶$m$</li>
<li>B树结点关键字个数是子树范围数减1</li>
<li>根若不是终端结点，根结点的子树数范围$[2,m]$</li>
<li>除了根结点，其他结点的子树数范围$[\lceil\frac{m}{2}\rceil,m]$</li>
<li>非叶结点包含：$n,P_0,K_1,P_1,\cdots,K_n,P_n$<ul>
<li>$n$是关键字个数</li>
<li>$K_i$是关键字，从左到右递增</li>
<li>$P_i$是关键字均小于$K_{i+1}$，均大于$K_{i}$的子树</li>
</ul>
</li>
<li>叶结点在最后一层，一般用空指针表示，代表查找失败的位置，<strong>叶结点数比树中总关键字数多1</strong></li>
</ul>
<h4 id="高度（磁盘存取次数）"><a href="#高度（磁盘存取次数）" class="headerlink" title="高度（磁盘存取次数）"></a>高度（磁盘存取次数）</h4><ul>
<li>这里规定高度不包含叶结点，即根节点在第1层，叶结点在第h+1层</li>
<li>利用<strong>叶结点数是树中总关键字数加1</strong>，n+1最小是$2{\lceil\frac{m}{2}\rceil}^{h-1}$，最大是$m^h$，很容易求出给定关键字数情况下的B树高度的范围</li>
</ul>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul>
<li>在B树中找结点，需要从磁盘中读</li>
<li>结点内顺序或折半查找关键字</li>
<li>起始结点是根结点</li>
<li>结点内查找失败则继续根据指针信息读子树，直到查找到叶结点（空指针），则查找失败</li>
</ul>
<h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><ul>
<li>定位：查找失败时定位到最底层的非叶结点的插入位置</li>
<li>插入<ul>
<li>若插入后结点关键字个数小于等于m-1，可以直接插入</li>
<li>否则以结点中间关键字为分割位置，把结点分裂成两个结点，并把中间关键字放入父结点；若父节点关键字个数大于等于m，继续向上层分裂，直至传到根使得树高增1</li>
</ul>
</li>
</ul>
<h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><ul>
<li>若删除的关键字不在最底层非叶结点（终端结点），则用该关键字前驱或后继代替，再删除前驱或后继</li>
<li>只需要考虑被删关键字在终端结点的情况<ul>
<li>若结点关键字个数删除前大于等于$\lceil\frac{m}{2}\rceil$，则直接删除</li>
<li>兄弟够借<ul>
<li>即结点关键字个数删除前等于$\lceil\frac{m}{2}\rceil-1$，邻近的兄弟结点关键字个数大于等于$\lceil\frac{m}{2}\rceil$</li>
<li>则可以把兄弟结点关键字给父结点，父结点关键字给删除结点</li>
</ul>
</li>
<li>兄弟不够借，即结点关键字个数删除前等于$\lceil\frac{m}{2}\rceil-1$，左右兄弟结点关键字个数等于$\lceil\frac{m}{2}\rceil-1$<ul>
<li>则结点删除关键字后，把该结点、左或右兄弟、该兄弟和删除结点在父结点中对应的关键字，合并到一个结点中</li>
<li>显然新结点关键字数为$2\lceil\frac{m}{2}\rceil-2\leq m-1$，满足B树定义。</li>
<li>如果父结点关键字的减少使得父结点不满足定义，则继续向上处理。</li>
<li>如果处理到了父结点是根结点，则根结点删除，合并结点称为新的根结点</li>
</ul>
</li>
</ul>
</li>
<li>记忆<ul>
<li>插入：分裂，中间给父，迭代</li>
<li>删除：兄弟够借，兄弟给父，父给我；兄弟不够借，兄弟和我和中间合并，父亲继续迭代</li>
</ul>
</li>
</ul>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><ul>
<li>应数据库所需出现的B树的变形</li>
<li>定义：<ul>
<li>m阶B+树的一个结点最多有m个孩子</li>
<li>非叶根结点子树数至少$2$</li>
<li>非叶其他结点子树数至少$\lceil\frac{m}{2}\rceil$</li>
<li>结点关键字数等于子树数</li>
<li>叶结点包含所有关键字和相应的记录指针，叶子结点之间按大小顺序链接排列</li>
<li>分支结点的关键字指对应子树中最大关键字，分支结点包含指向该子树的指针</li>
</ul>
</li>
<li>对比B树<ul>
<li>B+树结点关键字个数和子树相同，B树结点关键字比子树少1</li>
<li>m阶B+树结点子树个数和m阶B树结点子树个数范围相同</li>
<li>B+树的叶结点包含信息，非叶结点仅索引作用，无存储信息。B树的叶结点为空，对应查找失败。</li>
<li>B+树的叶结点会重复出现分支结点的关键字，B树关键字不会重复</li>
<li>B+树的多路查找一定是查找到叶结点为止，每次查找都是从根到叶的路径。B树的叶结点为空，且查找不一定到最底层非叶结点（终端结点）</li>
</ul>
</li>
<li>B+树有两个头指针<ul>
<li>一个指向根结点，以多路查找</li>
<li>一个指向关键字最小的叶结点，以顺序查找</li>
</ul>
</li>
</ul>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>散列函数：把关键字映射为地址的函数 Hash(key)=address</li>
<li>冲突：把不同的关键字映射到同一个地址，这些关键字叫同义词。冲突不可避免，但好的散列函数能减少冲突</li>
<li>散列表：根据关键字直接访问的数据结构</li>
<li>理想情况散列表查找时间开销是O(1)</li>
</ul>
<h3 id="散列函数构造方法"><a href="#散列函数构造方法" class="headerlink" title="散列函数构造方法"></a>散列函数构造方法</h3><ul>
<li>定义域包含所有关键字，值域依赖于散列表大小和地址范围</li>
<li>散列函数算出的地址最好能等概率均匀的分布在整个地址空间中，减少冲突</li>
<li>散列函数尽量简单，能快速算出</li>
</ul>
<h4 id="直接定址法"><a href="#直接定址法" class="headerlink" title="直接定址法"></a>直接定址法</h4><ul>
<li>$H(key)=a\times key+b$，$a,b$是常数</li>
<li>即直接取关键字的某线性函数</li>
<li>没有冲突，计算简单</li>
<li>适合关键字分布基本连续，否则空位较多造成存储浪费</li>
</ul>
<h4 id="除留余数法"><a href="#除留余数法" class="headerlink" title="除留余数法"></a>除留余数法</h4><ul>
<li>$H(key)=key\ mod\ p$，$p$是不大于散列表长且最接近或等于的质数</li>
<li>简单常用的方法，关键是选好$p$，使得关键字均匀映射到散列空间，减小冲突</li>
</ul>
<h4 id="数字分析法"><a href="#数字分析法" class="headerlink" title="数字分析法"></a>数字分析法</h4><ul>
<li>设关键字是r进制数</li>
<li>关键字在各个位不一定分布都均匀</li>
<li>选取分布均匀的若干位作为散列地址</li>
<li>适合已知关键字集合，如果更换了关键字，则需要重新构造新散列函数</li>
</ul>
<h4 id="平方取中法"><a href="#平方取中法" class="headerlink" title="平方取中法"></a>平方取中法</h4><ul>
<li>取关键字平方的中间几位作为散列地址</li>
<li>散列地址和关键字每个位都有关系，分布比较均匀，适合关键字每位取值都不均匀或者均小于散列地址所需位数的情况</li>
</ul>
<h3 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h3><h4 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h4><ul>
<li>即开地址法，Open-Hash</li>
<li>$H_i=(H(key)+d_i)\ mod\ m,i=0,1,\cdots,k(k\leq m-1)$</li>
<li>$d_i$为增量序列，一般$d_0=0$</li>
<li>线性探查法<ul>
<li>$d_i=0,1,2,\cdots,k$，且$k\leq m-1$</li>
<li>容易造成堆积</li>
</ul>
</li>
<li>平方探查法<ul>
<li>$d_i=0^2,1^2,-1^2,2^2,-2^2,\cdots,k^2,-k^2$，$k\leq \frac{m}{2}$</li>
<li>$m$必须是$4k+3$形式的素数</li>
<li>又叫二次探查法，可以避免堆积</li>
<li>缺点是不能探测到散列表所有单元，但至少能探测一半单元</li>
</ul>
</li>
<li>再散列法<ul>
<li>$d_i=i\times Hash_2(key)$</li>
<li>需要用到第二个哈希函数来解决冲突，又叫双重哈希法</li>
<li>最多m-1次再探测，都失败后回到$H_0$位置</li>
</ul>
</li>
<li>伪随机序列法：$d_i$为伪随机数序列</li>
<li>注：开放地址法不能随便删除元素，可以增加标记位进行逻辑删除，定期维护散列表进行物理删除</li>
</ul>
<h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><ul>
<li>即闭地址法，Closed-Hash</li>
<li>把同义词存储在一个线性链表里</li>
<li>线性链表由散列地址唯一标识</li>
</ul>
<h3 id="散列查找和性能分析"><a href="#散列查找和性能分析" class="headerlink" title="散列查找和性能分析"></a>散列查找和性能分析</h3><ul>
<li>散列查找和散列表构造的步骤相同</li>
<li>平均查找长度ASL衡量查找效率</li>
<li>同一组关键词和散列函数，冲突处理方法不同，开哈希闭哈希选择不同，ASL一般不一样</li>
<li>散列表的查找效率取决于<ul>
<li>散列函数</li>
<li>冲突处理方法</li>
<li>装填因子<ul>
<li>又叫负载因子</li>
<li>描述表满的程度，表越满，冲突发生的可能性越大</li>
<li>$\alpha=\frac{n}{m}$，$n$为表中记录数，$m$为散列表长度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul>
<li>查找成功的平均查找长度为$\sum p_ic_i$</li>
<li>查找失败的平均查找长度为$\sum q_jc_j$</li>
<li>这里一般是认为$\sum p_i=1$，$\sum q_j=1$</li>
<li>如果综合考虑，即认为$\sum p_i+\sum q_j=1$也是一种理解，具体要根据题意分析</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【阅读笔记】 Detecting Out-of-Distribution Inputs in Deep Neural Networks Using an Early-Layer Output</title>
    <url>/2021/02/04/Detecting-OoD-Using-Early-layers/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>作者在本文提出了一种新的OoD检测方法，不需要OoD的训练样本。检测器是一个单分类器，用原始网络的前几层的输出结果训练的。测试时使用的高维和低维的测试集，和其他先进的(state of art)方法比较，有出色的结果。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>DNN在现代软工中是不可或缺的部分，如自动驾驶、物联网、医疗等领域。深度神经网络在<strong>分类</strong>这件人类经常接触的问题上性能远超于人。</p>
<p>DNN在I.I.D假设下工作良好，但遇到OoD样本时往往过分自信（给出偏高的分类置信度），这阻碍了在安全要求很高的系统中DNN的可采用性。例如，训练集中没有自行车，但汽车的分类器会错分类骑自行车的人。因此分类器需要加强分辨ID和OoD的机制。以往的论文中也提到了类似地检测不同域的样本的方法，例如outlier and novelty detection。</p>
<p>作者接着介绍了常见的一些OoD检测方法。首先是Hendrycks和Gimpel提出的基于max-softmax的baseline。这个方法引入了阈值去辨别OoD(max-softmax低于阈值就认为是OoD)。这个方法对深度模型没有任何假设且没有使用OoD的数据进行训练。它可直接对训练好的模型使用，但是它的性能不是特别令人满意。其他的方法性能比max-softmax好，但它们有的限制了深度模型的结构；有的给定了深度特征的分布假设；有的不能应用于已经训练好的模型；有的需要OoD的训练样本去提高性能…在以上背景下，作者认为，没有上述的种种限制并且比max-softmax的性能更好依然是一个挑战。在本篇文章中，作者致力于提出一种检测手段，不需要重新训练网络，也不限制网络的结构。</p>
<p>现有的一些方法本质上都依赖于深度神经网络的倒数第二层。这一层的特征对于ID自身的分类非常重要,但是用于OoD检测还是比较困难,作者用图片可视化的方法证明了区分的困难性。随后作者提出了本文的方法：不基于softmax层，性能不亚于现有的先进方法，且不需要OoD数据来训练模型也不需要重训练网络。作者主要的观点是：<strong>假设存在一个潜在的空间可以将ID和OoD区分开，并且变换到这个空间的函数可以由网络的某一层良好估计。</strong>这个观点使得基于此空间特征的检测器是可以学习的。在此指导下，作者训练了第二个模型作为检测器，应用于低纬度和高维度的数据集并将其和baseline、先进的方法比较，结果在多个指标上有显著改进。</p>
<p>文章接下来几个部分，分别介绍了相关工作、作者的方法（如何检测OoD以及如何找到合适的潜在空间）、实验结果、实验结论和未来工作的建议方向。</p>
<h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><p>首先是max-softmax的这个baseline，简单易用但是性能不理想。</p>
<p>然后是在此基础上改进的ODIN的方法。加入了两个额外的组成：temperature scaling和input preprocessing。temperature是用来校准softmax的值，input preprocessing用来提高ID的maximum的值。这个方法需要OoD的样本。但是实际操作时无法获得全面的OoD样本，并且Input preprocessing也会引入额外的训练时间开销（两次正向和一次反向传播）。</p>
<p>在ODIN的基础上进行改进，比如Lee的方法。使得深度网络分类器输出对于OoD是接近均匀分布的。这个主要的思想是训练一个分类器和一个生成器，生成器在数据流行的边界产生OoD样本，分类器则用一个特殊设计的损失函数训练：对于生成器生成的OoD更容易得到均匀分布的结果。这个方法需要昂贵的重训练开销，并且需要假设OoD的数据遍布整个数据流行的边界，但这对于高维数据是很难的。</p>
<p>接着作者介绍了其他人的方法。比如，DeVries and Taylor的方法：利用不确定性来检测OoD，即训练一个分类器输出uncertainty这个指标。Shalev, Adi, and Keshet&amp;Vyas的方法：使用集成计算置信度估计。这些方法和Lee的方法一样不能直接用在训练好的原网络模型。</p>
<p>MC-dropout的方法也可以度量模型的不确定性，依靠多重推理计算不确定性可能并不实用。而且只能被用于有dropout层的网络模型中。此后，Geifman and EL-Yaniv使用这个方法刻画风险-覆盖曲线来对已经训练好的模型检测OoD,并且指出性能和max-softmax相似。基于不确定性的方法非常适合检测模型训练的类的边界上的混乱输入。对于非常远离ID的数据，uncertainty-based的方法的性能不好。</p>
<p>使用生成式的模型也是另一个检测OoD输入的重要方法。这些方法要么依赖于重建误差(reconstruction error)，要么依赖于潜在表征的密度估计，或者是依赖于两者的结合。这些方法有一些不足，比如对于某些OoD数据会给出较高的ID可能性。并且，生成式模型很难在高维度的数据上进行拓展应用。</p>
<p>Lee等人此后提出了一种方法，基于高斯判别分析得到每个类的条件高斯分布。这产生了一个基于马氏距离的置信度来检测OoD输入。他们提出了两种方法:a):logits层前一层特征的马氏距离;b):各层马氏距离的集成模型。前者和他们之前的ODIN的方法性能差不多，后者用OoD数据对每个OoD数据集训练了一个回归模型。事实上，几个OoD的数据集就需要训练几个回归模型，这是他们第二个方法的主要的局限性。Lee还使用了对抗样本来训练回归模型，这导致检测性能的降低。此外，a和b方法中，每个类的特征的分布必须假设满足多元高斯分布，但这个假设是没有理论保证的。</p>
<p>接下来，作者准备介绍本文的方法，和Lee的方法有些类似：都用到了深度模型学习到的特征，但有几个重要的地方是不同的：</p>
<ul>
<li>没有用到logits层的特征，因为此前已经说明这一层不适合用来区分OoD和ID；</li>
<li>不需要OoD的样本和对抗样本，但测试对所有的OoD数据集都适用;</li>
<li>本方法找到合适的特征空间来区分OoD和ID,因此不需要依赖集成。</li>
<li>不需要假设特征满足多元高斯分布</li>
</ul>
<h2 id="Proposed-solution"><a href="#Proposed-solution" class="headerlink" title="Proposed solution"></a>Proposed solution</h2><p>这个部分，作者介绍了他们方法的基本元素，包括对于一个具体的潜在空间检测的性能如何，如何发现这样的潜在空间、如何用输入预处理的方式加强结果等。</p>
<h3 id="OoD-detection"><a href="#OoD-detection" class="headerlink" title="OoD detection"></a>OoD detection</h3><p>先给定如下假设：</p>
<ul>
<li>$Q:R^n \to [0,1]^c$ : 深度网络</li>
<li>$x \in R^n$ : 输入</li>
<li>$c$ : 类别的数量</li>
<li>$Q_i$ : 网络对第i个类的概率输出</li>
<li>$X = \{x_1,…,x_m\}$ : 训练集</li>
<li>$L$ : 网络层数</li>
<li>$q^l$ : 第$l$层的输出($q^0 = x$)，即前$l$层非线性变换到隐空间的结果。每一层都提取了关于输入的特征，例如最后一层的特征对区分ID内部的分类很重要。</li>
<li>存在一个适合区分ID和OoD的隐空间，由某层特征输出表示的 :<em>optimal OoD discernment layer（OODL）</em></li>
<li>$l_o$ : OODL层</li>
<li>$Q^{l_o}$ : 第$l_o$层的概率输出</li>
<li>$S^{l_o}$ : 基于特征$Q^{l_o}$训练的区分ID和OoD的分类器。</li>
</ul>
<p>为了不用OoD数据进行训练，分类设定为单分类问题(One Class Classification)。现有的许多单分类方法都可以使用，本文中作者使用的是One-class SVM。OoD检测机制是<br>\begin{equation}<br>O_{l_o}(x;\delta)=<br>\begin{cases}<br>0&amp; \delta \geq S^{l_o}(q^{l_o}(x)) \\<br>1&amp; \text{otherwise}<br>\end{cases}<br>\end{equation}<br>其中$O_{l_o}$是检测函数，基于OODL $l_o$的特征和阈值$\delta$。作者提到，如果$l_o$是卷积层，那么$q^{l_o}$会非常高维，不利用OSVM的效果，因此计算每个频道的均值用于降维。即假设$f^{l_o} \in R^{w\times h\times d}$是卷积层$l_o$的特征，$w$, $h$, $d$是宽、高、深度。$f^{l_o}_{ijk}$是特征$f^{l_o}$的第($i$, $j$, $k$)个元素，那么降维后的特征$q^{l_o}=(q^{l_o}_k \in R^d)$由下式得到：<br>\begin{equation}<br>q^{l_o}_k=\frac{1}{w\times h}\sum_{i=1}^{w}\sum_{j=1}^{h}|f^{l_o}_{ijk}|<br>\end{equation}<br>作者提到，传统OCC方法例如OCSVM在高维数据性能不佳，在本文的方法中，提到了OODL，允许方法在高维数据上良好工作。另一个好处是可以利用训练好的原网络模型，这比抓取ID数据重训练一个OCC模型更有效。（注：个人理解是原神经网络起到一个特征提取的作用，当然比用原始ID更有效）。作者提到这是以往没有用过的OoD检测方法。</p>
<h3 id="Finding-optimal-OoD-discernment-layer-OODL"><a href="#Finding-optimal-OoD-discernment-layer-OODL" class="headerlink" title="Finding optimal OoD discernment layer (OODL)"></a>Finding optimal OoD discernment layer (OODL)</h3><p>首先，需要找到网络$Q$的OODL。作者提到，需要度量基于公式1的检测的误差，误差最小的层就是OODL。下面是具体的算法。<br><img src="/2021/02/04/Detecting-OoD-Using-Early-layers/algo1.jpg" class title="this is algo1"><br>使用OoD数据集去寻找OODL会有一个问题，那就是这个层偏向于区分所选的OoD数据集所具有的特征。接着，作者用实验表明，对于不同的OoD Dataset，在同一个网络和ID的情况下，最后选取的OODL基本一致；同时，网络模型的选取和ID的选取对OODL的结果影响比较大。<br>实验配置和结果的情况为:</p>
<ul>
<li>用CIFAR-10 作为ID dataset</li>
<li>用ResNet model作为网络模型</li>
<li>横坐标是层，纵坐标是检测误差</li>
<li>验证的OoD dataset分别为TinyImageNet、LSUN、ISUN、SVHN</li>
<li>结果是，四个OODL都选在第13层（这一层的检测误差最小）。</li>
</ul>
<p>作者认为OODL往往选在较低的层，因为高层特征往往是分类的特征，和ID内的分类有关；而较低层特征是整体大概的特征，用来表征ID分布本身。那么到目前为止，实验表明了用倒数第二层有利于做ID内的分类，而OODL有利于做OoD的检测。</p>
<h3 id="Input-preprocessing"><a href="#Input-preprocessing" class="headerlink" title="Input preprocessing"></a>Input preprocessing</h3><p>这是源自ODIN的方法，是用来增大max-softmax类别概率的。在本文中，作者用这个方法来增强ID的特征，这样OSVM分类器就更容易检测出ID的输入。作者还提到，即使不用输入预处理的方式，本文的方法也比其他很多方法性能要好。具体的Input proprocessing的方法是：对于测试阶段的一个输入数据$x$，用如下公式计算$x’$<br>\begin{equation}<br>x’=x-\epsilon\cdot sign(-\nabla_{x}log(\max_{i}Q_{i}(x)))<br>\end{equation}<br>其中$\epsilon$是一个微扰程度，而微扰的大小由梯度(max-softmax关于x)反向传播计算。</p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><p>作者对几个ID和OoD dataset在不同的网络模型上运用了本文的方法。作者把性能和max-softmax,ODIN,MD进行了比较。正如前文所讨论的，本文的方法关注的是不用OoD数据参与分类器的训练，然而，为了遵守文献中的传统，作者还是使用了input preprocessing(需要访问OoD数据)的方法作为一个补充选项。和基于不确定度的方法的对比在附加材料中提到。作者的方法是开源可复现的。</p>
<h3 id="ID-datasets-and-models"><a href="#ID-datasets-and-models" class="headerlink" title="ID datasets and models"></a>ID datasets and models</h3><ul>
<li>ID datasets包括：MNIST, CIFAR-10, CIFAR-100</li>
<li>MNIST的模型：两个卷积层两个全连接层的CNN，测试集精确度99.22%</li>
<li>CIFAR-10:的模型： VGG-16(by Simonyan and Zisserman 2014)和ResNet(by He et al. 2015)。测试集精度为93.56%和92.01%</li>
<li>CIFAR-100的模型：同CIFAR-10，测试集精度为70.48%和69.17%</li>
</ul>
<h3 id="OoD-datasets"><a href="#OoD-datasets" class="headerlink" title="OoD datasets"></a>OoD datasets</h3><p>作者用OoD的数据集进行测试评估，并保持ID和OoD的相同的测试规模，具体的数据集如下:</p>
<ul>
<li>Fashion-MNIST</li>
<li>Omniglot</li>
<li>TinyImageNet</li>
<li>LSUN</li>
<li>iSUN</li>
<li>SVHN</li>
<li>Gaussian noise</li>
<li>Uniform noise</li>
</ul>
<h3 id="Evaluation-metrics"><a href="#Evaluation-metrics" class="headerlink" title="Evaluation metrics"></a>Evaluation metrics</h3><p>本节对方法评估的指标进行说明。</p>
<ul>
<li>FPR at 95% TPR：FPR是$\frac{FP}{FP+TN}$，TPR是$\frac{TP}{TP+FN}$。ID是正例。</li>
<li>Detection error at 95% TPR：假设测试集正反例同规模，则该指标等价于$0.5\times(1-TPR)+0.5\times(FPR)$</li>
<li>AUROC：Area Under the Receiver Operating Characteristic curve，即正例相比于反例获得更高detecton score的可能性。</li>
<li>AUPR：Area Under the Precision-Recall curve, 即查准率和查全率的曲线</li>
</ul>
<h3 id="OSVM-and-hyper-parameters"><a href="#OSVM-and-hyper-parameters" class="headerlink" title="OSVM and hyper parameters"></a>OSVM and hyper parameters</h3><ul>
<li>使用 $rbf$ 核作为 kernel，比其他核效果好；</li>
<li>training error $nu = 0.001$；</li>
<li>temperature scale的T设置为1000，因为根据以为的paper，这是最理想的数值；</li>
<li>扰动级别$\epsilon$由FPR at 95% TPR来优化，随机使用20%的OoD datasets；</li>
<li>F-MNIST和TinyImageNet数据集用来寻找OODLs。每个ID和相应的模型都确定一个OODL；</li>
<li>用CIFAR-10和CIFAR-100训练的VGG-16模型的OODLs分别为第二个卷积层和第一个max-polling层；</li>
<li>用CIFAR-10和CIFAR-100训练的ResNet模型的OODLs分别为第13层和第9层residual layers；</li>
<li>更多的参数细节在补充材料中…</li>
</ul>
<h3 id="Detection-results"><a href="#Detection-results" class="headerlink" title="Detection results"></a>Detection results</h3><p>1.对于MNIST&amp;CUSTOM-CNN，结果如下($\uparrow$ 表示值高性能好，$\downarrow$ 表示值低性能好):<br><img src="/2021/02/04/Detecting-OoD-Using-Early-layers/performance_compared1.jpg" class title="this is performance_compared"></p>
<p>可以发现，作者的方法在各个指标性能都能胜出。</p>
<p>2.对于CIFAR-10 and CIFAR-100 &amp; 使用输入预处理，结果如下：<br><img src="/2021/02/04/Detecting-OoD-Using-Early-layers/performance_compared2.jpg" class title="this is performance_compared"></p>
<p>本文方法的性能在两个数据集上都胜出，同时，作者的方法有能力完全的检测出不同模型下的高维和低维的噪声。</p>
<p>3.对于作者的方法，不使用输入预处理和其他使用输入预处理的方法比较，结果如下图：<br><img src="/2021/02/04/Detecting-OoD-Using-Early-layers/performance_compared3.jpg" class title="this is performance_compared"><br>可以看到除了TinyImageNet for CIFAR-100,本文的方法性能都胜出。作者的方法有明显更优秀的AUROC，但detection error 和FPR at 95% TPR仅仅比ODIN的方法略好一点。有趣的是，MD的方法有时候比max-softmax更差。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>检测DNN中的OoD inputs在安全相关的领域非常重要，比如自动驾驶和医疗领域。大部分OoD检测的方法都是基于DNN的倒数第二层提取的特征，这样的层用来区别ID的分类比较适合。与这些方法相反，本文提出的依赖于一个关键的思想，那就是寻找最适合的中间较低层作为OODL，来提供了一个容易分离ID和OoD的隐藏空间。结果指导我们训练一个单分类器检测OoD输入，不需要OoD的样本参与训练。当然，如果允许使用OoD的样本，本文的方法可以补充拓展为使用input preprocessing的改进版本。作者用几个低维和高维的数据集在不同的深度网络模型上评估了本文的方法。结果表明对于baseline和state-of-the-art的一些方法，在很多指标上都有明显进步。作者提出，他们未来的工作主要是使用一个专用的损失函数去改进OODL层提取的特征，以便更好地进行OoD检测和ID的类别的划分。</p>
]]></content>
      <categories>
        <category>OoD Detection</category>
      </categories>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第八章-排序</title>
    <url>/2021/10/20/DataStructure-8/</url>
    <content><![CDATA[<h2 id="排序基本概念"><a href="#排序基本概念" class="headerlink" title="排序基本概念"></a>排序基本概念</h2><ul>
<li>输入n个记录，根据记录的关键字大小，输出该序列的重排，使得关键字有序</li>
<li>稳定算法：关键字大小相等的两条记录，在输入和输出中的先后顺序不变</li>
<li>内部排序：排序期间元素全部存放在内存，大部分内部排序是基于比较来移动记录顺序</li>
<li>外部排序：排序期间元素无法全部同时存放在内存，需要不断地在内外存之间移动的排序</li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>算法步骤</p>
<ul>
<li>假设排序表$L[1\cdots n]$在排序过程中处于以下状态：有序序列$L[1\cdots i-1],L[i],$无序序列$L[i+1\cdots n]$</li>
<li>备份$L[i]$</li>
<li>找到元素$L[i]$在$L[1\cdots i-1]$中的插入位置$k$</li>
<li>将$L[k\cdots i-1]$整体依次后移1位，本步骤和上一步可以同时进行，即边移边找</li>
<li>将备份的$L[i]$放入$L[k]$</li>
</ul>
<p>算法性能</p>
<ul>
<li>常数个辅助单元，空间开销$O(1)$</li>
<li>时间开销，最好情况$O(n)$，平均和最坏情况$O(n^2)$</li>
<li>稳定排序算法</li>
<li>适用于顺序存储或链式存储的线性表</li>
</ul>
<h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><ul>
<li>对直接插入排序的优化：将比较和移动操作分离，先折半查找插入点，再统一进行移动</li>
<li>减少了比较元素的开销至$O(log\ n)$，但最坏时间复杂度还是$O(n^2)$</li>
<li>稳定排序算法</li>
<li>适用于顺序存储的线性表</li>
</ul>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>算法步骤</p>
<ul>
<li>取小于$n$的步长$d_1$，距离间隔$d_1$的记录看作在同一组，组内直接插入排序</li>
<li>继续选更小的步长，重复该过程</li>
<li>直到步长选为1</li>
<li>注：目前对于步长序列怎么选择最好还没有定论</li>
</ul>
<p>算法性能</p>
<ul>
<li>空间开销O(1)</li>
<li>时间开销分析比较困难，最坏情况是$O(n^2)$；当n在特定范围，时间复杂度$O(n^{1.3})$,</li>
<li>不是稳定排序算法</li>
<li>适合顺序存储线性表</li>
</ul>
<h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>算法步骤</p>
<ul>
<li>从前往后或从后往前扫描，比较相邻元素，逆序则交换</li>
<li>第k轮扫描，可以把第k大的元素放到倒数第k个位置，或把第k小的元素放到第k个位置</li>
<li>最坏进行n-1轮扫描即可完成排序</li>
<li>注：可以进一步优化，即记录每轮最后一次发生交换的位置，该位置后面的都已经排好；如果没有发生交换则可以提前结束排序</li>
</ul>
<p>算法性能</p>
<ul>
<li>空间开销$O(1)$</li>
<li>最坏情况和平均情况时间开销都是$O(n^2)$，最好情况可以优化到$O(n)$</li>
<li>稳定排序算法</li>
<li>不同于插入排序，冒泡排序的有序子序列一定是全局有序（小于或大于所有无序序列的元素）</li>
</ul>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>算法步骤</p>
<ul>
<li>选择一个基准pivot，例如第一个元素</li>
<li>将排序表划分为小于基准和大于等于基准两个部分，此时基准的位置是最终的位置</li>
<li>递归的对左右部分进行快排</li>
<li>若某部分只有一个元素，则该部分已经排序好</li>
</ul>
<p>划分函数</p>
<ul>
<li>双向法<ul>
<li>例如基准为第一个元素，设置i和j两个指针，i指向基准，j指向最后的元素</li>
<li>先令j从后往前遍历，遇到比基准小的元素，则交换i和j元素</li>
<li>交换后令i从前往后遍历，遇到比基准大的元素，交换i和j元素</li>
<li>直到i和j相遇</li>
<li>事实上基准元素可以先进行备份，等确定最终位置再一次性放好</li>
</ul>
</li>
<li>单向法<ul>
<li>例如基准为第一个元素，设置i指针指向基准，j指针指向i下一个元素</li>
<li>令j从i+1位置向后遍历，遇到比基准小的元素，则交换i+1位置和j位置元素，再交换i和i+1位置元素</li>
<li>直到j扫描完整个表</li>
</ul>
</li>
</ul>
<p>性能分析</p>
<ul>
<li>需要栈进行递归，平均空间开销$O(log\ n)$，最坏情况$O(n)$</li>
<li>平均时间复杂度$O(nlog\ n)$，最坏时间复杂度$O(n^2)$，可以尽量随机的选基准元素，使得最坏情况基本不发生</li>
<li>不是稳定算法，无论是划分函数是双向法还是单向法，因为交换元素时可能会导致不稳定</li>
</ul>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>算法步骤</p>
<ul>
<li>n-1次循环</li>
<li>第i次循环从$L[i\cdots n]$中选出最小值和$L[i]$交换</li>
<li>第i次循环也可以从$L[1\cdots n+1-i]$中选出最大值和$L[n+1-i]$交换</li>
</ul>
<p>性能分析</p>
<ul>
<li>空间开销$O(1)$</li>
<li>最好、平均、最坏时间开销都是$O(n^2)$，主要是比较的开销，移动的开销较小</li>
<li>默认数组实现不是稳定算法，比如$5,6,5,2$，用$2$替换左侧的$5$，破坏了两个$5$的顺序<ul>
<li>用链表实现则是稳定的</li>
</ul>
</li>
</ul>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆结构</p>
<ul>
<li>将一维数组看作完全二叉树，任意结点的值是对应子树的最大值或最小值</li>
<li>前者叫最大堆，后者叫最小堆</li>
</ul>
<p>堆修复</p>
<ul>
<li>假设堆顶缺失，对于结构上的修复，可以用数组末尾的结尾补到堆顶</li>
<li>对于性质上的修复，以最大堆为例，从堆顶开始，跟左右子结点比较<ul>
<li>如果比左右子结点大，则完成修复</li>
<li>反之，将堆顶和左右子结点较大者交换，并继续修复子结点对应的子堆</li>
</ul>
</li>
<li>修复的复杂度是$O(log\ n)$</li>
</ul>
<p>堆构建</p>
<ul>
<li>非递归法<ul>
<li>从最后一个有孩子的结点开始进行堆修复</li>
<li>复杂度O(n)，可以直接求和计算</li>
</ul>
</li>
<li>递归法<ul>
<li>先递归的将左右子树部分构建为堆</li>
<li>再对堆顶进行修复</li>
<li>复杂度O(n)，根据主定理算</li>
</ul>
</li>
</ul>
<p>堆排序步骤</p>
<ul>
<li>以最大堆$H[1\cdots n]$为例，堆顶$H[1]$和堆末尾元素$H[n]$交换</li>
<li>修复堆$H[1\cdots n-1]$</li>
<li>重复拿出堆顶，修复堆即可</li>
</ul>
<p>堆插入</p>
<ul>
<li>虽然堆排序用不到，这里补充一下堆结构的插入</li>
<li>思想是把插入元素放到末尾，再从底向上进行调整</li>
<li>开销是$O(log\ n)$</li>
</ul>
<p>堆排序性能</p>
<ul>
<li>空间开销$O(1)$</li>
<li>时间开销$O(nlog\ n)$</li>
<li>不是稳定排序算法</li>
</ul>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul>
<li>归并排序是基于Merge操作的</li>
<li>Merge操作把两个有序表合并，开销$O(n)$</li>
<li>归并排序先分治的排序两部分，再把两部分合并</li>
<li>空间复杂度$O(n)$</li>
<li>时间复杂度$O(nlog\ n)$</li>
<li>稳定排序算法</li>
<li>如果是k路归并，由主定理，容易知道时间开销还是$O(nlog\ n)$</li>
</ul>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><ul>
<li>一种特殊的不基于比较的排序方法，而是基于关键字各个位的大小</li>
<li>可以按最高位优先MSD，也可以最低位优先LSD，但后者更常用和方便</li>
<li>假设关键字是d位，r进制数，以LSD为例<ul>
<li>需要$q[0]$到$q[r-1]$，$r$个链队列进行分配</li>
<li>重复进行分配和收集</li>
<li>第i次分配，根据关键字的低位起第i位的值，将关键字分配给对应的链队列</li>
<li>第i次收集，把各个链队列从$q[0]$到$q[r-1]$串起来</li>
<li>第i次分配和收集完成后，关键字的低i位是有序的</li>
<li>进行d次分配和收集后，排序完成</li>
<li>空间复杂度$O(r)$，即队头指针、队尾指针</li>
<li>每次的分配复杂度$O(n)$,收集复杂度$O(r)$,总的时间复杂度$O(d(n+r))$，与序列初始输入状态无关</li>
<li>稳定的排序算法</li>
</ul>
</li>
</ul>
<h2 id="排序算法应用"><a href="#排序算法应用" class="headerlink" title="排序算法应用"></a>排序算法应用</h2><ul>
<li>若n较小，可以采用直接插入排序或简单选择排序</li>
<li>若初始序列基本有序，适合采用直接插入排序或冒泡排序</li>
<li>n较大时可以采用$O(nlog\ n)$的时间复杂度算法，如快速排序、堆排序、归并排序<ul>
<li>快速排序是基于比较的内部排序中最好的方法，平均情况时间最短，但不是稳定排序</li>
<li>堆排序辅助空间少于快排，且最坏情况也是$O(nlog\ n)$，但不是稳定排序</li>
<li>归并排序是稳定排序，但空间开销较大。此外，可以考虑在序列较小时先直接插入排序，再高层归并，这样改进后还是稳定的。</li>
</ul>
</li>
<li>基于比较的排序算法最坏时间复杂度下界是$O(nlog\ n)$，可以用判定树证明</li>
<li>如果n很大，且关键字位数少、可以分解的情况适合用基数排序</li>
<li>如果记录信息量大不适合频繁移动，可以选择链表作为存储结构</li>
</ul>
<h2 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>当对大文件进行排序时，因为文件太多，无法一次将整个文件放入内存，需要将待排序记录存储在外存，排序时再把数据一部分一部分调入内存排序，在排序过程中需要多次进行内存外存的交换，这种排序方法叫外部排序。</p>
<h3 id="外部排序的方法"><a href="#外部排序的方法" class="headerlink" title="外部排序的方法"></a>外部排序的方法</h3><ul>
<li>主要考虑访问磁盘的次数，即IO次数</li>
<li>首先根据内存情况，将文件分成若干子文件，依次读入内存进行内部排序</li>
<li>排序好后的子文件写回外存，这些子文件称为归并串或者顺串</li>
<li>对这些归并串归并直到整个文件有序</li>
<li>内存分成三个缓冲区，两个输入缓冲区和一个输出缓冲区，输入缓冲区空则继续从磁盘的对应归并串读，输出缓冲区满则写到磁盘中保存</li>
</ul>
<p>举例说明</p>
<ul>
<li>2000个记录，假设在8次内排序后得到8个初始归并串，每个归并串250个记录，每个磁盘块125个记录</li>
<li>8个归并串，两两归并，需要3轮归并</li>
<li>每轮归并需要16次读和16次写</li>
<li>三轮归并以及最开始内部排序需要的磁盘读写，一共4个32次，即128次读写</li>
<li>若增加归并路数，比如变成4路归并，则只需要两轮归并，一共3个32次，即96次读写</li>
<li>可以看出，增加归并路数、减小初始归并串数都可以减少归并轮数，从而减少IO次数</li>
<li>记忆：单轮归并中，每个记录都是进内存一次，出内存一次</li>
</ul>
<h3 id="多路平衡归并和败者树"><a href="#多路平衡归并和败者树" class="headerlink" title="多路平衡归并和败者树"></a>多路平衡归并和败者树</h3><ul>
<li>增加归并路数可以减少读写磁盘的次数，但是增加了内部归并时的开销</li>
<li>具体来说，r个初始段，归并轮数$\lceil log_k\ r\rceil$，每轮归并$n$个元素，比较次数$(n-1)(k-1)$，总比较次数和$\frac{k-1}{log\ k}$有关，随着k增大而增大</li>
<li>解决方法是败者树<ul>
<li>一种完全二叉树</li>
<li>k个叶结点存放k个归并段当前参加比较的记录，内部结点用来保存失败者（较大者失败），胜利者继续向上比较，最终得到的胜利者就是当前选出的最小值</li>
<li>胜利者结点删除后，进来新的结点，只需要把新的结点到根的路径上的比较重进行一次即可更新败者树，因此可以认为每轮比较次数由$(n-1)(k-1)$优化到了$(n-1)\lceil log_2 k\rceil$，从而总的比较次数和$k$无关</li>
<li>个人认为，用最小堆也可以起到差不多的效果</li>
</ul>
</li>
<li>多路平衡归并的k也不是越大越好，因为路数k增加，需要增加输入缓冲区的个数，这对内存空间有要求，如果内存不够了，只能减小缓冲区大小，这样同样会使得读写外存次数增加</li>
</ul>
<h3 id="置换-选择排序"><a href="#置换-选择排序" class="headerlink" title="置换-选择排序"></a>置换-选择排序</h3><ul>
<li>减少初始归并串数可以减少读写磁盘次数</li>
<li>采用内部排序法得到的初始归并串，依赖于可用内存工作区的大小</li>
<li>置换选择算法初始归并串的步骤如下（FI为输入文件，W为可容纳w个记录的内存工作区，FO为输出文件）<ul>
<li>从FI中读w个记录到W</li>
<li>选W中关键字最小的记录，记为X，并加入到FO</li>
<li>若FI不空，则取1个记录到W</li>
<li>选W中比X大的最小记录，记为X，并加入FO</li>
<li>重复前2步</li>
<li>如果W中选不出比X大的最小记录，且W不空，则FO中输出一个初始归并串的结束标记</li>
<li>从第2步开始继续，直至W为空</li>
</ul>
</li>
<li>置换选择算法中的取最小，可以使用败者树，也可以用最小堆</li>
</ul>
<h3 id="最佳归并树"><a href="#最佳归并树" class="headerlink" title="最佳归并树"></a>最佳归并树</h3><ul>
<li>采用置换-选择排序得到的初始归并串，长度不一定相同，因此，平衡归并不一定是最佳的归并顺序，有IO次数更少的归并顺序</li>
<li>利用哈夫曼树，叶结点表示初始归并段，权重为归并串长度（记录数），则WPL带权路径长度就是总读记录数，总读写记录数为2WPL<ul>
<li>前面平衡树的轮数就是层数，WPL就是记录数乘以轮数，就是总读记录数</li>
</ul>
</li>
<li>原理上就是希望记录少的初始归并串先归并，记录多的初始归并串后归并</li>
<li>哈夫曼树是严格的k叉树，如果初始归并段不足，则可以认为存在长度为0的虚初始段，参与归并</li>
<li>计算的方法是利用$n_0+n_k=k\times n_k+1$，则$n_0=(k-1)\times n_k+1$，由此只需要补充叶结点数为k-1的整数倍加1即可</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【阅读笔记】 Generalied ODIN:Detecting Out-of-distribution Image without Learning from Out-of-distribution Data</title>
    <url>/2021/04/04/Generalized-ODIN/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>对于和训练集同分布的数据，深度神经网络已经获得了惊人的性能，但对于其他数据集性能会明显变差。因此，检测一个样本是不是OoD对于能拒绝或警示这种样本的系统是重要的。包含 一些小数据集的OoD benchmarks下的工作在近期已经取得了巨大的进展。然而，这些方法很多都需要神经网络训练、调参的时候同时有in-distribution和out-of-distribution的数据。后者是难以先验定义的，不同的OoD数据会产生不同的学习效果。本文的工作基于一个流行的方法：ODIN。这个方法提出两个重要的策略，不需要OoD的数据，同时改进了OoD的检测性能。本文具体的提出了<strong>分解置信度</strong>的方法以及<strong>改进input preprocessing</strong>的方法。本文展示了这两者都得能显著提高检测OoD的性能。并且，作者在更大规模的图像数据集上进行了分析，表明数据的分布迁移有两种：语义迁移和非语义迁移。这两者会让问题的难度变得非常不同，这提供了一个关于ODIN-like的策略何时能有效的分析。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>先进的机器学习模型，具体来说是深度神经网络，通常在静态封闭世界假设下设计的。这些模型需要引入测试集和训练集独立同分布的假设。在真实世界，数据分布会以复杂和动态的方式进行迁移。更坏的是，新概念（如新的分类对象）可能在任何时刻输入到模型中。这样的类内的迁移或者是新概念的数据都会导致灾难性的失败，因为模型依然是基于封闭世界假设来预测的。这些失效经常是无声的，模型不会输出明显的错误。</p>
<p>以上的问题已经被规范为一个检测问题，即判断一个输入数据是不是in-distribution的数据，或者是out-of-distribution。这个问题已经被研究了很多年，也以各种观点被讨论了，例如rejection, anomaly detection, open set recognition, uncertainty estimation。最近几年，一个流行的基于神经网络检测的baseline使用了类别的后验概率（即softmax）的最大值，这个方法可以在有些情况是一个良好的区分in-distribution和out-of-distribution的指示器。</p>
<p>ODIN，基于训练好的神经网络分类器，提供两个策略，temperature scaling和input preprocessing，使得用最大的输出概率检测OoD变的更有效。这个方法的性能已经深入的确认了，并且和很多其他的OoD检测方法都在相同的评估准则下进行了比较。ODIN的方法，比很多流行策略都要好，例如MC-Dropout，DeepEnsemble，PixelCNN++，OpenMax等等。</p>
<p>尽管ODIN的方法非常高效，它仍需要OoD的数据集来调超参。这样做的问题是，用一个OoD数据集调好的最佳超参数，换一个OoD数据集可能就不再理想。事实上，其他的基于神经网络的方法，在同样的问题设置下，都有同样的要求，观点上都是通过精挑细选OoD数据集来规范后验学习概率，这样就使得OoD的数据置信度比In-Distribution的置信度要低。最近，还有文章使用生成式模型来建模OoD相对于In-Distribution的边界。</p>
<p>尽管上面的工作展示了OoD数据参与学习是有效的，但其实OoD范围在高维空间是很宽泛的，比如说像素空间，因此很难被完美覆盖，潜在的导致了学习的选择偏差。一些以往的工作也尝试了不用OoD数据集参与学习，例如用单词嵌入作为额外的监督；或者使用度量学习的标准。然而这俩方法的报告性能都和ODIN差不多，表明不用OoD数据集参与训练是一个有挑战的设置。</p>
<p>在本文的工作中，作者遵循着ODIN的设置，采用两个相应的策略，不需要OoD数据来解决问题。首先，作者提出一个新的概率的视角来分解网络预测的置信度。增加了一个明确采用封闭世界假设的变量来表示数据是不是in-distribution的，然后讨论它在分解后的概率的角色。收到概率观点的启发，我们使用除数结构作为分类器，这鼓励了神经网络的行为更像分解后的置信度效果。如下图(Figure1)所示。</p>
<img src="/2021/04/04/Generalized-ODIN/Figure1.png" class title="this is Figure1">
<p>我们注意到这个除法结构和temperature scaling紧密联系，且scaling依赖于输入而不是调好的超参数；第二，作者构建了ODIN中输入预处理的方法，然后研究出一个有效的策略去调节到微扰级别这个超参数，并且只需要in-distribution的数据。</p>
<p>接着，作者对基准图像数据集(如CIFAR10/100、TinyImageNet、LSUN、SVHN以及更大规模的数据集DomainNet)进行广泛的评估，以调查所提议的策略有用或没用。结果表明，这两种策略可以显著提高ODIN的性能，其性能接近甚至在某些情况下超过使用OoD数据调优的最先进方法。最后，我们在DomainNet上的系统评估揭示了两种分布迁移类型检测的相对难度:语义迁移和非语义迁移。这两者的区别是，迁移中是否包含新的类别。</p>
<p>综上所述，本文的贡献有三个方面:</p>
<ul>
<li>给出了分解置信度的新角度</li>
<li>提出一个不需要OoD调参的改进版input preprocessing的方法</li>
<li>在没有OoD数据参与学习的设置下，结合实验进行综合分析</li>
</ul>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>本文研究了分类问题中的OoD检测设置问题。以一个数据集$D_{in}=\{(\pmb{x}_i,y_i)\}_{i=1}^{N}$开始, in-distribution数据集为$\pmb{x}_i \in R^k$, 以及对于C个类，类别标签$y_i \in \{y\}={1\cdots C}$。$D_{in}$是从分布$p_{in}(\pmb{x},y)$中抽样生成的。然后我们有一个具有区分力的模型$f_{\theta}(\pmb{x})$，其中$\theta$是从$D_{in}$中学习到的参数，以更好的预测各个类的后验概率$p(y|\pmb{x})$。</p>
<p>当学好的分类器$f_{theta}$放置到开放世界中，他会遭遇到来自不同分布$p_{out}$的数据。从所有可能的OoD位置采样是很困难的，例如维度很高的图像空间。注意我们可以在概念上把迁移的类别分为语义迁移和非语义的迁移。非语义迁移的数据是从分布$p_{out}(\pmb{x},y)$中抽样的。而语义迁移的样本来自于同一个对象类，但以不同的形式进行表达，例如卡通和素描图片。这样的迁移也是domain adaptation中广泛被讨论的问题。对于语义迁移的情况，从$p_{out}(x,\overline{y})$中抽取样本。换句话说，这些样本的类型在训练集的$D_{in}$中都是看不到的。以下是一个图示(Figure2)。</p>
<img src="/2021/04/04/Generalized-ODIN/Figure2.png" class title="this is Figure2">
<p>对于开方世界的模型，上述的差异引出了两个自然需要解决的问题：模型在遇到$\pmb{x} \sim p_{out}(x,\overline{y})$时，怎么能避免进行预测；当模型遇到$\pmb{x} \sim p_{out}(x,y)$时拒绝低置信度的预测。在本文中，作者提出了一个明确的二值域变量$d \in {d_{in},d_{out}}$来表达决定。前者表示$\pmb{x}\sim p_{in}$，后者表示$\pmb{x}\sim p_{out}$。注意到模型通常是无法区分这两种情况的，我们仍然可以说以上的问题都可以通过估计变量$d$来回答。</p>
<p>最后的目标也就是发现一个评分函数$S(\pmb{x})$，其与后验概率$p(d|\pmb{x})$相关。较高的评分$S(\pmb{x})$表明一个较高的后验概率$p(d|\pmb{x})$。最后二值的决定可以用一个阈值来处理。选择的阈值受限于应用需求和性能度量计算。有了上面的标注，我们可以把baseline方法当作是一个特例$S_{Base}(\pmb{x})=\max_{y}p(y|\pmb{x})$，其中$p(y|\pmb{x})$从一个标准的从交叉熵训练的神经网络分类器中获取。然而，$S(\pmb{x})$可以是一个可学习的带参函数，不同的OoD方法可以按具体的参数和学习步骤来归类。方法间一个最关键的差异是，是否用OoD的数据参与$S(\pmb{x})$训练过程。</p>
<h3 id="Related-Methods"><a href="#Related-Methods" class="headerlink" title="Related Methods"></a>Related Methods</h3><p>本节描述了和本文最相关的两个方法：<strong>ODIN</strong> 和 <strong>Mahalanobis</strong>。这两个方法将作为评估时两个很强的baseline进行比较，而且马氏距离是比ODIN更有优势的。注意到，这个两个方法都是用$D_{in}$训练一个普通的分类器$f_{\theta}$(单入口单出口)，然后有一个打分函数$S(\pmb{x},f_{theta})$，有额外的超参数需要调。按两个方法原本的工作，打分函数里的超参数都是需要OoD的数据去调的。本文将会描述不需要OoD去调超参数的方法。</p>
<h4 id="ODIN"><a href="#ODIN" class="headerlink" title="ODIN"></a>ODIN</h4><p>该方法包含两个策略，即temperture scaling和input preprocessing。前者是把打分函数设置如下：<br>\begin{equation}<br>S_{ODIN}(\pmb{x})=\max\limits_{i}\frac{exp(f_i(\pmb{x})/T)}{\sum_{j=1}^{N}exp(f_j(\pmb{x})/T)}<br>\end{equation}</p>
<p>尽管ODIN的原始方法需要用OoD数据集调超参数$T$，但其也展示了$T$很大的时候通常是效果很好的，并且建议$T$设置超过1000。因此本文遵循建议，在实验中把$T$设置为1000。</p>
<h4 id="Mahalanobis"><a href="#Mahalanobis" class="headerlink" title="Mahalanobis"></a>Mahalanobis</h4><p>马氏距离同样包含了两个部分：马氏距离的计算和输入预处理。马氏距离的打分函数如下：<br>\begin{equation}<br>S^{l}_{Maha}(\pmb{x})=\max\limits_{i}\{-[f^l(\pmb{x})-\mu_i^l]^T\Sigma_{l}^{-1}[f^l(\pmb{x})-\mu_i^l]\}<br>\end{equation}</p>
<p>\begin{equation}<br>S_{Maha}(\pmb{x})=\sum\limits_{l}\alpha_lS_{Maha}^l(\pmb{x})<br>\end{equation}</p>
<ul>
<li>$f^l(\pmb{x})$：网络的第$l$层输出特征</li>
<li>$\mu_i$：第i个类的特征均值</li>
<li>$\Sigma$：N个类的特征的协方差矩阵</li>
<li>$\alpha_l$：超参数，每个层参与集成的权重</li>
</ul>
<p>原文的马氏距离需要OoD数据调优，本文就采用基础情况，即$S_{Maha}(\pmb{x})=\sum\limits_{l}S_{Maha}^l(\pmb{x})$</p>
<p>我们注意到马氏距离和ODIN一样也都用到了input preprocessing的策略，又会引入需要OoD调优的超参数。因此本文还会给出一个不需要OoD调参的input preprocessing方法。</p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="The-Decomposed-Confidence"><a href="#The-Decomposed-Confidence" class="headerlink" title="The Decomposed Confidence"></a>The Decomposed Confidence</h3><p>我们知道softmax分类器倾向于输出一个较高置信度的预测结果，比如把高斯噪声放到MNIST图像分类器中会给出高达91%的预测概率。这是因为softmax是高度平滑的指示函数，会给出一个很陡的概率分布结果而不是一个类之间概率平缓的结果。我们也承让这个观点，并更深远的考虑把这个当作是softmax设计中的缺陷。为了解决这个限制，我们的启发是重新思考输出的形式，也就是后验概率$p(y|\pmb{x})$，这个概率没有考虑到$d$的域。换句话说，目前的方法是建立在封闭世界假设$d=d_{in}$的情况下的。因此，作者在分类器中使用明确的变量$d_{in}$，用条件概率的规则将其改写为商的形式如下：<br>\begin{equation}<br>p(y|d_{in},\pmb{x})=\frac{p(y,d_{in}|\pmb{x})}{p(d_{in}|\pmb{x})}<br>\end{equation}</p>
<p>上面的公式提供了一个概率的视角解释为什么分类器会过度自信。考虑到$\pmb{x}\sim p_{out}$，很自然的想到，C个类中的最大的联合概率$p(y,d_{in}|\pmb{x})$是比较小的(如0.09)，同时期望对应的$p(d_{in}|\pmb{x})$也是比较小的(如0.1)。因此，计算条件概率$p(y|d_{in},\pmb{x})$以后还是可能会给出一个比较高的概率结果(0.9)。这展示了高度的自信是怎么导致的。基于公式4，作者把$p(y,d_{in}|\pmb{x})$和$p(d_{in}|\pmb{x})$叫做已分解的置信度。</p>
<p>一个直接的解决方案来解决上述问题，就是学习一个分类器来预测联合概率分布$p(y,d_{in}|\pmb{x})$，这样既考虑了标签$y$又考虑了变量$d$。而获取一个联合概率分布的分类器比获得一个OoD的检测器要好，这是因为前者既能通过$arg \max_{y_{in}}p(y,d_{in}|\pmb{x})$来进行分类，又可以通过给定阈值来拒绝预测(博主个人理解是找个合适的阈值和$\sum_{y_{in}}p(y,d_{in}|\pmb{x})$进行比较)。这样的观点和有些工作相关，比如添加额外的损失惩罚项到预测OoD概率不均匀的分类器中。然而这样的策略还是需要OoD去参与和调节训练的。</p>
<p>不使用OoD的数据集，没有一个主流的方法能够学到$p(y,d_{in}|\pmb{x})$和$p(d_{in}|\pmb{x})$。这个场景非常像无监督学习，需要插入关于学习的假设和先验知识。在本文中，作者使用了公式4的除法结构作为先验知识来设置分类器，提供分类器分解概率置信度的能力。</p>
<p>对于分类器的除法结构，作者定义第i个类的输出logit为$f_i(\pmb{x})$，并且可以写成除法的形式：</p>
<p>\begin{equation}<br>f_i(\pmb{x})=\frac{h_i(\pmb{x})}{g(\pmb{x})}<br>\end{equation}</p>
<p>这个商$f_i(\pmb{x})$然后用指数函数归一化，变成softmax，然后被当成条件概率$p(y|d_{in},\pmb{x})$，这个条件概率受限于交叉熵损失。</p>
<p>在softmax指数归一化的影响下，交叉熵损失将会以两种方式减小，增加$h_i(\pmb{x})$或者减小$g(\pmb{x})$。换句话说，当数据不是in-distribution总的高密度区域时，$h_i(\pmb{x})$趋向于比较小的值。这样，$g(\pmb{x})$也会比较小以最小化交叉熵损失。其他的情况，也就是数据在高密度区域，$h_i(\pmb{x})$会很容易变大，因此$g(\pmb{x})$不鼓励变小。这些对分子分母的讨论和条件概率分解后的分子分母有着相似性，这样单独看分子分母的分布，OoD和ID是有较小的重叠的，这也是$p(y,d_{in}|\pmb{x})$和$p(d_{in}|\pmb{x})$的本质性质，如之前图1所展示的那样。</p>
<h4 id="Design-Choices"><a href="#Design-Choices" class="headerlink" title="Design Choices"></a>Design Choices</h4><p>尽管除法结构提供了一个趋势，但它不能保证分解置信度的效果一定发生。$h_i(\pmb{x})$和$g(\pmb{x})$的特点可以极大的影响分解发生的可能性。因此我们讨论了一系列简单的设计选择，来考察分解通常是不是能够获得的。</p>
<p>具体而言，使用$g(\pmb{x})=\sigma[BN(\pmb{\omega}_gf^p(\pmb{x})+b_g)]$，其中：</p>
<ul>
<li>$f^p(\pmb{x})$：网络倒数第二层，后面还要套上线性层、BN、sigmoid函数</li>
<li>$\sigma$：sigmoid函数</li>
<li>$\pmb{\omega}$和$b$表示可学习的权重</li>
</ul>
<p>对于$h_i(\pmb{x})$，我们研究了三个相似性的度量：</p>
<ul>
<li>内积：$h_i^I(\pmb{x})=\pmb{\omega}_i^Tf^p(\pmb{x})+b_i$</li>
<li>欧氏距离的相反数：$h_i^E(\pmb{x})=-||f^p(\pmb{x})-\pmb{\omega}_i||^2$</li>
<li>余弦相似性：$h_i^C(\pmb{x})=\frac{\pmb{\omega}_i^Tf^p(\pmb{x})}{||\pmb{\omega}_i||||f^p(\pmb{x})||}$</li>
</ul>
<p>因此整个网络$f_{\theta}$在倒数第二层后分为两个分支$h_i$和$g$。在训练时，模型计算softmax函数处理后的logit的交叉熵；在测试阶段，类别的预测将由$arg \max_if_i(\pmb{x})$或$arg \max_ih_i(\pmb{x})$来给出，俩者预测结果是一样的。对于OoD检测，score函数是$S_{DeConf}(\pmb{x})=\max_ih_i(\pmb{x})$或$g(\pmb{x})$。如果令$h_i(\pmb{x})=h_i^I(\pmb{x})$且$g(\pmb{x})=1$那么将退化为baseline。本文把三个变量的方法分别成为Deconf-I,Deconf-E和DeConf-C。为了简单起见，用$h_i(\pmb{x})$作为scores，而$g(\pmb{x})$的使用之后会具体说明。</p>
<h4 id="Temperature-Scaling"><a href="#Temperature-Scaling" class="headerlink" title="Temperature Scaling"></a>Temperature Scaling</h4><h3 id="A-Modified-Input-Preprocessing-Strategy"><a href="#A-Modified-Input-Preprocessing-Strategy" class="headerlink" title="A Modified Input Preprocessing Strategy"></a>A Modified Input Preprocessing Strategy</h3><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Experimental-Settings"><a href="#Experimental-Settings" class="headerlink" title="Experimental Settings"></a>Experimental Settings</h3><h3 id="Results-and-Discussion"><a href="#Results-and-Discussion" class="headerlink" title="Results and Discussion"></a>Results and Discussion</h3><h3 id="Semantic-Shift-versus-Non-semantic-Shift"><a href="#Semantic-Shift-versus-Non-semantic-Shift" class="headerlink" title="Semantic Shift versus Non-semantic Shift"></a>Semantic Shift versus Non-semantic Shift</h3><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
      <categories>
        <category>OoD Detection</category>
      </categories>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第一章-随机事件和概率</title>
    <url>/2021/11/26/ProbabilityAndStatistics1/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>随机试验：可重复、已知所有可能的结果、结果无法预知的实验</li>
<li>样本点：随机试验可能的结果</li>
<li>样本空间：所有样本点的集合</li>
<li>随机事件：样本空间的子集（是一个集合）<ul>
<li>关系<ul>
<li>包含</li>
<li>相等</li>
<li>互斥</li>
<li>对立（补运算）</li>
</ul>
</li>
<li>运算<ul>
<li>交</li>
<li>并</li>
<li>差（$A-B=A\overline{B}$）</li>
<li>补（对立关系）</li>
</ul>
</li>
<li>运算规律<ul>
<li>交换律</li>
<li>结合律</li>
<li>分配律（两个）</li>
<li>对偶律（德摩根律）</li>
</ul>
</li>
</ul>
</li>
<li>推导时用韦恩图辅助</li>
</ul>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><ul>
<li>定义<ul>
<li>概率非负</li>
<li>必然事件概率为1</li>
<li>互斥事件的并的概率 = 互斥事件概率的和</li>
</ul>
</li>
<li>条件概率<ul>
<li>$P(A|B)=\frac{P(AB)}{P(B)}$</li>
</ul>
</li>
<li>独立<ul>
<li>两个事件独立<ul>
<li>$P(A|B)=P(A)\Leftrightarrow P(AB)=P(A)P(B)$</li>
</ul>
</li>
<li>多个事件独立<ul>
<li>任取$k$个事件，$P(A_{i_1}A_{i_2}\cdots A_{i_k})=P(A_{i_1})P(A_{i_2})\cdots P(A_{i_k})$</li>
</ul>
</li>
<li>充要条件<ul>
<li>互相独立的n个事件中的任何几个换成相应对立事件，新的n个事件依然相互独立</li>
</ul>
</li>
</ul>
</li>
<li>五大公式（用韦恩图记忆）<ul>
<li>加法<ul>
<li>$P(A\cup B)=P(A)+P(B)-P(AB)$</li>
</ul>
</li>
<li>减法<ul>
<li>$P(A-B)=P(A)-P(AB)$</li>
</ul>
</li>
<li>乘法（本质是条件概率）<ul>
<li>$P(A_1A_2\cdots A_n)=P(A_1)P(A_2|A_1)\cdots P(A_n|A_1A_2\cdots A_{n-1})$</li>
</ul>
</li>
<li>全概率<ul>
<li>全集划分为$B_i$</li>
<li>$P(A)=\sum P(B_i)P(A|B_i)$</li>
</ul>
</li>
<li>贝叶斯（全概率+条件概率）<ul>
<li>全集划分为$B_i$</li>
<li>$P(B_j|A)=\frac{P(B_jA)}{P(A)}=\frac{P(B_j)P(A|B_j)}{\sum P(B_i)P(A|B_i)}$</li>
<li>第一个等号用条件概率；第二个等号的分子用条件概率；第二个等号的分母用全概率</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="基本概型"><a href="#基本概型" class="headerlink" title="基本概型"></a>基本概型</h2><ul>
<li>古典概型<ul>
<li>事件的概率 = 事件的样本点数 比 样本空间总点数</li>
</ul>
</li>
<li>几何概型<ul>
<li>把古典概型离散的样本点连续化推广</li>
</ul>
</li>
<li>伯努利试验<ul>
<li>一次伯努利试验只有对立的正反两个结果</li>
<li>每次伯努利试验独立</li>
<li>$n$次伯努利试验，出现$k$次正结果的概率是$C_n^kp^k(1-p)^{n-k}$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-随机变量及其概率分布</title>
    <url>/2021/11/26/ProbabilityAndStatistics2/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="随机变量及其分布函数"><a href="#随机变量及其分布函数" class="headerlink" title="随机变量及其分布函数"></a>随机变量及其分布函数</h2><ul>
<li>随机变量：从样本点到某个实数的函数</li>
<li>分布函数：$F(x)=P(X\leq x)$<ul>
<li>单调非减</li>
<li>右连续</li>
<li>$P\{X=x\}=F(x)-F(x-0)$</li>
</ul>
</li>
</ul>
<h2 id="离散型随机变量"><a href="#离散型随机变量" class="headerlink" title="离散型随机变量"></a>离散型随机变量</h2><ul>
<li>定义：随机变量的取值为有限个或可数无穷个</li>
<li>分布律：算出每个取值的概率<ul>
<li>表示：一般用表格列出每个取值的概率</li>
<li>性质：每项非负，总和为1</li>
</ul>
</li>
</ul>
<h2 id="连续型随机变量"><a href="#连续型随机变量" class="headerlink" title="连续型随机变量"></a>连续型随机变量</h2><ul>
<li>定义：能找到一个非负可积的函数$f(x)$，使得随机变量的分布函数$F(x)=\int_{-\infty}^xf(t)dt,-\infty&lt;x&lt;+\infty$<ul>
<li>$f(x)$为密度函数</li>
</ul>
</li>
<li>性质：连续型随机变量的分布函数一定连续，反之则不一定（比如康托尔函数）</li>
<li>密度函数性质<ul>
<li>非负</li>
<li>实数域积分为1</li>
<li>$P(x_1&lt;X\leq x_2)=\int_{x_1}^{x_2}f(t)dt$（不等式端点的概率值为0，可带上可不带上）</li>
<li>密度函数不连续的点，一般认为分布函数不可导（不考虑实变函数、测度论）</li>
<li>密度函数连续的点，概率密度等于分布函数的导数</li>
</ul>
</li>
</ul>
<h2 id="常见分布"><a href="#常见分布" class="headerlink" title="常见分布"></a>常见分布</h2><h3 id="离散型"><a href="#离散型" class="headerlink" title="离散型"></a>离散型</h3><ul>
<li>0-1分布<ul>
<li>$X\sim B(1,p)$</li>
<li>$P\{X=k\}=p,P(X=0)=1-p$</li>
</ul>
</li>
<li>二项分布<ul>
<li>$X\sim B(n,p)$</li>
<li>$P\{X=k\}=C_n^kp^k(1-p)^(n-k),k=0,1,\cdots,n$</li>
</ul>
</li>
<li>几何分布<ul>
<li>参数$p$</li>
<li>$P\{X=k\}=p(1-p)^{k-1},k=1,2,\cdots$<ul>
<li>即伯努利试验第$k$次才成功的概率</li>
</ul>
</li>
</ul>
</li>
<li>超几何分布<ul>
<li>参数$n,N,M$</li>
<li>$P\{X=k\}=\frac{C_M^kC_{N-M}^{n-k}}{C_N^n}$<ul>
<li>总共$N$个产品，$M$个次品，抽出$n$件样品，有$k$个次品的概率</li>
</ul>
</li>
</ul>
</li>
<li>泊松分布<ul>
<li>$X\sim P(\lambda)$</li>
<li>$P\{X=k\}=\frac{\lambda^k}{k!e^\lambda},k=0,1,\cdots$</li>
<li>泊松定理的使用<ul>
<li>对于伯努利分布$B(n,p)$，当$n$大、$p$小、$np$不太大时，可近似为泊松分布$P(np)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="连续型"><a href="#连续型" class="headerlink" title="连续型"></a>连续型</h3><ul>
<li>均匀分布<ul>
<li>$X\sim U(a,b)$<ul>
<li>在$(a,b)$上均匀分布</li>
</ul>
</li>
<li>$X\sim U[a,b]$<ul>
<li>在$[a,b]$上均匀分布</li>
</ul>
</li>
</ul>
</li>
<li>指数分布<ul>
<li>$X\sim E(\lambda)$<ul>
<li>$f(x)=\lambda e^{-\lambda x},x&gt;0$</li>
<li>$f(x)=0,x\leq 0$</li>
</ul>
</li>
</ul>
</li>
<li>正态分布<ul>
<li>$X\sim N(\mu,\sigma^2)$<ul>
<li>标准正态分布为$N(0,1)$</li>
</ul>
</li>
<li>$f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$<ul>
<li>标准正态分布函数$\Phi(x)$，密度函数$\phi(x)$</li>
</ul>
</li>
<li>性质<ul>
<li>$F(x)=\Phi(\frac{x-\mu}{\sigma})$</li>
<li>$\phi(x)=\phi(-x)$</li>
<li>$\Phi(x)=1-\Phi(-x)$</li>
</ul>
</li>
<li>标准化<ul>
<li>$P\{\frac{X-\mu}{\sigma}\leq \frac{x-\mu}{\sigma}\}=P\{X\leq x\}=F(x)=\Phi(\frac{x-\mu}{\sigma})$</li>
<li>故$P\{\frac{X-\mu}{\sigma}\leq y\}=\Phi(y)$</li>
<li>即$\frac{X-\mu}{\sigma}\sim N(0,1)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="随机变量函数的分布"><a href="#随机变量函数的分布" class="headerlink" title="随机变量函数的分布"></a>随机变量函数的分布</h2><p>即求$Y=g(X)$的分布</p>
<h3 id="离散型-1"><a href="#离散型-1" class="headerlink" title="离散型"></a>离散型</h3><ul>
<li>列表求解即可，核心是<strong>把随机变量的函数中相同的值的概率合并</strong></li>
</ul>
<h3 id="连续型-1"><a href="#连续型-1" class="headerlink" title="连续型"></a>连续型</h3><ul>
<li>公式法<ul>
<li>要求$g$函数为一一映射，比如单调</li>
<li>利用$|f_X(x)dx|=|f_Y(y)dy|$，得到$f_Y(y)=\frac{dx}{dy}f_X(g^{-1}(y))$</li>
</ul>
</li>
<li>定义法<ul>
<li>利用$F_Y(y)=P\{Y\leq y\}=P\{g(X)\leq y\}=\int_{g(x)\leq y} f_X(x)dx$</li>
<li>往往需要分三段讨论$y$<ul>
<li>太小时分布函数为$0$</li>
<li>太大时分布函数为$1$</li>
<li>适中时再深入计算 </li>
</ul>
</li>
</ul>
</li>
<li>重要结论<ul>
<li>任一连续型随机变量$X$，分布函数为$F(x)$，则$Y=F(X)\sim U(0,1)$（用定义法即可证明）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-多维随机变量及其概率分布</title>
    <url>/2021/11/28/ProbabilityAndStatistics3/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="二维离散型随机向量"><a href="#二维离散型随机向量" class="headerlink" title="二维离散型随机向量"></a>二维离散型随机向量</h2><ul>
<li>联合概率分布<ul>
<li>用二维的<strong>列联表</strong>表示</li>
</ul>
</li>
<li>联合分布函数<ul>
<li>$F(x,y)=P\{X\leq x,Y\leq y\}$</li>
</ul>
</li>
<li>边缘分布<ul>
<li>关于$X$和$Y$的边缘分布为$F_X(x)=P\{X\leq x\}$和$F_Y(y)=P\{Y\leq y\}$</li>
<li>把列联表按行或按列累加</li>
</ul>
</li>
<li>条件分布<ul>
<li>一个条件对应列联表的某行或某列</li>
<li>把该行或列标准化，写成一维表，表示条件分布律</li>
</ul>
</li>
</ul>
<h2 id="二维随机变量及其分布"><a href="#二维随机变量及其分布" class="headerlink" title="二维随机变量及其分布"></a>二维随机变量及其分布</h2><ul>
<li>联合分布函数<ul>
<li>$F(x,y)=P\{X\leq x,Y\leq y\}$</li>
</ul>
</li>
<li>联合密度函数<ul>
<li>存在非负可积二元函数$p(x,y)$使得$F(x,y)=\int_{-\infty}^x\int_{-\infty}^yp(u,v)dudv$</li>
<li>$p(x,y)$即密度函数<ul>
<li>非负</li>
<li>平面上积分为1</li>
</ul>
</li>
</ul>
</li>
<li>边缘分布<ul>
<li>$F_X(x)=F(x,+\infty)$</li>
<li>$F_Y(y)=F(+\infty,y)$</li>
</ul>
</li>
<li>边缘密度<ul>
<li>$p_X(x)=\int_{-\infty}^{+\infty}p(x,v)dv$</li>
<li>$p_Y(y)=\int_{-\infty}^{+\infty}p(u,y)du$</li>
</ul>
</li>
<li>条件分布<ul>
<li>$F_{Y|X=x}(y|x)=\int_{-\infty}^y\frac{p(x,v)}{P_X(x)}dv$</li>
<li>$F_{X|Y=y}(x|y)=\int_{-\infty}^x\frac{p(u,y)}{P_Y(y)}du$</li>
</ul>
</li>
<li>条件密度<ul>
<li>$p_{Y|X=x}(y|x)=\frac{p(x,y)}{P_X(x)}$</li>
<li>$p_{X|Y=y}(x|y)=\frac{p(x,y)}{P_Y(y)}$</li>
</ul>
</li>
</ul>
<h2 id="随机变量独立性"><a href="#随机变量独立性" class="headerlink" title="随机变量独立性"></a>随机变量独立性</h2><ul>
<li>两个随机变量相互独立<ul>
<li>$F(x,y)=F_X(x)F_Y(y)$</li>
</ul>
</li>
<li>两个离散型随机变量相互独立<ul>
<li>$P\{X=x_i,Y=y_j\}=P\{X=x_i\}P\{Y=y_j\}$</li>
</ul>
</li>
<li>两个连续型随机变量相互独立<ul>
<li>$f(x,y)=f_X(x)f_Y(y)$</li>
</ul>
</li>
</ul>
<h2 id="二维均匀分布"><a href="#二维均匀分布" class="headerlink" title="二维均匀分布"></a>二维均匀分布</h2><ul>
<li>在某个区域内概率密度为常数</li>
</ul>
<h2 id="二维正态分布"><a href="#二维正态分布" class="headerlink" title="二维正态分布"></a>二维正态分布</h2><ul>
<li>表示<ul>
<li>$(X,Y)\sim N(\mu_1,\mu_2;\sigma_1^2,\sigma_2^2;\rho)$</li>
</ul>
</li>
<li>性质<ul>
<li>$X\sim N(\mu_1,\sigma_1^2),Y\sim N(\mu_2,\sigma_2^2)$</li>
<li>$X$和$Y$为一维正态分布且相互独立 $\Leftrightarrow$ $(X,Y)$为二维正态分布且$\rho=0$</li>
<li>当$a\neq 0$或$b\neq 0$，$aX+bY$服从一维正态分布</li>
<li>当$ad\neq bc$，$(aX+bY,cX+dY)$服从二维正态分布</li>
</ul>
</li>
</ul>
<h2 id="两个随机变量函数的分布"><a href="#两个随机变量函数的分布" class="headerlink" title="两个随机变量函数的分布"></a>两个随机变量函数的分布</h2><p>设$Z=g(X,Y)$</p>
<h3 id="两个离散型"><a href="#两个离散型" class="headerlink" title="两个离散型"></a>两个离散型</h3><ul>
<li>列出$(X,Y)$的联合概率分布表</li>
<li>求$Z$各个取值的概率，列出一维分布律表</li>
</ul>
<h3 id="两个连续型"><a href="#两个连续型" class="headerlink" title="两个连续型"></a>两个连续型</h3><ul>
<li><strong>定义法</strong><ul>
<li>$F_Z(z)=p\{Z\leq z\}=\iint\limits_{g(x,y)\leq z}f(x,y)dxdy$</li>
</ul>
</li>
<li>$Z=X+Y$的分布函数（<strong>定义法</strong>）<ul>
<li>$F_Z(z)=\iint\limits_{x+y\leq z}f(x,y)dxdy$</li>
<li>即$F_Z(z)=\int_{-\infty}^{+\infty}dy\int_{-\infty}^{z-y}f(x,y)dx=\int_{-\infty}^{+\infty}dx\int_{-\infty}^{z-x}f(x,y)dy$</li>
</ul>
</li>
<li>$Z=X+Y$的密度函数（<strong>定义法的结果求导</strong>）<ul>
<li>$f_Z(z)=\int_{-\infty}^{+\infty}f(z-y,y)dy=\int_{-\infty}^{+\infty}f(x,z-x)dx$ </li>
</ul>
</li>
<li>$X$和$Y$独立时，$Z=X+Y$的密度函数（<strong>卷积公式</strong>）<ul>
<li>$f_Z(z)=\int_{-\infty}^{+\infty}f(z-y)f(y)dy=\int_{-\infty}^{+\infty}f(x)f(z-x)dx$ </li>
</ul>
</li>
</ul>
<h3 id="一个离散型一个连续型"><a href="#一个离散型一个连续型" class="headerlink" title="一个离散型一个连续型"></a>一个离散型一个连续型</h3><ul>
<li>设$X$为离散型，$Y$为连续型</li>
<li>利用定义法结合全概率<ul>
<li>$F_Z(z)=P\{Z\leq z\}=P\{g(X,Y)\leq z\}=\sum\limits_iP\{X=x_i\}P\{g(X,Y)\leq z|X=x_i\}$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-随机变量的数字特征</title>
    <url>/2021/11/28/ProbabilityAndStatistics4/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h2><ul>
<li>离散型<ul>
<li>$E(X)=\sum\limits_k x_kP\{X=x_k\}$</li>
</ul>
</li>
<li>连续型<ul>
<li>$E(x)=\int_{-\infty}^{+\infty}xf(x)dx$</li>
</ul>
</li>
<li>性质<ul>
<li>$E(X\pm Y)=E(X)\pm E(Y)$</li>
<li>$X$和$Y$不相关，当且仅当$E(XY)=E(X)E(Y)$</li>
</ul>
</li>
<li>随机变量函数的数学期望<ul>
<li>法一：求出随机变量函数的分布，再用定义求数学期望，比较麻烦</li>
<li>法二：直接用数学期望的定义求解，不需要算随机变量函数的分布，方便</li>
</ul>
</li>
</ul>
<h2 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h2><ul>
<li>方差<ul>
<li>$D(X)=E\{[X-E(X)]^2\}$</li>
</ul>
</li>
<li>标准差<ul>
<li>$\sigma(X)=\sqrt{D(X)}$</li>
</ul>
</li>
<li>性质<ul>
<li>$D(X)=E(X^2)-E^2(X)$</li>
<li>$D(aX+b)=a^2D(X)$</li>
<li>$X$和$Y$不相关，当且仅当$D(X\pm Y)=D(X)+ D(Y)$</li>
</ul>
</li>
</ul>
<h2 id="常见分布的期望和方差"><a href="#常见分布的期望和方差" class="headerlink" title="常见分布的期望和方差"></a>常见分布的期望和方差</h2><ul>
<li>0-1分布<ul>
<li>$E(X)=p,D(X)=p(1-p)$</li>
</ul>
</li>
<li>二项分布<ul>
<li>$E(X)=np,D(X)=np(1-p)$</li>
</ul>
</li>
<li>泊松分布<ul>
<li>$E(X)=\lambda,D(X)=\lambda$</li>
</ul>
</li>
<li>几何分布<ul>
<li>$E(X)=\frac{1}{p},D(X)=\frac{1-p}{p^2}$</li>
</ul>
</li>
<li>均匀分布<ul>
<li>$E(X)=\frac{a+b}{2},D(X)=\frac{(a-b)^2}{12}$</li>
</ul>
</li>
<li>指数分布<ul>
<li>$E(X)=\frac{1}{\lambda},D(X)=\frac{1}{\lambda^2}$</li>
</ul>
</li>
<li>正态分布<ul>
<li>$E(X)=\mu,D(X)=\sigma^2$</li>
</ul>
</li>
</ul>
<h2 id="矩"><a href="#矩" class="headerlink" title="矩"></a>矩</h2><ul>
<li>$k$阶原点矩（$k=1,2,\cdots$）<ul>
<li>$E(X^k)$</li>
</ul>
</li>
<li>$k$阶中心矩（$k=1,2,\cdots$）<ul>
<li>$E\{[X-E(X)]^k\}$</li>
</ul>
</li>
<li>$k+l$阶混合原点矩（$k,l=1,2,\cdots$）<ul>
<li>简称混合矩</li>
<li>$E(X^kY^l)$</li>
</ul>
</li>
<li>$k+l$阶混合中心矩（$k,l=1,2,\cdots$）<ul>
<li>$E\{[X-E(X)]^k[Y-E(Y)]^l\}$</li>
</ul>
</li>
</ul>
<h2 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h2><ul>
<li>定义<ul>
<li>$Cov(X,Y)=E\{[X-E(X)][Y-E(Y)]\}$</li>
</ul>
</li>
<li>性质<ul>
<li>$Cov(X,Y)=E(XY)-E(X)E(Y)$</li>
<li>$D(X\pm Y)=D(X)+D(Y)\pm 2Cov(X,Y)$</li>
</ul>
</li>
</ul>
<h2 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h2><ul>
<li>定义<ul>
<li>当$D(X)D(Y)\neq 0$<ul>
<li>$\rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)D(Y)}}$</li>
</ul>
</li>
<li>当$D(X)D(Y)= 0$<ul>
<li>$\rho_{XY}=0$</li>
</ul>
</li>
</ul>
</li>
<li>性质<ul>
<li>$\rho_{XY}=0$ 当且仅当 $X$和$Y$不相关</li>
<li>$|\rho_{XY}|\leq 1$</li>
<li>$|\rho_{XY}|=1$ 当且仅当 存在$a,b$使得$P\{Y=aX+b\}=1$</li>
</ul>
</li>
</ul>
<h2 id="独立和不相关"><a href="#独立和不相关" class="headerlink" title="独立和不相关"></a>独立和不相关</h2><ul>
<li>独立一定不相关</li>
<li>不相关不一定独立</li>
<li>如果是二维正态分布，则相互独立等价于不相关<ul>
<li>可以参考第三章二维正态分布的结论</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第七章-参数估计</title>
    <url>/2021/12/05/ProbabilityAndStatistics7/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<p><em>本章旨在根据抽样结果，对总体分布函数中的参数值进行估计</em></p>
<h2 id="点估计"><a href="#点估计" class="headerlink" title="点估计"></a>点估计</h2><h3 id="矩估计法"><a href="#矩估计法" class="headerlink" title="矩估计法"></a>矩估计法</h3><ul>
<li>估计量<ul>
<li>作为参数的估计结果的统计量</li>
</ul>
</li>
<li>估计值<ul>
<li>估计量的观测值</li>
</ul>
</li>
<li>步骤<ul>
<li>令<strong>样本原点矩的观测值</strong>等于<strong>总体分布的原点矩</strong>（实际不一定相等，只是估计）</li>
<li>几个未知参数就列几个等式，从一阶原点矩开始列有效等式（等式右侧必须包含参数才有效），然后解方程</li>
<li>参数$\theta$的估计结果要写成$\hat{\theta}$，并注意是矩估计量还是矩估计值</li>
</ul>
</li>
</ul>
<h3 id="极大似然估计法"><a href="#极大似然估计法" class="headerlink" title="极大似然估计法"></a>极大似然估计法</h3><ul>
<li>本质<ul>
<li>求参数为多少时，样本值出现的概率（或样本联合密度）最大</li>
</ul>
</li>
<li>步骤<ul>
<li>求似然函数<ul>
<li>离散型总体：$L(\theta)=\prod\limits_{i=1}^nP(x_i;\theta)$</li>
<li>连续型总体：$L(\theta)=\prod\limits_{i=1}^nf(x_i;\theta)$</li>
</ul>
</li>
<li>似然函数取对数<ul>
<li>变成累加的形式</li>
</ul>
</li>
<li>求最大值对应的参数值<ul>
<li>一般令偏导为0即可</li>
<li>似然函数单调时，按定义求最值</li>
<li>似然函数常数时，按定义求最值，估计值不一定唯一</li>
</ul>
</li>
<li>参数$\theta$的估计结果要写成$\hat{\theta}$，并注意是极大似然估计量还是估计值 </li>
</ul>
</li>
<li>原理<ul>
<li>设$X_1,X_2,\cdots,X_n$表示样本随机变量，$x_1,x_2,\cdots,x_n$表示样本值</li>
<li>$\hat{\theta}=\arg\max\limits_{\theta_j}P\{\theta=\theta_j|X_1=x_1,\cdots,X_n=x_n\}$</li>
<li>即$\hat{\theta}=\arg\max\limits_{\theta_j}\frac{P\{\theta=\theta_j\}P\{X_1=x_1,\cdots,X_n=x_n|\theta=\theta_j\}}{P\{X_1=x_1,\cdots,X_n=x_n\}}$</li>
<li>先验情况认为$\theta$是均匀分布，则$\hat{\theta}=\arg\max\limits_{\theta_j}P\{X_1=x_1,\cdots,X_n=x_n|\theta=\theta_j\}$</li>
</ul>
</li>
<li>不变性原理<ul>
<li>若求的是$u=g(\theta)$的极大似然估计，必须存在单值反函数$\theta=g^{-1}(u)$，此时$\hat{u}=g(\hat{\theta})$</li>
</ul>
</li>
</ul>
<h3 id="估计量的评价"><a href="#估计量的评价" class="headerlink" title="估计量的评价"></a>估计量的评价</h3><p><em>主要考虑估计量的数字特征的性质</em></p>
<ul>
<li>无偏估计量<ul>
<li>估计量的期望等于参数</li>
</ul>
</li>
<li>更有效估计量<ul>
<li>估计量的方差更小</li>
</ul>
</li>
<li>一致估计量（相合估计量）<ul>
<li>估计量依概率收敛于参数</li>
<li>可以计算估计量的方差，然后利用切比雪夫不等式来证明依概率收敛</li>
</ul>
</li>
</ul>
<h2 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h2><ul>
<li>显著性水平<ul>
<li>接近0的正数$\alpha$</li>
</ul>
</li>
<li>置信度<ul>
<li>接近1的正数$1-\alpha$</li>
</ul>
</li>
<li>步骤<ul>
<li>根据已知条件，构造分布合适的带参数统计量<ul>
<li>构造主要考虑常见的抽样分布</li>
</ul>
</li>
<li>计算该统计量的带参数置信区间<ul>
<li>默认情况区间是对称的，两端有界</li>
<li>单侧置信区间不对称，一端有界</li>
<li>说明统计值在该区间的概率是置信度</li>
</ul>
</li>
<li>计算参数的带统计值的置信区间<ul>
<li>说明参数落在该区间的概率是置信度</li>
</ul>
</li>
<li>该区间就是参数的估计区间</li>
</ul>
</li>
<li>统计量构造记忆<ul>
<li>单正态总体<ul>
<li>$U=\frac{\overline{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$：总体方差已知求总体均值</li>
<li>$\chi_{n-1}^2=\frac{(n-1)S^2}{\sigma^2}$：求总体方差</li>
<li>$T=\frac{\overline{X}-\mu}{\frac{S}{\sqrt{n}}}$：总体方差未知求总体均值</li>
</ul>
</li>
<li>双正态总体<ul>
<li>$U=\frac{(\overline{X}-\overline{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}$：总体方差已知，求总体均值的差</li>
<li>$T=\frac{U}{\sqrt{\frac{\frac{(n_1-1)S_1^2}{\sigma_1}+\frac{(n_2-1)S_2^2}{\sigma_2}}{n_1+n_2-2}}}$：总体方差未知但相等时，求总体均值的差</li>
<li>$F=\frac{\frac{S_1^2}{\sigma_1^2}}{\frac{S_2^2}{\sigma_2^2}}$：求总体方差的比值</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第八章-假设检验</title>
    <url>/2021/12/05/ProbabilityAndStatistics8/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="假设类型"><a href="#假设类型" class="headerlink" title="假设类型"></a>假设类型</h2><ul>
<li>参数假设<ul>
<li>对总体分布函数的未知参数进行假设</li>
</ul>
</li>
<li>非参数假设<ul>
<li>不是参数假设的假设</li>
</ul>
</li>
<li>简单假设<ul>
<li>假设后的总体分布确定的假设</li>
</ul>
</li>
<li>复合假设<ul>
<li>不算简单假设的假设</li>
</ul>
</li>
</ul>
<h2 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h2><ul>
<li>第一类错误<ul>
<li>原假设正确，但被推翻（拒绝）</li>
<li>优先保证不犯第一类错误</li>
</ul>
</li>
<li>第二类错误<ul>
<li>原假设错误，但被接受</li>
</ul>
</li>
</ul>
<h2 id="显著性检验"><a href="#显著性检验" class="headerlink" title="显著性检验"></a>显著性检验</h2><ul>
<li>显著性水平$0&lt;\alpha&lt;1$<ul>
<li>犯第一类错误的概率</li>
<li>让$\alpha$尽量小，使得第一类错误概率小</li>
</ul>
</li>
<li>显著性检验<ul>
<li>行为：出现小概率事件才推翻原假设，否则接收原假设</li>
<li>基调：$\alpha$越小，越谨慎的推翻原假设，越保护原假设</li>
<li>效果：$\alpha$越小，第一类错误的概率越小，但第二类错误的概率有可能增大</li>
</ul>
</li>
<li>置信区间<ul>
<li>统计值落在置信区间的概率等于置信度$1-\alpha$</li>
<li>参数落在置信区间的概率等于置信度$1-\alpha$</li>
<li>注：参数估计先求统计值的置信区间，再求参数的置信区间</li>
</ul>
</li>
<li>拒绝域<ul>
<li>统计值落在拒绝域的概率等于显著性水平$\alpha$</li>
<li>参数落在拒绝域的概率等于显著性水平$\alpha$</li>
<li>注：假设检验先求统计值的拒绝域，再求参数的拒绝域</li>
</ul>
</li>
<li>步骤<ul>
<li>提出原假设<ul>
<li>原假设带有等号，对立假设不带有等号，因此如果检验的不等式带等号，则原假设待检验不等式，否则对立假设为待检验不等式</li>
</ul>
</li>
<li>给出显著性水平</li>
<li>在假设下<strong>构造合适分布的统计量</strong>并<strong>确定统计量的拒绝域形式</strong><ul>
<li>构造的统计量一般是第六章的几个抽样分布，并代入原假设条件（<strong>一律用等式条件</strong>）</li>
<li>拒绝域形式取决于对立假设</li>
</ul>
</li>
<li>查表得到统计量的拒绝域</li>
<li>计算统计值，判断统计值是否落在统计值拒绝域<ul>
<li>也可以通过统计量的拒绝域，得到参数的拒绝域，从而判断参数是否落在参数的拒绝域</li>
</ul>
</li>
<li>落在拒绝域代表发生小概率事件，拒绝原假设，否则接受。</li>
</ul>
</li>
</ul>
<h2 id="正态总体参数的显著性检验"><a href="#正态总体参数的显著性检验" class="headerlink" title="正态总体参数的显著性检验"></a>正态总体参数的显著性检验</h2><ul>
<li>统计量构造记忆<ul>
<li>单正态总体<ul>
<li>$U=\frac{\overline{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$：总体方差已知时，对总体均值检验</li>
<li>$\chi_n^2=\sum\limits_{i=1}^n(\frac{X_i-\mu}{\sigma})^2$：总体均值已知，对总体方差的检验</li>
<li>$\chi_{n-1}^2=\frac{(n-1)S^2}{\sigma^2}=\sum\limits_{i=1}^n(\frac{X_i-\overline{X}}{\sigma})^2$：总体的均值未知，对总体方差的检验</li>
<li>$T=\frac{\overline{X}-\mu}{\frac{S}{\sqrt{n}}}$：总体的方差未知，对总体的均值检验</li>
</ul>
</li>
<li>双正态总体<ul>
<li>$U=\frac{(\overline{X}-\overline{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}$：总体的方差已知，比较总体的均值</li>
<li>$T=\frac{U}{\sqrt{\frac{\frac{(n_1-1)S_1^2}{\sigma_1}+\frac{(n_2-1)S_2^2}{\sigma_2}}{n_1+n_2-2}}}$：总体的方差未知但相等，比较总体的均值</li>
<li>$F=\frac{n_2\sum\limits_{i=1}^{n_1}(\frac{X_i-\mu_1}{\sigma_1})^2}{n_1\sum\limits_{i=1}^{n_2}(\frac{X_i-\mu_2}{\sigma_2})^2}$：总体均值已知，比较总体方差</li>
<li>$F=\frac{\frac{S_1^2}{\sigma_1^2}}{\frac{S_2^2}{\sigma_2^2}}$：总体均值未知，比较总体方差</li>
</ul>
</li>
</ul>
</li>
<li>拒绝域形式记忆<ul>
<li>当对立假设是不等号<ul>
<li>拒绝域是双侧的，一般用$\frac{\alpha}{2}$分位点和$1-\frac{\alpha}{2}$分位点</li>
</ul>
</li>
<li>当对立假设是大于号<ul>
<li>拒绝域有单侧下界，一般用$\alpha$分位点</li>
</ul>
</li>
<li>当对立假设是小于号<ul>
<li>拒绝域有单侧上界，一般用$1-\alpha$分位点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="双正态规约为单正态"><a href="#双正态规约为单正态" class="headerlink" title="双正态规约为单正态"></a>双正态规约为单正态</h2><ul>
<li>对于相互独立的两个正态总体，总体方差未知的情况，比较总体的均值<ul>
<li>正常情况：先验证方差相等，然后在方差未知且相等的情况下，比较总体均值</li>
<li>特殊情况：当两个总体的样本容量相同，把样本作差构造出单正态总体的样本，转换为单正态总体的假设检验，在总体方差未知的情况，用$t$分布检验总体均值是否为0</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 题解勘误</title>
    <url>/2021/07/03/algorithms-revision/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="e3eb6a4539800d2d85be07125977b422392cefc1a2606c3343cde59850fd87df">757ff964fcfd9532ba69fc6fadfc1252eb09ce1986feccadb66dcf2cef6bec7f8ac130c638614de6e4768ae9fdd7e4fccd2d725faad7e57002c0a597d5814bc76643d9e1c3633af154d1c13988ad06258a55f81bd447deb4d0a8927237b527b5bb0dec256603944ee4bfb22f52c27b1cb4a3c6aaae3591d4be0b994d88497cd83439bc33c29c4f083ee0b52b2b7ab11910429db82d147de34f2ff239132d3a40f4924abde9157a985a9ac37b91ab1b6c02338f2ba921dc2df5ccf4409ee40959c0ab9701ce82b208ed9c97227819227ec020bafb26e2be8054a84c7a5269d0a4c5d16db2e226c7971b4142e46c640769914a33bd3a9e9b158434fedab3e3e86167749346e6d031f783a881614f7db24511a9645487494160d6f68494d3ed18c73b37262f33f08d28569d58e03758820905f24437cbe94658359127656594f4e6bf554ee0f96beb801203ce6e3b6dfa8a052ae2f0e70d185b986989d590eead7e2079d5d8aced3397970302a9b5c9bf3c1561e110a23ef8b35e90d8f0d8d53132de152ff51c7e02fcdccdf7ce38aeba0a5ab9cd48e9fb97ff2a5dcc9cad47e1a77fedb205ac60f9b1a79670d6d0c40e45debb326230099379ffa7767de50b08a5c42e88fc6d77216259306750d0f8a8542afb824e6313ae240d899f1536f56426f207d55d969b236b8e1e9149db7284abff8dbf046f52c9c3b75574af754162a2ee8fd5288a5b9ef9309befa48ed240c08b1e04265e8d60f7ccf0f0f783b405fcb5595d47952828529b60bb89f3ea7172fbd7b7f77be63ae9e21b2bf787478f2861143107700730c5e5081324c003f6b1386550d6100c18b1882ad208233fe7ec23bf02581894cc862bd7114031d600170bf6753d85ba908143f320e632277107c0a4c74a88b9cfaa71c505e0c6e739341274f3995244b964f5d64eb6b2f16f37bdc048d3e321195c8a5cf6dd78efa093a5563d32ce1a5b642a027e30ddd3a1b7dfe8a077f317ee1a8e898eafea9f02705dd2d68b222bfbf858fee9402fd0e6ff92b50087e3c09538637517efbb93bf93a0e25cdf9e3afc5b35645737a94ce2e688f53a57bfe6d82bf69c4d7ff185889c1af6ba160be86835e304dcae11131c426f3ed9c1e825c9ac7e8b3a21eafdfb329a648eb8b59e43d0f6632398ddb22d45e9a6103a8a50224ab186efdde58d05b8689afbe73e64df3af26fa1a02851cd6ccc3d13d4fd7ae3904bd104c10263f1e9af509c78ab326438761e80fbb8db612c821d3c0f85ab50a32e1c25a22ddcbb174cf3089d957f49ddb8c05d89d0fa91217a8ca2e2db432d292ff859e6cf1f2083106e6963790f078ddd2426456394972db933a624100ca2f031250ae5e6cbe5e40d28006e45dbf21a0d214ebb12502b6e603877bc8376c75f462dc991312c0dcba6c94aa070b1347511016d5e9eae72cc4050c03508a00c604a03211906b995351ef4f4b2c12dff3b0c6434770aaabbbb0fa297df686d19e4cf554133a4b59c322bbd8949541c5f3ec8e6fe888c59498b8474e088e8357dee4eec67d991c371837c6084ed9438170b77f76f8ba79ceec6adb9b253638f17b60cbe48a24ae19671183573294b1d8592be88ee4caa876b7058da5b083db687ff4a5052f123c2b4742810c17ea391b68b941e0c7a57f7a2da39542bdcc96e40dac6a1986747985e908be5e8347633fb47eed28a61d1f257197664bd4223a508cbb605069abf9494aff6e956552fa42fff6adee9fc05a0b00015fbb903b9b1b2329dab477d45ffce75ab23dc2ec80778a9c5b7a0ac5dfcdd415f59fab2e6736e59a412b8054cd5df9c7488bf352377f86af574c1d0e8f712b49d67f8594305d08d0160a18bcfd8956388ede37fe53507952604166904ef5f0c9bbfbe09173d075888a991974ab683a9c3d3fa36c50c4522a0eafab6cbb552f377e33e2df43a62d7ceba0be73e67d1626d9ad58038b2f6e4932d1c69aa06cb04b1645845252a330a0623a1489871880e7aae1e9aff484fb3ee597d4174ac02d6ee890c4f33f6acbe3a08d1b4c652ac718c1bac0078bce4b9b9fd77bbd74a6eddedf526cee62d7a294b28f6d8309bf95740d0b7af5d81bce5d0e56201dcf735f8121fab4d99b2f5b25b15f3d3a5c8a2160dc3ee4ad7e8c050e46ff3d883deba0032b30c7440cdbcdaec3e20cf41e64ba07c221ee624587cb0eedc4c01ca2a9509ae85a551726fe4520dadb083cfe62b5185021ad0aeac04fa77c92d599599a3a2b94f97ce7505fa20b68ffc82711e6d162304a555f172b5d9d7ad6975f3894299abf815f78fff05b45f875b591474800cdb89ba6e7d82ff4b4f5e395daa80814490d8c06041303006da9f8ac512ce6ad2a919dee0e158bc44f4cfc5a073411183d79d12bf79e5d96b049696e4adb68a37f22bfff294dc79f5fd2518a8c55f032b85af8322043ee72f22fa93043ebfebfd11aaad7509a90bfd16a59db61c5339738a10ea62c2f234b804847450fc5c7754d851351059acc19c13a8007473492398ae5f19a0b4fc0b37ed1e212900bc585b9d5e199cb5350d0d17a0409c69c388caf8b2de05fc3597f5d51ff52bf827f041a5ed074d3741b01ad1ab86439974d6dc578f41c972478c27da37b454e95a4ade76c6d47a52cb0b939446865a4717417b40872caf6427369d6bcb3129463e582e8785b0c55165a7086c53af6ca226b9f4ebed628a286d3fabdc943268105a01946661c7c5f8b46200332e5cae00d2e9ee64c4263e874af414ec9534984f99f3fb783b688ac2df151a194ba73528368afdba152db871d96031eb81a5cd8746b402b88d04c2861a9093542f37c36fb2fde9d3f98d6a0cab195ca240c96d79bd37017d4bc52e7e6622588b6f855e347f1f48887b40a1afe3737284d59a29d337583e1f20ce8f36c7ba06e1c48de9417b73f9ad4bfb6683872d5ae5eddad85870007361b1d33d3041822cee8b09e0402f589b4a24706a31609f3de5bc4c10c999ce02dad5295a48389de00ddf6d3abfa0f046c9926c1d107f3260f04946b84ea62890d0d853a44d2f1a12c15492c5c9372fef98dd7784e804be062112645391db63121eaf773d416faafe8b21db0ab5cc5ed619d2062a73deef808e3e6637b3358ca8dade3d84885fff8162790b75c51a525d5dfd696e6c861c63ec2b3256ef2807ff4ef7ed45b1a0379255a5c487cd8e1314094429bbc668be5b7181d6054f7b247a0e245c671cdff62e31cadddb70721e95f28973db963446747005f508f6599415d887c7adc9aa2abd71c3b556bb1013192480ce66785cec69c147971a7219a9348f03566552f35079f5256152067d81ddb8fdacf8333db7dc4af97e6ffdd25476032bb98c93ec128d0680d220cb88bce5569c7f893d19251be0692932a4e9e9e07bff22a33d7c154d53f3a0d185bfa242fa960968ba7300b4f9215b963a57e8a61d58b3c6d7ed1f1fe58208a108338556d76efeadc5b63f64535c9233867fa083abdb2952e74a5e890e3854c08ceb3dcd11bb50d45fd508ea9ef4d69975a8b40df63163aa53db5b9a66b1ca53c0f930ae8a8f0c5bbc607136a785531aeccf9975d0ccc90c55b175393a70f0e499bc0e76323bee4ea0cb14d3d41160c96b790e302a90a7c41dfb0b0a955d8d2d9f05eb389af035488a60de059678454055dfe60cbbefbd6323231621ea5f3e982f740bd4eaae81fee17901d3aba984f0bbb5e3d8b8cd7d0c60d789d0e5d31ee11cb3922202f2483ed50519b958837a11bc82f8d3addba03354fd6731d86ed38ba47e56780c953cb64e9fc00da128d1e168f58dfb4e52904bad616911c18a95a842b2a976bc5f1e00616d079d5ca5adf0cdbcc82b23f4f10faed567891ee1c0d5c5c738b3205c8d9466d54968c1aa70e30a0eb54e00969b2c6e67ef9032d0611c8c944bc81acfb80401bf09661552c275f67eddb20c0f82f416857a177952c966d9d5b1867a5444a3be9e2e4aaad30464457b5d52831ddf4c802b8134c7a438b443dfeec3141e12a830cfd8dde7adcb1be3bfe6f2ab719f5e0d01f84892d177cb6ca789e5a994bac0b948dc9b33c3a22cc3440262750b814f0173bd2a0eb9413f5e6ea448f951c948c1ff555332bdf25f69ebed47b60a814a01e313e6ab4839341241864b1beaa3bc29f498f495add445ec5d8db0aefca2befa503792aa7efdfa96e1fd73f4ab895167c57023ab4c0e9bf3b4f2f09766e5d0160bfc24c651ec6facea64932e9c9971943b9ef7c013159535dbece69cd06d300a00f87505a97240c9e1d902b8b906cd146c25542edc8bb3a0b2b30b87004496f982117754ddae617a26af8d45b25fc4d099216cb477d33d2e898facee2587e997a3e1da776844a76a0bd50d377b566fa35ba6dec614030d01f687461e884023d375dbafd9d9ed7974296db1a4739b282c89fcd67d5bd119d8692a79329d1867bed6f019d550a1cc68d7ed33b69106fa7a260fa6ad21d0af53a621d698789543c954dac90bcefeefc785f20a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第六章-数理统计的基本概念</title>
    <url>/2021/12/02/ProbabilityAndStatistics6/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>总体<ul>
<li>研究对象某个数量指标（随机变量）的全体</li>
<li><strong>总体的分布</strong>即该随机变量的分布</li>
</ul>
</li>
<li>简单随机样本<ul>
<li><strong>独立同分布</strong>（同总体的分布）的随机变量 </li>
</ul>
</li>
<li>样本值<ul>
<li>样本的观测数值</li>
</ul>
</li>
<li>统计量<ul>
<li>简单随机样本的函数</li>
<li><strong>随机变量</strong>的函数</li>
</ul>
</li>
<li>抽样分布<ul>
<li>统计量的分布</li>
</ul>
</li>
<li>统计值<ul>
<li>统计量的观测数值</li>
</ul>
</li>
<li>分布的上$\alpha$分位点<ul>
<li>该分布的随机变量大于此分位点的概率是$\alpha$</li>
</ul>
</li>
</ul>
<h2 id="概率论和数理统计的宏观理解"><a href="#概率论和数理统计的宏观理解" class="headerlink" title="概率论和数理统计的宏观理解"></a>概率论和数理统计的宏观理解</h2><p><em>本节不是严格的理论，仅提供各个概念的大致理解，便于记忆繁杂的内容</em></p>
<ul>
<li>概率论<ul>
<li>核心问题<ul>
<li>求总体的分布（随机变量的分布），进而求数字特征（反映总体分布特征的数字）</li>
</ul>
</li>
<li>核心步骤<ul>
<li>定义法计算总体的分布，定义法求数字特征</li>
</ul>
</li>
</ul>
</li>
<li>数理统计<ul>
<li>核心问题<ul>
<li>已知样本值，通过各种方法，对总体的参数进行估计（参数估计），对总体的参数满足的性质进行验证（假设检验）</li>
</ul>
</li>
<li>矩估计的原理<ul>
<li>用样本统计值（数字）估计总体的数字特征（数字），从而得到总体的分布</li>
</ul>
</li>
<li>极大似然估计<ul>
<li>让样本的联合密度函数在样本值处取最大，从而估计出总体的参数</li>
</ul>
</li>
<li>置信区间的理解（置信度给定）<ul>
<li><strong>某个数字落在该数字的置信区间的概率，等于置信度</strong></li>
<li>统计值和总体参数有各自的置信区间，但是两者和置信区间的位置关系是等价对应的</li>
</ul>
</li>
<li>区间估计的原理<ul>
<li>首先用统计量的分布（带总体参数），求出统计值的置信区间（带总体参数）</li>
<li>令统计值落在统计值的置信区间内，求出总体参数的置信区间（估计区间）</li>
</ul>
</li>
<li>假设检验的原理<ul>
<li>在假设成立的基础上，构造统计量，计算置信区间（估计区间）</li>
<li>根据置信区间，得到拒绝域（实际处理时一般跳过置信区间直接计算拒绝域）</li>
<li>统计值大概率落在统计量的置信区间，小概率落在统计量的拒绝域</li>
<li>小概率事件发生，拒绝原假设，否则接受原假设</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="常用统计量"><a href="#常用统计量" class="headerlink" title="常用统计量"></a>常用统计量</h2><ul>
<li>样本均值<ul>
<li>$\overline{X}=\frac{1}{n}\sum\limits_{i=1}^{n}X_i$</li>
</ul>
</li>
<li>样本方差<ul>
<li>$S^2=\frac{1}{n-1}\sum\limits_{i=1}^n(X_i-\overline{X})^2=\frac{1}{n-1}(\sum\limits_{i=1}^nX_i^2-n\overline{X}^2)$</li>
</ul>
</li>
<li>样本标准差<ul>
<li>$S=\sqrt{\frac{1}{n-1}\sum\limits_{i=1}^n(X_i-\overline{X})^2}$</li>
</ul>
</li>
<li>样本$k$阶原点矩<ul>
<li>$A_k=\frac{1}{n}\sum\limits_{i=1}^nX_i^k,k=1,2$</li>
<li>$A_1=\overline{X}$</li>
</ul>
</li>
<li>样本$k$阶中心矩<ul>
<li>$B_k=\frac{1}{n}\sum\limits_{i=1}^n(X_i-\overline{X})^k,k=1,2$</li>
<li>$B_2=\frac{n-1}{n}S^2$</li>
</ul>
</li>
<li>第$k$顺序统计量<ul>
<li>指的是独立同分布样本$X_1,X_2,\cdots,X_n$中第$k$大的样本$X_{(k)}$</li>
<li>$X_{(1)}=\min\{X_1,X_2,\cdots,X_n\},X_{(n)}=\max\{X_1,X_2,\cdots,X_n\},$</li>
</ul>
</li>
</ul>
<h2 id="统计量的数字特征"><a href="#统计量的数字特征" class="headerlink" title="统计量的数字特征"></a>统计量的数字特征</h2><p><em>一般用的总体的数字特征表示</em></p>
<ul>
<li>$E(\overline{X})=E(X)$</li>
<li>$D(\overline{X})=\frac{D(X)}{n}$</li>
<li>$E(S^2)=D(X)$</li>
<li>$A_k\stackrel{P}\longrightarrow E(X^k)$<ul>
<li>本条指统计量依概率收敛域总体的某个数字特征</li>
</ul>
</li>
</ul>
<h2 id="常见抽样分布"><a href="#常见抽样分布" class="headerlink" title="常见抽样分布"></a>常见抽样分布</h2><p><em>即统计量的分布</em></p>
<h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><ul>
<li>定义和性质<ul>
<li>第二章介绍过</li>
</ul>
</li>
<li>标准正态分布的上$\alpha$分位点<ul>
<li>$\mu_{\alpha}$</li>
</ul>
</li>
</ul>
<h3 id="卡方分布"><a href="#卡方分布" class="headerlink" title="卡方分布"></a>卡方分布</h3><ul>
<li>定义<ul>
<li>$X_i\stackrel{i.i.d}\sim N(0,1)\Rightarrow X_1^2+\cdots+X_n^2\sim \chi^2(n)$</li>
<li>$n$为卡方分布的自由度</li>
</ul>
</li>
<li>卡方分布的上$\alpha$分位点<ul>
<li>$\chi^2_\alpha(n)$</li>
</ul>
</li>
<li>性质<ul>
<li>$X_1\sim \chi^2(n_1),X_2\sim \chi^2(n_2)$且两者独立，则$X_1+X_2\sim \chi^2(n_1+n_2)$</li>
<li>$X\sim \chi^2(n)\Rightarrow E(X)=n,D(X)=2n$</li>
</ul>
</li>
</ul>
<h3 id="学生分布"><a href="#学生分布" class="headerlink" title="学生分布"></a>学生分布</h3><ul>
<li>定义<ul>
<li>$X\sim N(0,1),Y\sim \chi^2(n)$且两者独立，则$T=\frac{X}{\sqrt{\frac{Y}{n}}}\sim t(n)$</li>
<li>$n$是学生分布的自由度</li>
</ul>
</li>
<li>学生分布的上$\alpha$分位点<ul>
<li>$t_\alpha(n)$</li>
</ul>
</li>
<li>性质<ul>
<li>密度函数为偶函数<ul>
<li>$t_\alpha(n)=- t_{1-\alpha}(n)$</li>
<li>$E(T)=0$</li>
</ul>
</li>
<li>$n$很大时，$T$近似是$N(0,1)$<ul>
<li>利用$\frac{Y}{n}\stackrel{P}\longrightarrow E(X^2)=E(X)^2+D(X)=1+0$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="F分布"><a href="#F分布" class="headerlink" title="F分布"></a>F分布</h3><ul>
<li>定义<ul>
<li>$X\sim \chi^2(n_1),Y\sim \chi^2(n_2)$且两者独立，则$F=\frac{\frac{X}{n_1}}{\frac{Y}{n_2}}\sim F(n_1,n_2)$</li>
<li>$n_1,n_2$是$F$分布第一自由度和第二自由度</li>
</ul>
</li>
<li>$F$分布的上$\alpha$分位点<ul>
<li>$F_\alpha(n1,n_2)$</li>
</ul>
</li>
<li>性质<ul>
<li>$\frac{1}{F}\sim F(n_2,n_1)$</li>
<li>$F_\alpha(n_1,n_2)=\frac{1}{F_{1-\alpha}(n_2,n_1)}$</li>
<li>$T\sim t(n)\Rightarrow T^2\sim F(1,n)$</li>
</ul>
</li>
</ul>
<h2 id="正态总体的抽样分布"><a href="#正态总体的抽样分布" class="headerlink" title="正态总体的抽样分布"></a>正态总体的抽样分布</h2><p><em>即总体满足标准正态分布时，各统计量满足的分布</em></p>
<h3 id="一个正态总体"><a href="#一个正态总体" class="headerlink" title="一个正态总体"></a>一个正态总体</h3><p>已知总体$X$满足$X\sim N(\mu,\sigma^2)$，则</p>
<ul>
<li>样本均值$\overline{X}$和样本方差$S^2$独立</li>
<li>统计量$U=\frac{\overline{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$<ul>
<li>分布<ul>
<li>$U\sim N(0,1)$</li>
</ul>
</li>
<li>原理<ul>
<li>$\overline{X}\sim N(\mu,\frac{\sigma^2}{n})$</li>
<li>正态分布的标准化</li>
</ul>
</li>
</ul>
</li>
<li>统计量$\chi_n^2=\sum\limits_{i=1}^n(\frac{X_i-\mu}{\sigma})^2$<ul>
<li>分布<ul>
<li>$\chi_n^2\sim \chi^2(n)$</li>
</ul>
</li>
<li>原理<ul>
<li>$\frac{X_i-\mu}{\sigma}\sim N(0,1)$</li>
<li>卡方分布的定义</li>
</ul>
</li>
</ul>
</li>
<li>统计量$\chi_{n-1}^2=\frac{(n-1)S^2}{\sigma^2}=\sum\limits_{i=1}^n(\frac{X_i-\overline{X}}{\sigma})^2$<ul>
<li>分布<ul>
<li>$\chi_{n-1}^2\sim \chi^2(n-1)$</li>
</ul>
</li>
<li>原理<ul>
<li>$\chi_{n-1}^2$比$\chi_{n}^2$自由度少1</li>
</ul>
</li>
</ul>
</li>
<li>统计量$T=\frac{\overline{X}-\mu}{\frac{S}{\sqrt{n}}}$<ul>
<li>分布<ul>
<li>$T\sim t(n-1)$</li>
</ul>
</li>
<li>原理<ul>
<li>$T=\frac{U}{\sqrt{\frac{\chi_{n-1}^2}{n-1}}}$</li>
<li>$t$分布的定义</li>
</ul>
</li>
</ul>
</li>
<li>统计量$F=\frac{n(\overline{X}-\mu)^2}{S^2}$<ul>
<li>分布<ul>
<li>$F\sim F(1,n-1)$</li>
</ul>
</li>
<li>原理<ul>
<li>$F=T^2$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="两个正态总体"><a href="#两个正态总体" class="headerlink" title="两个正态总体"></a>两个正态总体</h3><p>已知总体$X$满足$X\sim N(\mu_1,\sigma_1^2)$，总体$Y$满足$Y\sim N(\mu_2,\sigma_2^2)$</p>
<ul>
<li>$\overline{X},\overline{Y},S_1^2,S_2^2$相互独立</li>
<li>统计量$U=\frac{(\overline{X}-\overline{Y})-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}$<ul>
<li>分布<ul>
<li>$U\sim N(0,1)$</li>
</ul>
</li>
<li>原理<ul>
<li>$\overline{X}-\overline{Y}\sim N(\mu_1-\mu_2,\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2})$</li>
<li>正态分布的标准化</li>
</ul>
</li>
</ul>
</li>
<li>统计量$\chi^2=\frac{(n_1-1)S_1^2}{\sigma_1}+\frac{(n_2-1)S_2^2}{\sigma_2}$<ul>
<li>分布<ul>
<li>$\chi^2\sim \chi(n_1+n_2-2)$</li>
</ul>
</li>
<li>原理<ul>
<li>$\frac{(n_1-1)S_1^2}{\sigma_1}\sim \chi^2(n_1-1),\frac{(n_2-1)S_2^2}{\sigma_2}\sim \chi^2(n_2-1)$</li>
<li>卡方分布的性质</li>
</ul>
</li>
</ul>
</li>
<li>当$\sigma_1=\sigma_2=\sigma$，统计量$T=\frac{U}{\sqrt{\frac{\chi^2}{n_1+n_2-2}}}$<ul>
<li>分布<ul>
<li>$T\sim t(n_1+n_2-2)$</li>
</ul>
</li>
<li>原理<ul>
<li>$t$分布的定义</li>
</ul>
</li>
</ul>
</li>
<li>统计量$F=\frac{\frac{S_1^2}{\sigma_1^2}}{\frac{S_2^2}{\sigma_2^2}}$<ul>
<li>分布<ul>
<li>$F\sim F(n_1-1,n_2-1)$</li>
</ul>
</li>
<li>原理<ul>
<li>$\frac{(n_1-1)S_1^2}{\sigma_1}\sim \chi^2(n_1-1),\frac{(n_2-1)S_2^2}{\sigma_2}\sim \chi^2(n_2-1)$</li>
<li>$F$分布的定义</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 抽象算法设计与分析</title>
    <url>/2021/03/19/algorithms1-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="eef8019f0dc196979e4035df6eaa6c5aab78c4c34e20b82ea1c31b0287dbb6f4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-大数定律和中心极限定理</title>
    <url>/2021/11/29/ProbabilityAndStatistics5/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="切比雪夫不等式"><a href="#切比雪夫不等式" class="headerlink" title="切比雪夫不等式"></a>切比雪夫不等式</h2><ul>
<li>$P\{|X-E(X)|\geq \epsilon\}\leq \frac{D(X)}{\epsilon^2}$</li>
<li>记忆：<strong>离谱的概率不大</strong></li>
</ul>
<h2 id="依概率收敛"><a href="#依概率收敛" class="headerlink" title="依概率收敛"></a>依概率收敛</h2><ul>
<li>对任意$\epsilon$，有$\lim\limits_{n\rightarrow \infty}P\{|X_n-A|&lt;\epsilon\}=1$，则$X_n\stackrel{P}\longrightarrow\ A$ </li>
<li>记忆：类似于极限的定义</li>
</ul>
<h2 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h2><h3 id="核心结论"><a href="#核心结论" class="headerlink" title="核心结论"></a>核心结论</h3><ul>
<li>$\frac{1}{n}\sum\limits_{i=1}^n X_i\stackrel{P}\longrightarrow E(\frac{1}{n}\sum\limits_{i=1}^n X_i)$</li>
<li>记忆：随机变量的均值 <strong>依概率收敛到</strong> 均值的期望（一个数值）<ul>
<li>体现均值的稳定性，稳定到某个数值</li>
</ul>
</li>
</ul>
<h3 id="各版本的表述"><a href="#各版本的表述" class="headerlink" title="各版本的表述"></a>各版本的表述</h3><p>随机变量序列的各随机变量需要<strong>满足一定条件</strong>如下</p>
<ul>
<li>切比雪夫大数定律<ul>
<li>条件：相互独立、方差一致有上界</li>
<li>注：一致有上界是数学分析的内容，了解即可</li>
</ul>
</li>
<li>伯努利大数定律<ul>
<li>条件：互相独立的0-1分布</li>
<li>注：其和是满足伯努利分布的随机变量</li>
</ul>
</li>
<li>辛钦大数定律<ul>
<li>条件：独立同分布、期望存在</li>
<li>注：常用形式</li>
</ul>
</li>
</ul>
<h2 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h2><h2 id="核心结论-1"><a href="#核心结论-1" class="headerlink" title="核心结论"></a>核心结论</h2><ul>
<li>$X_1,X_2,\cdots,X_n$独立同分布且期望$\mu$和方差$\sigma^2$存在<ul>
<li>则$n\rightarrow \infty$时，$\sum\limits_{i=1}^nX_i \sim N(n\mu,n\sigma^2)$</li>
<li>即$\lim\limits_{n\rightarrow \infty}P\{\frac{\sum\limits_{i=1}^nX_i-n\mu}{\sqrt{n}\sigma}\leq x\}=\Phi(x)$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论与数理统计</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 抽象算法设计与分析</title>
    <url>/2021/01/31/algorithms1/</url>
    <content><![CDATA[<h2 id="RAM模型的引入"><a href="#RAM模型的引入" class="headerlink" title="RAM模型的引入"></a>RAM模型的引入</h2><h3 id="计算的基本概念"><a href="#计算的基本概念" class="headerlink" title="计算的基本概念"></a>计算的基本概念</h3><ul>
<li>计算的关键特征：基于有限种类操作的灵活组合完成复杂的计算任务</li>
<li>算法的宏观定义：一组计算机操作的序列，遵循算法的指示，计算机对任意合法输入执行一系列操作，并给出正确结果。</li>
</ul>
<h3 id="计算模型的基本概念"><a href="#计算模型的基本概念" class="headerlink" title="计算模型的基本概念"></a>计算模型的基本概念</h3><ul>
<li>算法掌握的一种抽象原则，与编程语言和机器无关，假设在抽象机器上完成算法设计和分析。</li>
<li>在不同具体机器上实例化算法时，虽然底层提供的基本操作不同，但是总是常数倍的关系，本质相同。</li>
<li>上述的抽象机器就是计算模型，是抽象算法设计与分析的基础。图灵机是描述能力很强的计算模型，对于算法设计分析的基础知识来说，RAM模型更简单易用。</li>
</ul>
<h3 id="RAM模型-Random-Access-Machine"><a href="#RAM模型-Random-Access-Machine" class="headerlink" title="RAM模型(Random Access Machine)"></a>RAM模型(Random Access Machine)</h3><ul>
<li>组成：输入纸带、输出纸带、存储寄存器、程序指令、位置计数器。</li>
<li>指令的分类：简单操作、复杂操作、存储访问</li>
<li>单位代价RAM和对数代价RAM：前者不管操作数多大都认为单位时间完成，后者认为操作代价和比特数成正比。未说明的情况都是单位代价RAM，特定问题（如背包问题）会显示指出对数代价RAM。</li>
</ul>
<h3 id="计算模型的选择：易用性与精确性"><a href="#计算模型的选择：易用性与精确性" class="headerlink" title="计算模型的选择：易用性与精确性"></a>计算模型的选择：易用性与精确性</h3><ul>
<li>RAM模型：具有易用性，不会给出原则错误，但细节不精确。</li>
<li>外部存储模型：对不同存储介质的不同访问代价精细建模，不像RAM模型认为存储空间是无穷的。</li>
<li>PRAM（Parallel Random Access Machine）模型：刻画并行计算</li>
</ul>
<p>有了RAM模型，我们清楚了需要完成的计算任务（<strong>算法问题</strong>），论证需要何种顺序执行哪些操作才能完成指定任务（<strong>算法设计</strong>），还可以统计完成任务需要的开销（<strong>算法分析</strong>）。</p>
<h2 id="抽象算法设计"><a href="#抽象算法设计" class="headerlink" title="抽象算法设计"></a>抽象算法设计</h2><h3 id="算法问题规约"><a href="#算法问题规约" class="headerlink" title="算法问题规约"></a>算法问题规约</h3><ul>
<li>输入：明确算法的所有合法输入</li>
<li>输出：明确规定对于每个合法输入，相应的输出是什么</li>
</ul>
<h3 id="算法正确性证明：数学归纳法"><a href="#算法正确性证明：数学归纳法" class="headerlink" title="算法正确性证明：数学归纳法"></a>算法正确性证明：数学归纳法</h3><p>要证明算法正确性，就是证明对于每个合法输入，算法的输出都满足规约的要求。其中的难点往往是合法的输入是无穷的，无法测试穷举来证明正确性（测试只能证明算法是错的）。证明的手段是数学归纳法。</p>
<p><strong>定义 (弱数学归纳法)</strong> 假设P是一个定义在正整数集合N上的命题。如果：</p>
<ul>
<li>$P(1)$为TRUE。</li>
<li>$\forall k \in N$, $P(k) \to P(k+1)$。<br>则对所有自然数$n$,$P(n)$为TRUE。</li>
</ul>
<p><strong>定义 (强数学归纳法)</strong> 假设P是一个定义在正整数集合N上的命题。如果：</p>
<ul>
<li>$P(1)$为TRUE。</li>
<li>$\forall k \in N$, $P(1)\wedge P(2)\wedge…\wedge P(k) \to P(k+1)$。<br>则对所有自然数$n$, $P(n)$为TRUE。</li>
</ul>
<p><strong>定义(良序原理)</strong> 任意非空正整数集合必然有最小元素。</p>
<p>数学归纳法和良序原理本质是等价的。在各自的场景下更加便捷。</p>
<h2 id="抽象算法分析"><a href="#抽象算法分析" class="headerlink" title="抽象算法分析"></a>抽象算法分析</h2><p>正确设计算法后，下一步就是分析算法的性能。</p>
<h3 id="抽象算法的性能指标"><a href="#抽象算法的性能指标" class="headerlink" title="抽象算法的性能指标"></a>抽象算法的性能指标</h3><ul>
<li>时间复杂度：在RAM模型上执行简单操作的个数, 可以精炼为关键操作的个数</li>
<li>空间复杂度：在RAM模型中需要的寄存器的个数</li>
</ul>
<h3 id="最坏情况时间复杂度分析"><a href="#最坏情况时间复杂度分析" class="headerlink" title="最坏情况时间复杂度分析"></a>最坏情况时间复杂度分析</h3><p>对于不同的输入，时间代价不同。给定输入规模，最坏的输入对应最高的时间代价。假设规模为n, 则最坏情况时间复杂度定义为$W(n)=\max\limits_{I \in D_n}f(I)$。最坏情况空间复杂度的定义类似。</p>
<h3 id="平均情况时间复杂度分析"><a href="#平均情况时间复杂度分析" class="headerlink" title="平均情况时间复杂度分析"></a>平均情况时间复杂度分析</h3><p>假设输入服从一个分布，时间复杂度看作一个随机变量，它的期望值就是平均情况时间复杂度。定义为：$A(n)=\sum\limits_{I \in D_n}Pr(I)\cdot f(I)$</p>
<h3 id="期望情况时间复杂度分析"><a href="#期望情况时间复杂度分析" class="headerlink" title="期望情况时间复杂度分析"></a>期望情况时间复杂度分析</h3><p>最坏输入情况下的期望时间复杂度，主要针对随机算法的随机数求期望。</p>
<h3 id="平摊时间复杂度分析"><a href="#平摊时间复杂度分析" class="headerlink" title="平摊时间复杂度分析"></a>平摊时间复杂度分析</h3><p>详见第18章的笔记，大概理解就是<strong>用平摊分析法计算出的平均情况时间复杂度。</strong></p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 图优化问题的贪心求解</title>
    <url>/2021/06/09/algorithms10-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="3cd3c085f1a89e7789d14abd96379bb2e66a508b025bfbeeea4e9ea56516a176">757ff964fcfd9532ba69fc6fadfc1252eb09ce1986feccadb66dcf2cef6bec7f05efe7550479a8e4dcd7ab0d791962d573194422f22cad59d63075a5c4db59aeb8b9fa033e9f62ae43aa71b435a3bb5a54f39560f1f7919c61bfa0c09c1748dd00128a03803a57b3d1ee8b9fa8f663ef01e13f31c2f1b094f3f6f838537eb224644c4584169de6c1d298cc9d2763987b1b8902a382f5c1da92449c32d44804db2cf005f7c023361a27866973396c7d8b2120d0733e61738cfa9f3b190ce63974f96ac1dddc690f921ac9c1943816d5bdf2c512e0855d2478985295997333a0d0a997b6609e975b4330bdf9694460dbd1a345b582b8c7357a7688c9e6fc2887f5b3291c69c6601b84ba844fbc9e47223d8007a05a99b2e40060cb054ead6b173d03dad5dc83a56953bad842feeca1795d5902a22d75ccf837fedf83958b0dc6c171d874477f6c5c3c0b20873ac5406eab11e16ec3a7fa38dbadef73273b674ceb6bc52bb9c1bf8d816a677bc991a879fb0f123435df9f00a87e81d2acee5bdd9a175b931ccf2b001b7cb5769af681c1ad88b4596ed7a56c5e7aacff4294d82e0e0a2fbc792a1392cc67e541707a32d0bd7860763c64081d3e4435fb02fbd8d39f370efcdf3d672ece1c929eac3188012c06444da234049d39cd7930ac301b93524cd19fd5aca233b3f3e564257c7f6ca41fec167be79eef08a3b70354ff0d7ff854e2bb3583f8b26a0b0865cd7e5ef771d19fe3226ba6f244b7f4c217e105833d76deb11d6f56e8b1b36f2c9b479d6dbb1a957ba48a9ceeba230f210416b9344f2d40b57fa73ac9d3e9e9ec651ec6be59d42deba5b8f8386a3c0d209cd0a7902f67d5356a1e94d0168ec049959e9ca777f9d8e2db2f111f75624c91e29497afe1c4fa64db1a1cde50430f60ef02b878c92bce25cf07de5cd94f9d0c841004077a70a5ebbc5048b12b377fa57726e7e6e145798baf061ccc02e04e7e57f316b4933d22e12ad7477fed0a520d6554bb35df348a08f1704bed72bb7b8c3a190b8f0a88b23392d0a27409697634de0f90f8beb259e6c1d7bf8b892847dd2d3255961cbe7664164bb197c09a84e2a31e4f21ec822f1e22128a4309425a1d105a88fb8ef5d4d39e9ea9ed62ddeabd078881b86ec10af5bf48f9b49a207f3b85f1de0854040189a1ebc495c959cf73fa81712c7fc260adc3f75a27e554dc1a401e4506baa174505b737acd77d70649c6564d30b3fd00d76a6de041f70f66b8c2bea6f244eb8286292734c1bd6c96c51f377d9bc4a9ee0a0e972c87a9e12fec210b0ec46d3507f168298a347cb891b66860a8e77b30e42b35096327027b0e44f5c0bba2c7f0c8a5d8f2cf8ce9fd8e2d91f42dbac25df530b8f3b0cb3e1f2b7e5ef05316a9af6a27716e7fda7d89ab55875d58d8825d1dee2e0811b193d44cf8a9026ba5b26c102dc9df1d83adf66324cb6283abef29bee90c697d9181e0879ee249915460c625357144181596b144daea1c96912cd31757975a98b459d0b030817da36b6c1efb9e3ca8b35e4c0279c67a6d07568c9f88e0f37f44aefd4afb9cdd7f31746d365075b7b024303aa13dffd01506544819c43cd1f2a92ff4284cb7a02fb7b54494bbac5946fb537cc298ebb690a9c283506ff2f64e206b7aa3746141446f924fff610f19018b3ec811202642e194184dcab030489ee614b01ea9260020a4607f2c38bf3399e028124a3af69130a4a5b308f350ef991b35b34060ad03d0f232aef3270cda106a0d97a20ccf520c548a9018b0113e5e88c2e03a3be425a73bc60a6c61afbdac93be8e2edd6383973efa1408540e73e13784f1ed3b0119a2d5b7e218218c742a746651f9c25cb3fc89e69616941c686ab92d6cca696f2921d6c042a3cd9a531a58416f9644f23e22a04d6015795d8cfd5ca70096d18b347f49c99f6070cc2a6b151265c4ddaf209c7597f23946606d155fe5231827434e2f8696a42f739f2837f61415c53828af571e4003c7622332d77eb29296e18190db3266e6c438bb7c028f5227a1797efcb56a1ca33a1619b1c6584b108dd1421e92998b5c23f03347e72a01796005c274a209978bdc5716734e3dc5ed8c9d5d8126ddd9f5d533cfb13082f7bb9c1e0f6108eb7e1492be7ab34b9bff6673bc94c5329c9c761105f35efd4f0a84e2bc1ec9444eafdaf84b8663b28336af3c277ae863a3e6e80a925c0c0a268c369a16e9a62190337a280fd7e635d813d3a007fadc54c681209d8d9ef1994749db3800467fceda9597622bac04ec294fc804cd913ad75536f8b7b4ebe47ad250e77233d2e578257cea1e0f89d7c461fff482d5b557e863333a4301178f235852f3ce259d5bbfb64cf715f6287f9b4b08c76460d283086a751c269e893e1f77ad3ea17088f0a3086704a70cd5eedd768571df0aa84e9cd87e4fd6d9f95e45963497037b1fa6f48a6a6da46d97490d11ec9b7be75b8560cbd01a3a3f23cf1ada1b11ca8eb5c4d37c43f487acf06111ad0db0b4b48310e95279b7cf023a182cf55a9fd622728e20f189867c4f65313f63901dce5f2c6b4c886ccd1ab64c72077fa6b2be74a359535813215559c6adc274424a171ff7786544fe8f7c2fc908e866c933e0a38705eb61e5036d170e943a44cf6347291c2cda6cc94ab8355eea135dc21d015e81f9c7f66850e145b4375ff332e09825733f5a04efb448268cc229fb7a3c7b9d126e0a1e2259f5a64e2e001e979d48bb22b8d09e1f4ed19e5df6afc96c03dea4e1aa27338ef2c673d865a5a026e5855e88a8a0e873db55ba850940023d48a86a0843caa88951ee87dab6c4585d61a07e4f0e957d71cd78f3020e70a62ef7f40536bca14a387eade4b57c551502219e64842f237b7b6ed3d0d31d3dc56d34e05c9f0ddb9d9e4af7c43e1f48c61d35951773fe72a6c636922ab8c2418dd7781e7736ccd545807bcb1c0d1aa3461a5db45055257e915dc374e82794941d5f5c49383838812a8f8bac44c878fd56c0c92a62cf54b1116e6f531b2d7bb8e22abee78dc2511787b9edb12e64b380a255d5537a57eee20b8cfb5e8d937685c7f30aff2a7c71eb888655a36677dc9fc6d38a3810a8e693c0e7cde5a71379dd47e3775e921b6687b0ad5e4643735a961430ec2fba5fc6e80000817e0fbec65b421dac80e225c413d4e10856642226dc79068eeb06a61d299009bb3331ff9ffbf645ead45c43044c8b061ca784472a853dc990e56bfb71d98db23c82bfaed9344d3902fa4c4d1fcfce953f0939e923bba8a89048e436f9f4996fb75846907b0d1459759ab8fc31081011ba46ebdfec46ad86f689e839865d00fdf12b9b981e0958e151f966734ab7b1ac1c655da25c86dc12224836c2792bcb89a04a834a87dec016831fcdeec955679f8f3eb0df9f11222f5bff292c31e03f8e597aac9473be271ca06baa82c8f1625127f36df1d3a795cab3fc8058a97caa96aa263f09cbed597f89ab5633a36187519fed93ff4ec15dbbdb6ef2daf863510488cfd82ea4abb87a7bae1aef4e3e857d80d5c9391974d0dade9034189a3a409c490d96e100eecd660ee46c98ce02b9923ae5484fb4c6f78935b885456f9aa123f53277ec00b333bb5de6d6591cd93fa2cdbc3367cfc2fab9bcae0214b11e7d66f22b7b69ab4c2ba2fbf554cb17a4e6f157952138b18fe1f158a710471210b12c608aa4f33238eb788e744e9239dd345bd91e6731e9707198fb2b3d42123d24fd7e8e697e782fdca8c8d3ca59a5b365a00df929cad9771cd8211fb6441bad0806d83860c4a274625de4ebf5b8fdec62b96845f3178bc971809462e608dece3024512d75d5ab87765062f50f1c42330b534a009bd8c5c702448ed0b27c2ca8b3a8e91aac5e7c8f14645ffc3577a8b61b8d4a9287bb7d64e7a3598bc12c9ba9a01d45b695df168d67255b8f7653354eea819f50884ba7ecd61dc82fc66607efe13478b1bb9e88a81ddc8e38a6bcf6b6769959027595ce8915741ef646c4d4f3e9360f97c85feeb97d5bd75930e2269b70b4c9a5728f0af1235c6d3f7cdbd032969a7ce7f955ffbe74ba4aa2848931c5a71ea02793fe1620103a079018d0c04d9c4ac8568acb7835923ce58efcd00ab483419bde47b8834c4068102fca7c2bb9ac8a520ac27ad0404a4a99837112975ee4d6031cd2d61081ae273275ddedb791486055d96623f6cc7125bfdf977c1bfb5534f8ae344a553de91f7effaf426ed2ecea94c300dd73c2f77a0377b43f47af764707692939c08041e479609bb1d6ab9572f5212ded6a4db0a30d91d4301cd4afb02845ee1e03a3edae3e8d1c204d683bd87b0b82b06649db775de6b9b57580efbd74aa881b28236800ff108635309ca8c9572d3e5419f23df4837f8ddf776fcf7567d747b726461fb5f729a35dc27383c4fa846adbbbd9d5a5875b70a6fdbf7c776bcb576ca4c031791e5c9341dd94b840036d5adfd7f7194013754fb68a2711be97a04bb4ebad9a3c7600a7cb9cfff535b79abf35b8f7c84ef499894ff8142bc754ea2abfcc6901bb7faab192fae9d36e357f2e0437fa82e8381e4fb5f83ab0a3960a9b4ed168a8c24d52cdfc7aea5f1de204fd723b3dd9b8b0ae196c87359f64ea09f98e1673cc055ebe9e4133006cd9df2d30d8068f362497819d3b5356d26bba4bfbc659486444ddd2638e65e71bdc60a11519c97d347457f9af94d14ae5dba31d5508fe116b4fcef4b4ac38f7d8ba6aa8162d3890371bef9c446174edbf6ce52a67e156137901759f5b63e8070156f7e6c5d51be9bc17b8840716b2e4fa036b9e2dd7408b8aa3fc1af6a104bc7eb84ac922ed2e4586116232b24606e88f39d7714783dad9f4b5eeefeeea084f375c8b0cef32208ce6f263ef7612d02708eadc2d3c0cd2c89deb83565fa1ae7d1a35f8c5e66961fa8fc54361c73be9340486739a35077cfa543e901ee4b73f3d96db9e6496dea925b724e00c933087178e7c65305d77c8c6d75347380d93428ecf20a33f88d2552200846ffcdf629674bd1333a80de3d96912d081319987d9d210a9459bbf07b96514b4a253456fc5c0ae2b6758440fc7a674269185011617bc4779612313e1f5550fb19b97a2be371034280ab6bc1295c1bbde2bc8f357b83d06b113827c6f01aa8eec897cd6e2992f35349936db043cc9c06cd89923acb94d857d41599a709fcd87e3238ee9dc97fd5eb8a22cfc78ba8f4062f10e87d177f147ae5d34fbe46c962b5df8022da63cf98474cace3fe4f695ec1780ca418f635e870f08c75154418c7a0c590097c8f1b7fdeace9b75dc3a01861bbcdee7d9871d9b54a909ba906442ecc46244b3c2d01d4a09d36ad0fa22b0826bffa63fec49bab8f18ed5909ef13d9bbc97c51911eb4ff5eb49f3733f3543fb675168d4a7576b3b1535d8517e870b01740f64f5b648ce1bbfd1be5824cc4c4ac3eca1577186fef14098931b51e8011cdc3d8149227fbb26abdcb579f5a96cc14c227f47853579acabbdd66868b612f3056dda5e4787c8f7cb10bb14e00bdbd11de47ca07996d33b2a08aa5fc048b27ffa249fe282bce551c2505dea66cd79a5d1f46e44d3fe6ec96257e33cab1d35b66ea3863582763853ef851fcedbd0d182fa5cce3b44405f4ed346f913c32bb4aae0ff0325a4357613007c45a800efb17fac0ed49e6676afcc2b413ffa6785fdfa17179a67844106deb600d8566c798565c94332eaf7e7679acc5e68e1ac1391fe5aa3b1689d918d7df4cf7cbecdfb8de7bc0798528233edde96be3f1a0c052df42e7d7b3965fa126618ef22b92cd545fba7ef3ae77bb7bd9a40736d7cb4cc4ce471461ab6cd76fb0bab660f4d88e2a884e0d5b5e43ead65af8f85a709a6692135f75a190fce883a168115e6bf68e76d7a8fd4c93d4e91a2ac0f48d1caec21912f5a25469d4534ed05d567c961915cd6bfe45daaa13d843bc96f5e323be7d93f3c68b4d57787ced77654f66a26af07fafd6aab9ae02460f4569722d36e0e892f4102599b41bfdb7eab486bdea84faccaba5305aaff382bde74cbd9ffed17345520d564ae556ec6fffbd078f33e8a5770187df70b92d7d76b26d3ceb4662138d09954275b4cfa12d919c171595baf43568ce872fd26f2b0b9ff3bb776ff6aa8dcd7c0a7c838cca64c107014df06bfbba7d82d7dbdbecc2e4b9f890de533fb57aa5dcd2e96b9971d07a659b97cf3bf2fa98ec5023d86020af229ef51361000910a1750d85fd35b56753336838fc84363db17e0a6c240b91d01775944b623cbccdbebb097aab306dc039340196c6d9294d3e0e8468ca2583e5f3072b1c91a3a4cd4176efcf994e675b5ca97798543b0b94ae310353ad1e27f8bb27939de7d552056c1050201561ad9f84ca0ea2808f7a5835e435660aea00865d3be141cbb918c4720df70b22f62f85dc7b8f6b96d77f025f80e992b0cc8dab151ff7daea4ddade94de7ef032969f048d2ceb6b6ba11e5c8fdb0104d2bda71b3dc4b169c7a3bb128113ea0515e845e38ff7486586e818680460dda5b21dd52cd57b481ef4df2af1a134ba938c43d1a441fcdec3099da7da3a0bb315a780366b81464b27faa5b4eb2da45c50a3048647be0cd0bc0a00cd98744d9b5a6713797321db32667f4b04d87fc14be6fad9a0f54fa7f5eac68478aabb5dc7883b791cdf23c2da6f726f9abac7ae89f9bcc80c03e3e5ddad36506dbb7b2166257889ffd281313e365f3ef8a56b9bd0c33ae625a95d1d119acc651500820b0dbc8dbbd617dc55658075b57790e9e2b761babbff10ac6cee57d2a2115f1de393f1e17ab3624848a4ddcbc1828a8d14e317e1f9dc85cfa0267eb1f91c67d248899704d5b45fad6def262aaed28cc44e021f518f8767bd576f6a21a571a180e709a35fe76e34ff2cbd214add0b48e1ff6168e26d67089113497562787ab4d0b4d117aa0627903f1d8eb686e4f74f9f7f57fdb17baeb7b8f0555c49ff7ed7862cd14bfcdc612040a1afaf598cb6a0868e8990203269327af4921f1d77261ef92f098dc71d661c84b7427e31276f79b534767672f25f85f02e28d89856ebf1fd7a3f4bcd71d93dd8812913818f1a7f59a18b70b7d15f28a94620b12d6b8882ef6510bc17f8ef2fcf28a1bbff877998748a24f53d0afc70239b482013abb7a3142fbae977503eb750a84359a641dc62987f4565b6877c4cbc66c0ae09e5c3b1267d29a2afa9a086d9dcd4e5955d35c7d27a94e9e9d7684f558042d14a4d2e9bdd72590fef0e847bfae37408184f994119b12e4358abe95529873b9519a5534d3396385d7de1ac5b0bdf2ca809ec03b384ff588a018cd0763ca0d113967398e9097d1ea01326c9e9879d53de0b33eaae5fbcb209bec42a34ad343fa6559ed70a6d09ecc2218ff1cce45bb594d05b0de90cfc1b29056fd9d6c6ca9a7f5870c0f64f350aaa7492be84426b50170114c15d2e96afb298de0fba156bfcdb10648d4709bd9f2359812c243c9f97c32173b911b1533f41aca1a9b29d6151e8f403f48ad04ee0f0e71f76f600d263865e1e0c9aae38d06c8d15d56eae7de0a1e997853eb618f56e49e55f36d87968777d3ef584ed8bbb58f73e6cef370674dfc4962b0451092982f08022b24915ed1ba8338c7c63ee2866d096d22979aa58a26bbd870c95ee7a253ab65daa90aae0ac3408952a6ccc7494a227f229d7bb9c9daa3115ff1cb8ae159ec98a0d82e7e096ea7a0d7401189a530253496e3933d6dfa7d6cb4a22c46c74396d66b380dd7a6676056b310142ed9cb440b8da4dc38d21ecdec58b9037713ca28259eedbfb88e246add2fb42a638bec0399445b49b59ea0dd4c0df3e349a7a4cd8a47a19b8ef8eb62b63617bd86073d0aa88156539dd1785c011c3441cb5dbd6309d55e752ad1c7ae18c19a0ea1ece0066d3f93c66b0347c42fa6f288166f0ef75482a59d4dfcbe0d7ec8d4bf4eac7a1af6cb381c7595514ccd698648a3ad60417529fce8db7db3bdc25168ff8b08d94b4b6dcce452da8263d297298c2f82c8fa6a77a37a845ce173055edf45b1a3eea0e8dc5b6c55dcd19a556d0a0e8cc47a56c9807b977deae3b7335ce3da8ec9bc263a76390677cc799b5f5e3a6ad171955f1d58a1f918dfcb01728155d781cfecb8728ae2018ab286b39608c551b49503f9edcf7265ef0be5a78c21be3578fc30c34306a48b5758cf6b7a3132b993778cc7691fcdfc3c4541508754af9d63066a41f727471b4692850a957d87bdba5dd1e477c8573ad7347e19e358f2246577f5d2ca9d4b6009df63e0ca856293ec00d7d96396b721b9399335f6b9b3d544b51906e87670ae834020d7612822eda7acc3d7408a8b1f8207935e6c55267c501e2d86e9b3c33d68ae4ab0dc0065a90fc9fcc72911c4ff0f29f3c4d4f920188a345074ce4e876333c318af93964a171e206d9a0e661a25983c2e400b43f1679d38a3213766085cd4ee7a4ef2ffffb3eb73d772feb232e6c1af0099cc8a2ee1a5aadf80e776c023edfc7582d1681c7d2e20911fa3f83ac3b3da3d8d0ccba2d471821cf4e79a6fc155f3008938bf29d85662c0f3610c4ce4d496ef1e48dd46d68478f693f5418453cf3a86fc5a8d6296875e462af5fc766f9a1fcf76fe42fdba4c7ed2bd33c80dcff93617f8118f6d294160d50545e0fcb0aaec60de09fe0cfcd42489aecee289d554053bacd132ec4b17c0f4a3eedce9891bbbfb195ee4beb11d43b142f2adfa548524f9d0608cf064864cf5ecd85256628b1b4f37ff693aee308c2f4930cf97b42ecd2a4055021ba902c219a5dd4e6e39bfbccd73cce7bc4ecd5aa10a7340b608836998b7141a5f79ee4c87b7d83216dae96c6b98b3d3f223fbe1b7a42a47ba828a86b71024c058c68b2289eb7e81253f4e9e9116edc6f907c6cb8f24d106bfb95385947bce6b0a97cc9d7d73fe939f2d510eb79a74335176116ac1357762dddc2ddf9cf5f02d05c83dee0ccbbc1421e8893094ff0a7024868692d190431b64af01e4ceff3082e780b77938bed358145303abe23afd4390947b4a89ba6d18a9e3ee6f9de9e7aaafc0e849f1b473443ff550f416e0e0cd89d42fc23485df6e3e9adfa9153cf010fd3e09bab152d601c46ebc1f55e220b67839a28e5dba8d081803abaeed8bacaae552619c1f44de1c0a3b56b67cfd277dc33bf0482a70f8437b0b39218bef5bcaaf091f5d266ad48c74470dea8c2631ceef28f41285e8eb13b2abc6bf95f0d828ac5d2e5716c497e3bf0807340d8541858cb9fd53f99cf4555fbd11be724bcd66d9cd5404516a227ad9b6976d916759a97962dfc798552511781fffbe2ef558c495e7c941510876f68576ced9c747edd1fffd73ae5c584a24220f04bacb765e124fe60dfaf8216bbe76d81c127c74d67cc00c5ade83f90919c5f9de7ac8f423800dfeb6b9188d9bd5eae67d71e8aebfed29040eb02a9435f90fd73dc02eb3de35f04fbee3b8039cc7043119b1b789b76d0b13ec6f9a09c18bdb7f5c9d0691c021cf0f21d0ba61bb39087430173e9a84f238f7e7ab92377ac8e186d5b82bc0fe6b9066c89f1bf4d42acd08677d0ab5796e9025aff3ca3f929ec0e827b97b70d9214df717cf2c649dd9d0be3dd86e0efa436c2023e042b21b5d9f0800c7c218093756a65fc3cffe2304b98a06b0239245f0f95a86b048efa2937700d54a0303b91b191ba75f7cbe74d97d468ed8655db45c923f58199f5444c1fc37d40676d0a453f574c4c543a7525c58fb0af9c35ff2011ae855ae55c4ff562f9cf0477faf08aa667f785f7b15eb0688f2e6269ac1d7715295eaaa7472a9d0883081641cecf1f267ef695113963557fa6796acbf3a102999f3adc6ebcc232c257a183fbbe360ff9154f0bca2795e66e664a3f1fe49144202fc7228b8ad415b979461ee9ced86cfe6568d43553a1ee9f25a4a7ab6e83dcfc5447f1bf9bd90be9e126005cd88febb529fd8d2f6b65af69fe41e9f3016b2541631e492dbdcb773118b501e1c161b5827f1bd1658c7039ed8a23f1430b9cd8ad8571be6d0ccebbac108fb548e8798a1cbd38f34516ab9b79c6a225acf314c27e5e3dc78581ad7959c88c098fa2f68859afa18d3c6539b4831206a214d1e3afb7fb320df9c64992fba9afebc2b6b5caab9bdbd68079e13fa5aca5e8c155521720ce1fca064495860b549f238bd980fffb18e15016f24d50be05675c01fda004c3f26e7d3cdbbc34db34ff564f045cb9c2a81078aebe6c87cf04b102c4d9f5881c6f099173cc0a542e0434426ab8fae796bed319a3e5f183e01898d0aa5fb6646ac5ee2e1386a7ad39d4f5466fe06bd683ea474ca0d71030d3cdeb7ea157eca9fbe06fe8da6b26491720ab1f82bad519205eecc590bff53957f0715de8a684e4e5b355cbcbdde78d0093134dd9409fbbed148bf2198e3e871938bc5d1eefddfd72ba68cbb7a2f0e556a10138eaa2ac5ba1fa9fce1381201a4fa376c41310b2abe85bcee3e584078d49c1b1cdd321ebe7b907a49991e6538e10cca0f938a29c703d6ae83f891f24baefef3703f58817a9905a0c8fe19e83bb31181b2d8404284dde8adae97bb41a3ef1807c34e455e61ff37179b610203589c3150005661d7a4e02438832d92bd1765cae2a53a44ffe594bcb05eae7d6799d5937479dde9deacd4390b2207bead67d2d12c49ae892c8d352752c86973bb66100007d8b370aa5089807d3022b97e85ab0ef979dbfc5fd233beb58d0717273bfc14212cfff243dee00a9a07d7c43d8a7e954f1f33175e79edc136426c662842c0824f441a4f4dfc33e055ee5d2daf99274fc3078770fa9bfe2faadd4bdbf40c161cdd4fa4eaf61d1bc3669660550486dd972d28e34b1366abfb8942beb45fc2fd58758ac8e7314e11acc7af993e619f51db85c88d5f2e0b3cbb5c5e89ef7af3ebe45bbfd36988223b595fc5732b501b6f5747fe78572cab7a73a6b3ee4216da3f491e03a0953a7a5c7a3cdb86ca2c920e7c87ab94e0e9023ba5ead5311cc3abb9336ad3cca5cefcc18a9aaaa17bc726de2bb1bd358cd618134fdc2967999a8a7fd199120cbc48b8bee775a0f9024297c892dd330be72ac1c77459d8e1c383332913653a17de40eae3878a21d2df7dec3637a820ccbc33d1056ebff28a87aa57674dd76e12ce63b5d42fb278cd1e78aa88b3968a3d7022ebef62f4675c524001235374f409907754e073cba4756f5997126d0799e4315894a49e2a89f5a8562bb02283dba00f92e10840b78736bd8bb208c03308d28c921a133a3b09f6c6e3373c252c2883350348beb8241d54672d6aaa1d925e07dbfa83d44c5208eb276ce49e501f17baf3c0b0c225291119a2c442fdba1dc61fd616ba332e988ad8d2fd95299617eee084bc48bc6bee530a3739163746e3f91960bafed2751719347db87743956965dd0f7efb4b661241786a0c7f3ea0ec9fce14133395fc50dc57d17a35d3596c9c2309b26fdbb20f5ae21bebcc85f7ef82ffb80b25cfcc0841c12da471e6cec14ad89a5cab232d7f0db6e0ffc88f53c7f256034e042b369e9e67ff97e52ce29e620afcf60d4d614ca263de5d645b3b98fc119a00815038926b53d9b1b01705583c2fe6d5b1a4093dcdee7f097767831d52be7730aa12e49401d023e39b4d63d388261c0926e9af88d5d2c571f03a54a340ca47a29d09072df9b61233949fd02e8469f051571f2a91a7fd13caee666531ef8aa67d07f7e82b61c74ed2b67cc920cde46047e2c9766376f489d60ad543cc1e5078645882fac49d74aaf60ac701190c76709f9be65ec49295f6b592e17c5911c697204f935a01cb206d46ec1231c057b0c9a696cadd5eba5d18ea83f8d84289fdb747368753ec8627c4714f37eaf6df3e67636a0ae74b06900951df1b3d10673bd08b3601818c0d35ab91b860ac0b97c60f15a6ad853cee2f81b387ce1791b99d13c3f7215dc7f3907a110ed12448a685a1ea74cc71e30486ab869f6a3b46cf00b8cf445f9585a9995006ccc5780ec26299891d3a36c304b8d3bc0aa9b171bf97452692fda6032c36516ed526b4c2ceb3b7de0342b6a8ca88e78191ab293c6db50cebdce347e8469515c3af641348c27ee6b6412635526566b05ecd182b69f5b932a3540258577541866b87ffd601f70f9b20cda3bf8cc50451a32e2eecb7df2fbdcea6b969ac4b5735653fc855244c2edccc1f5dec06e610f2802e7b3ec045a2a87363708e97d00a269f1e20b229eb11933de8a07206e0adcf666d072037428cdca244132ad98278ed86293a2f126a29b09bc7c0b886ae18caf461bb4ac0e24d90b5cad11d59683cbf5117d3f9b1b9050b3af7b338924545842bb6cf7cc11bff0061853e00062d1d97e29375855b42fa8730e2a408b291e5854aa2f3adc44a361387694f25f8cb3c53433f626cc704301aa553028342191b2cf2bbfd073ad47e56f10761eb0cb7750f6259984b228dd8c843a45cb658c5fd6480ad60249b205f1d0f0c7fba9f43251263673be563320b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 贪心算法设计要素</title>
    <url>/2021/06/09/algorithms11-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="ee12fde1eefafad3a09b1cb69f5afb0a8374669d095084d5e6e7eeb25058909c">757ff964fcfd9532ba69fc6fadfc1252eb09ce1986feccadb66dcf2cef6bec7f4717c52f2b8ca58302f862e521bc6718f24d177b94049ed2b8c17683330d7c81ed2e454c00cded0731550256f16cce4e4569851d3e57728c20e7aa9f126dbdd9fb588956aa0c13c9e735774aafe19aa0c077bde3d7576153519e43e078c8ae645337c7e8eb3864fa681df7c216aa0d94b394da1c0b2b27719b7761d7c09405605c8fa70c573aaa07eee4d7fc8f9bc961f20fe2faeef253bff3dc74f8f49c2b3fa64b27608898f0d7c6c9dc66a34b72c25924cb80677c5c9bf9ee708c39a4465f5dd7b6730edaa8b5333a754d69f2ea566f10860ec478b850a2d8e2938bb68a45d6f84d0402847e4c9bb2e375b2200ef1ca15e00d372955ccb9998cd0f357dd1f2bb30c6abb9efe02300486d186c62718dae03b3dfc13a222f40c33c1e087f0c168b362922fc92700a898d7f58504860a41e45c34e8ea983c330f5ae7c9a87c016b1452c0a46eaecb09f1e153d1d2cea6dadb427b7acb548f59fa32c3072fac1d5fe1d0ec84a616f41c092455e40286c2e77ed679f4e99e96adf844a11c7b8a9125b1f96157d3188f31746dfdaf9e1ef9d477c38a1f6b8c1bf67796d82066e600c66a7193efc7cd1cb5a9a28483765a3f8a3f251a1317ce02e7467f7919074d7309329eecea2c9a1b27b20c6c4e1fc4350a621a65e71fffde889f80dfd1f7f938145c0829dc6281f8562a723f2aefe4a3ec1cb7cd3698525daaa5f0c4bac9d567b68241cae2784186c89f4ac25f378d3a6ea105321ce8b6392169896947a4f7205d646ef809437a88ec3abbadc471008733cc13c8bfe0d7402e1bbeca088e19be668d50c2b6e531976f52eaf088df63cce073a66ff855a242d75c6ec2a34665ec10f642bc6829ee4841399735fe2f7cf877ca89955bdcf693c7f9831778e77cd0189fc84f4cbad64f0d5f9845059ddd0b37115c6a8d06bb8e141adec59bcee5e69bf83b1b2a3d79484785ffb9b668afa9fb4a86812d66530e5e439bd89edc31f5b751fc14434a62f251a6d5ab6c32ea2e20ca3acdcfc59a188fb74f79c4f0ec900366b4f3e2d4229860c20fd815a9619f6400e63db78200cd15fc15c101e25a3e8f4d89751e93c4cedd0241ad3eb864c6fba3151763e9e68a9d997baaa70e303feb0760bcb3a0c06bb6587e4b306cb06eb331e62cae8a12dcf47280eeaf515b97b93610496fc657361988b119a1d380291239cb28a8cf612d686c09f9255690713d000ba878b167a7139905426cbc3d0831a7c1902f6a1e1c487ea348b9b652391a96c2a57c7cfd1610b9f6f55f88bd36b49bb93f9575b5a453c74c61e0fb866e37b3f48087dc57f5f8a31bcbb100bd8d6eb6ac2f792b71c3874f21bef599e4149743e3ad3c72fcb8ca556faa43b100b2a8c87905fdc6c37f08eb93ad3b0d2a521deb7c427bb0a3d2cc1d465df2cffb4493bd362932ef0658bb9659b6c1635aa82ae8bd07a7c5b13c77a3275424be603124e1c8ca85f3efeb86d89833ec8d689fa383657837169c1cba315fd3278d690e0b178ed44e2f287d610e220f01062129ec7038062c735ff940f53594ae01490cb698d97574c18f049cf719c6d4cbf8cef7a50204765bb3c9704d5a5af9273a083abf6a6e607e9b475345f40dfd75b29edb8a578c1fe70ae2eb016c0bbb07ee577728e994caa664f1671df1b6adc8649c7a3ec9eedb9a63475cd4b589aacaa75fcb7ca47518374db58eb32554bf28836a0890275f7d10bbc95d824c6eb9f89450c7e54296e9e627056ae62e2e5d53c620d1a951d4f3f02f624eb78f95c6641fd2133fc0950470f491aa7ba897703bc35fab3a07c4ab49e463033272f2505ff180069fc84e20122db48a847dfdd7f32a3865302af9bb1e27ad11f55799fa6955f40ce61ba53d251366a58cd1d13d60410e9fb61855b56787917febb65c069042208a35dd466860da3a92b33407af535fdd40697aaee5d2a3a251d70847c219c14d2abdea5aacf054f9a3e6a020fe796c4e48dca9667b3d71f6a9e5184bda3ba4da77057cfb49073ccafeb2408bda667816b2ed09f6d21c0815a88f7d0bc9b8c8b4051d29725dcf9db4b23139bd683ae11648686b9e59738540433c9b5f03417ab4e536ddb2cc74392416cd9f39c0680f8f549f656f015da28e9ddbcb41549e0a2556af2d7383d8af0e7e550672cd451cb824fb3d9fcbf5df4443483a166560f227a87372f2e1c0671b62694173a56bfa40ab8f35bd0f6e2c1a73d197c7ce23f601b858f2d4a8b1e57bc73bd23a76bfc68af1ed11d8483f60cadd914f0f11d988b69286b17e5bf19db11889db125d415ec1311b35f4c276a013abe40ebc041c17eb9211219dee4f47b67b097c10b6ccc1fd1142dab446ee593857094e283255bc8b0147c7dd8759c263aefca18d27936521f492e3a949769269db63be1530bdfe9dd2c6dd5e1b606822ee89abb400bf0bbd4469633b73e04500ed0bdb424c6afc6ce1c5a6f5caef6f242e88f09fdf4c4690a2949f6126951ad2fdca1a83b6f4bc4ca25f0efd0515f87e6c59a57f6c12c11d0e4099a4e0e1b4abd8ce490d2dd00d51f8ca5700d1276f223afc6522d78c404cecb38829793a2c9e817ee6c127fbfa5f32c4bdd201d96b8e725201a94377e2acf18bc61868613c7a72de5a86e1215ddc868cbcbaa2e9090cb7eb7d82b4533531013148ca98a7591580fee6a165dfc6630837360f936d681f23e6418e773936d6d5bf2a405472e353a3db6b506c83d2731614e435e2102a14e1c8a744cfa60463388b4ed2443d7c116820058c89d0e27f29f406394206ff3ee0fb53ea7a9a44add1c579472ccb1e0a1665fa3722ab5db25706b04ad5ec5149ac58093676912c98b6ebcef604d1a756c9a6d5429d4a1fcf0163c026d8e40bbfcb766d1817af327375e7fc6c81d2cee94c8d45ec567d5d3a207f6c89b39ec1f6801c4898d0b6c9db4037c74e07cdadea9e32f1aa457e0b6de6e73b52c36b86da3bd663d7a311d7932094cccfc12401e419d4c0509d766b43ce25473e75fae74da52240c9b63cf076b8954f2b3bee734ab2d9503bcc8ffc40bbf3343aafd1dfd89e6a9ad3e6c1ec45194305509674b92ea11139dc05ca32decbafb5a0933a24f811a0e5e848efe70e570b2d84e014792f3d1c22f175233d76a68301d787513ad40bf1f208c7a74ac31e49e6839d130d625ae9303d3b39d3bfac2d2c91b7a926fce2c860e4a1790e4168ec861a2f7818cfb61748f23c30c16c4a10599265056c0b3d5d669271e67e0386d97be04b8ed8edfc6a541e8e6d089f0d83fb8041ffa7fa28715d4164c70836dfc73414779e1d8a4c0acaf4444f2ae762fc5e0fd144b9a676ba81c783eafc624d389afeb83505570e02a46a0d11ebd2c28fb87e1d457c072bf4c1a58e8befdd6729830e292059e027710961ab337d4073409830911a2ebdba2a8ccdae4bdc080a13245ff5de29b216335be68e413f95ae923d0edb2e4b4cd20509d2a28348096a0c7a65bb82ec203d5d91ad35fd1f7e57a89d9be466837171c0385f3d7235e5193d694c9cd043bc76b86e3e9704c112b00d544e00a6b80df990d0a8697ba9985e9df8695de7d0ae353cf24cf0c9baec6ca2092e9a2f98705b9a17da56a69f17b942d5dfb11af78a5d0440a4d1c13facb45a06f2815ae0241f36bbd7fe7097321e121e8d24b73adb48d87747b6fd18b8abb86fd0e9ffe8ec85b08d255e92c4be1bc7f1ee877e459d7a85e28dbbebb0b07c9e349063dfd6fe2cefe154fe503bd82112deb662b46def1ce6b9529127df609196e4abb5caf3bca236bab32c30a3c09cc2d0ef1d611ab12dc35d5961ae2ab3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 图优化问题的动态规划求解</title>
    <url>/2021/06/09/algorithms12-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="a2756e533538de98ef22243a749a079f96ebce1284808079320b7558ff1cdb48">757ff964fcfd9532ba69fc6fadfc1252eb09ce1986feccadb66dcf2cef6bec7fb13f2d4631f208c4970c3f2b43f9662a84c9b314bef62bcdc197b2f11b3e5835345873eaa96b733fdd7bc70761e1fbebfb7d77ebd75cae3e4ea2b273c50477f0a6df6a33cbd621c66960f644eb77966ba8b3b01d041b7e8917e9c95732a4801e3cd5b5da306204e07e5d9695dc4f92dd5630614f4dd7870c5e70739ae197bf4c1d6074eb1000b4e269195dbe0288b534bc33ef87317360419eed837a27760961fa59af5ec1de57f090e4212cc1895eca7c9bb25813d2492563f0a08a68120a453879d1f2d5b083dc38fec8c839b1cb8ae7df5b9dbab189abb2ff310746041f79887b409611b7c0adca2203efe94adc8f420b9a8a86bb71c0eac67f9a62fa5d64d2887465c1c8262fb0baa52e91108d1384974f52fec26aa2d363ac0a6cddbdd9cce9467d3fd6280d30726629731c36b3e0c21c7d2f9814d76d55782494aad1872d98e75c1df261aa767c5990a8430555534e82b12e9f24a5600be5fac785f25ed663a30cf34f3f0de8a026907750284762bcef7e237cb2020a7136dbe81fada13371b75d48ae4364fe0abd8a0f5f1f90b81c11dffb62944d66427a6eacd78c4d5219f98f0404961e5b32efc035d5ca41b2062721b14ea39e22cd8d4d7b46daa3729e7aaac46473b0e32f737657ed892659527105d54f0c6235c46f78ff4afbf42c6f5c313899af2586faa6c00181fe395253f3aa0bbd702d3b2725277aa3762082c5be7a6b9f23d1e97c454f05ce02a6534aa2fe0e5661ae3d0cfced47d9c9ae4a6ba0259ababeb74d3aeda692ba4567b60c2263f1425a8c9db93e1a52413c87b6b964836656db5ff7db357e76da33caa1b1fb834ae759f3a2ba40fcae09d22b815da877d185f4e1d89b2e05d4282b20bd36bf4ab306e42a2c2551db7a778e05acd77a1c3bec9608c54e2a3203cd0aaf059a34d06ac00f0ffb15abc8424ed39dc3408b02a8cae6992e539b5d0d3bff7b65ad0cfff89301fb2d4d55222b86cf29a6d62ff8011946a0b43f68ede8febf5da5becf8163dccfb5177eb7fbd928b622eeae1996455924e6dbb9d289becc1c314ac7d84fc36c46678b9cb48ff98fc8f91d5ffe788c206538f4cd95ea897f3ca0bbd8e9eaa009a5cdf1668f573d6d48e22eeb38936c6352fd678137d57df8ff952dc2dfb187657b8c1ea4134ef063ad812975b042d0b4c8a0a4b960d0e0457dbc87de8d5af877e86f857e1d8e98f1491cda6b130a2c6fe3b6ac80367aa6c3c582f09d660c00161f8996934d6be5a897668b402963dec072667da606fbb8ba411d8ecb6a683c53b383993f2d69cd58cdd0fdaaa002f843db2fdc7ae5a9a699682a493faa799e4300e3655795ff4e68a1df8c8c4bb6626cd57153fcc0bcfdadf90105570ddcb36aa92b46f1bc70f5452dc2f1baddca79c83537d3d9ec4ba0c5de339153cbe107def6ade7c30442289f4eafa7b391e69e03965587abe8dbd625b72572c68362801eb59e5f6076e1c0a436b5a535070116760b3c1bddfdbaae7b147e04a70a337ef29099304efba3edb6524e5d06a84abefdc6e717f49fa2ca6b377f1845b6d8e809d2b79e2cc9de26d26700879e1c1eb0107767b2d3b209e0d7eded02af23b24ae749f546591935442efce6294ec0293d4f7faf1884daf53324598fafdceba69e4b37fa2f895dd8a9d3fe90a9dcf6b431653e9b828803beeeada67b6ab90e53c95afa2b172d4a25f8c70a324b8dd75a059aa3115a3a7b3bfd02d5d02c622034bd8ca751b07ea961e8bbd745f5cc141ea19ba9d10687299660cac2c052c2902851003ef1952ffbe57f447d98d36fa8c50bc53bafa2a10bc12be8dbbf96147e531affc49c0a98557e1cb779931e3d0dd8b57be09217e94eeae5fab2f78f737bc810d5fe89d610b2e64dcc7c501c4b0e08f2aea59560341552f17b7d1472662790cb1ea983048d94b31ab4832bfbe8ff29eabfa18389bbde09ccd66094ddd67c618ed7e99769252594b3ee6fd17a9a7a9599e2cd411e30a6455d731ce61b71cd705d24eb29824bfcfefd4b814c178b28dfafb210c8ebca28652e12f55ada5d310eac27011cc85075a69ca7dd25702b00ab4b0828c877f11f9eb63301b2ac51d114cbc493879973d38af2996d51978987432f88bb87a6f13c6737e4d3eaa5028b814e84ed2f7f9120302b4f71dec1a552fc17df082fd3969d67bb91d7ebaf0aeb0d2da7ea08d3958fdbb82403b289fe37a6d482a6c4be2c02c1f6b0595804f5e67cb356c32d46d506fdfadd775137ad18892a1017c716114b66b8a051edc9daa646f1908b587e6264529988187f80e1e74472625e615c3dd2cead010789441ba3db1c4836e3fe922c3ba1e0e352647d5c87f0997408a51850d12a79380753f64834d4bdd943cf8c6b8174fd9a26ae901f769089a99547c050ff920e17a7a9f554edbfd98327eead126c257d2e7b0097a0a49013152724b31025554899f97eb062df472a1caf19c28105bd699ac003cd65d7601c6245801a359af2e0deb3b4581c7033ff1371e899c389817512c242e9935a348504db5c9aaa08a23a4e6c23b5971e0e02e2109241449ed1cf57aeadf04ff05d2250468f7c2b092f8cf1f520fa3593ea60b5e89d6e78f5b9b01431a3e5e20d4f672e80408dbd9fd7bfa23093bce8b51b1db05085e566e0e31eba2cdd1ae4b1cc5d28b46610310f168167f3ce95c55d6f565e379ea3d989ca78a782531945357b4371287eca27106904a5374f553c878869c6d18e054148ec35daf6e07ae5c80cb76d7e850ce5b924187bf884027a9e5d9fd7e5c8f42e6e12f76bc8ca217101f0ccacc09d008bdc31ae68297c4c2a9320083849ce76a6fa656cc7d2b256423041358e36b83853a2244dab1462b63b14f4c6f4f31317046da65cac1f3f984a4af3038efb6e8087fdd0f7a82cea55160820a7d66135a460d187d14d2078765f069d11d553d50f2e0e3c287b1771d2470ea89fbb6dc0eb221dc937bb7552b1904f92b01a4957e46c97f9b22ea69b879d609d74d14d09834dc710e042710665382d25ab41cad41bca737894448a495b2cc4d8d7d4214b3d9a5e54aab111fbc6086ee5b999e09eae30cdfe35d976f0a62277c03978e1a16fcbe78dba070e9db05591a66aada6f8609feecf05398a58b99b1180969378b48128818f5714080411d6f0aad0e0bf851e22d10378292c64ac35d3dbd45d010668886b0178cdacf9ed8289805f50419967108cd4d067e8c911245d11198c6f5f1055fdcd7f64af942d42e8626c9d570594570c00e054d22dc94cfaa6d6a2241dcfa579f07ce0fd0688465d6bcb6e5d28bb26c5ad2ef23332cc74bffcf5e01b227b10c304340d24ed87caf1d9a384ff233fdf797d7b1cfb5c9943afba1c78ae99024c037a51e584410a4979f8fc4300b978eefa29a85225d6ab00b7490a7d2a9f2650676441a957e55899dd92f3d2c9be2a826533241ed88e3ce45f0d91f19c42f057c19fad398464347181b53ab671aa20f380f30c287619990839cd3862594bd24eeb9ec45d2f424700035b4af0d4297ed98cd7a50800bfe93367c946d6063d6359d18ec88fd5209827d5cfa9f698d5834005f7d18efbb708734b3451727e1705fff9af4668e400e0f2145595faaeb543d7772b70da7a2c42b7d2252af3d732c7b00998267b979554f409bfa02b2e11784783e859bef69b15ad367c9572306652331dea422d5da17a3f1a8ef1f6ac648d4a003ba3bc921ac1d56f7ffd69832a7aef78828bfa68ec092a3049bd2d261ac9b0b1d8abd3a7baa8d52c28cb603e71f27ce7734b3b64f596d8139d5c4b47b9d26dd9e8ac122b294f04a5ef76455ab7f0d261a2bb12812509980a1a45284a5e91c389dea230fb03f273411f9aa5578f642e97f86df449bc12229491227f97cbcf683727969b0c0000f6d56f04c66ce7bd81c2fbc963d5868c8575e0e34bb74d64b7fc1a072e255e3dff4efafe321b13fed843c12b57dc5c7fa0115ba287e72a4340d9cda2a212c26a3aab6b607f2a30a9ed6043dab17077d65fb7727ef1440d4580cbd819f9b09f0709a5f1b63152898b2a781d3496c75219242f80981477fb3c74f5da13141d97e4d6a00ff63ad16134a6cc127076e898192d5d68abe1b05aa9e38322782bc8b6548fd95de64dda270cfd64bb47bc0517a0190ac7dbe3efd417b92a97ea5b99d9ec2c1a3098a4d7d397d3598dc405d6c156072eda308c7cb3509c5e427179baa2d08e4f41b8931921a987a85ff0d2ff96ef11d5186d8fd064277811bb1625872f1071ea020c38cc830c5914c70a1e69b3b2945e274604c746464e042b6bd8c198fa336d24f5a761e6f70172298ea1a42778b5991884edf6f1712d3815cef123b4689f5ef7a86f2b02d352e651f0e976d847dbc240265827314fc23bedff39fd9b6ee7938d5b33aff16e0e981090b4b15aaef0c969ee187e49a88c24567b1d97ef376d9cdf4cc2ad432260d4abf3876e4c5e1c08fb2b1a43de6da6cf38ef76f72f5be7ee28e5d8197c2f6e47fdc26401ef318609dffd156808469e7f47d4ef23091dce55120ebb5a68c7924b4f77405275501eea242a4143d1c318444e0f9f55357dedc2d0616204840316d3cadf161495d53a811f62fa7a46e4a9f8068f2795586a7481af7a45809ee6b156a8bee265b103ea49a758277fa056e82530ef5f5fb90d294ea4e6930c80d08f23eb1b41faf6923c83e85a40123e129111155a13972886865789742d57cd2e9553af208cc9d3b5ef303d8338ab8eca0284338b0391464a6cc3e738390323746e9ec73193cce2da7e52808126c93272e2348e535cba6033c814828339d02e3e9cf16480d73c4c64d326dfe094cc5e9bef4e9b19d1117ca821a246d0123122ec00cb629e2edbc0348eb7a7483b1e41bed74bd381716ff94fca4a0008fdafcbd1b60516494af16df2ace7455936390e8575731ef9015b48f506a062e515cc1936b81b02d0fbecaca0f90ba9a1abcb1b8986a64488055d39938d3a10dba60843ad906c88c44391dab45d94dbec3356b6aa29158062082be45913feda624ed0383ec783169d9fb44d1e220cd6e29ca5390d03a4ea5b4b00e2b523d119c92d82b081a6a9250cbb67978f4a2a7a4b23cff2935a78f69be6c7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 堆与偏序关系</title>
    <url>/2021/04/11/algorithms14-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="4589df97150267febbb1e97e1964b67d71c6e8ad5b74ade8ad9c6d9841d1b382"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 动态规划算法设计要素</title>
    <url>/2021/06/09/algorithms13-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="fc77a2f964ae6b044b2a19e5d5b0a95cc6da482a01337bb0eee548825681f3a8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 并查集与动态等价关系</title>
    <url>/2021/04/15/algorithms15-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="62ae58b6be089a5ae5ef182263b972001188351cb3f3f04cab542d048a9b22dc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 哈希表与查找</title>
    <url>/2021/04/16/algorithms16-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="5aa09818876b6726b2a2b317c78294f6bf6b5586654d5a6f17f6eb11279b6120">757ff964fcfd9532ba69fc6fadfc1252ecfa91f5d7837b28cb81f3786fadb42a3e123510686071591261c8eafaf93d725b46790797babcf55d73151d48891177a07cbbeb13271e945a6498790ccaa48b85260017d4b5ea240a6aada014eb4b57beb1c821c0877358c20281eef3efaf54517b9611bc74a8a85fad2d7f43a9caebab6cfae43e006ae7a7efa57d1b9504a0c431e41c399d05b6b3ff8b0e8d7a8837f92d9efe345362cb71982de50e944110e63653a6af12bfb2d614d746d9991f182dda9915252c4ea7e24e232eb73c9816315f5373e59a33797062c7d9b4e52b5032a3d4b9bee102113d5ddad7ab0af3b8908b60f110e9d404a815870e00146164e639037fa43b3e146c3261845ab9d9e45d31caf7da7d88bf262a49009e7353a773d3b11b9f33bc4adbc2c033fdbbe698be0fd6a06cca500d3b831eb94776d433892c04618464d31222c69bed83a8e5c7d9d3e5b87f561ae2bbcbc9f3f773bf32572f8d082dde0306b8a8121c73b7d87a07c4ffd652d14788f1593d18f5efd8d14c6ed486c690b2c11dbdab76e6e912c4155862700e44a37f6dc07da031a12c34dcbbf87b77dbffd567064f379764766206c7767f75ee2aab15507d03d069bd27efc69a4b8ab9a4fec344929b874621cb7a9d65a20cd019ebc475a97cc9f0d7ed37fdf0c37c0cf5ee9131f880d2e91b77178ea5415cf81723fd4aaa4acdfbb3a6efe1375e3a4608d5e7afa9dec96c35feac683fd10ed32694ec4cbb81a1a62bdc15aa558c1269921afbc9234198c59ac314e23a043278ee7ef1ab02837528b75a86596ecb0672bc0a245e41e9f4ddbd0be11ff46788a94aae6c2ca1fa4e2e7c572ac7f58b289267d7c98b5f322d877e8cf4dc8868f8898f6b5b5a533fe70842852b465aff7dde029b3db75b0dbba075146682b73c3a7158f24035cb9fdd26d3d5b9da3c9f4dc713a35bc7f894a178d3d14f76851ec150af48605583b6344d7544a6c9b4ce7321104b5e2715009fafdd22885c48eecec479dccbf2645746adca3987fa445f2555958e0903ae54f0e80b09a6e6f87afc0b1b41ed31b770864e71b459cbbb344df5be93b1caa8b49506e7dd856b512f15a10994ddfda31c00f052e2a6e72eb55ffdb33195934a9533cd2b4109386a564ddb8821c9010fe8b0eb8e1f62dbdc4aa33bc122533a54d91533b791f98de8978f84d7f74c23e39f93598248e9beb6fff7b3cdcda4b314bda63af6e37ca6d579f78cce4b916a7238de8f13a4f60b87a30ab15b271d70c6da941ed2550b1cabb8e30ccad344d5977ba04b9331c79d6eed0f67f2d78c2fbc2b1a9befc39b4856f17a8369b27c2d558216ef58320ebeda03fcb76e21155783a7a787e9637362866a507674cdf9c67053eca95867de091bb57673950804b78fdea007a37818fd25970e601d9e6f3311c0431051d1eee819d564929ed0870cd7ea88d2f8750262c4b537e25bb1f8af13c5877cb540caf8615f13aa6ffbea1740f2f0f9174fd3e54c614b6940a904feb04a83f99daa3ba9b1c8adb9f54561a674109d959b636c97d0408b5226a3f399f61bf104df0a199b86692d7ccf5ddec36e8a47ddc4b6c2e5f7812e40f4933213f0fbe97d5679189158c0414b855255310316314ca9d2321ec0d38d00f7841a6025272d0652c28c4882d9d39cf598a40b35021494fb44e1752b96417f0aaf1e31cdac0d30b3b565877d042e60defd9c7f60c2d82946f305d6a669fa01c389f6795c8edef0a1fb9f36109ad42b7eee4a7622653b3eab5bcf20773726dfc0a4a3ebd3e18652e666a7304f96013bdfeecef98870bfb7f327371c8bec6139f4c72cbb5a5c50e76cbad28f8446bb23d03fe9181d80338f37c22cd0d8ab533f3a84fd5a2ae9e1c3f5f4483e9635c27e76a9599a1d7a4391207111588619cebdd8c2c76a14493d503ed590a32f84ae2a6b388e120ab61a6ccdd7a868830f565557ea1a62415a14b289cc675af03b77d7b0257875e524deeeb216f22b9b46e4a4f5a174cb9345314accf9c99df0b03f10c1a090ca660a3a843d5e02fa4ca621ef73b3415b9e1351359c2393d16c6267b151e33cd1df42d2e63d9751315e0760e3a55b56a38647b103bae857e7a14e83ff5bfd8105ddabc863c90cd4e3d0d7f396b2b581322331e803e10771c3dbdbe9b520b3c26797ba383966561115dc130ee3cfe373ad99ddb25fe808dbec3ea36ce31f5ffc63d077efd05d5d75a217dfbd43e311102f4e2a5d6d0c8a9a810b8050a719baeb0d3bd50e6820d381ec23f5d14fc0af07b719dd4059902b5e47498d6b4f0e59a00e1db3a76ca13edb3e87ac5e88e1f756031d2ac3d134a4fdfeca7c900109b213873375f51fe5804386b3beffb155dad2d35f430c850b9bb4bc9bde321c0a20980f273129e06c2483f6f5ab5ddfd97f4cacfc45475319a1fc9168162af54057dfcb9066d0aefcad07379889dd13092a7d7ae23a2e5436d14be1076174eae5bd5feb6a734d0255c8f42a9c329dcf8fc16dfad70df74efd64b65072acaa35685b27079527a22a6852a262b492da4c362bbd1af52eed9936cf4db3536996600d677e0998b2db97ee3c09d8f7a153573d7e224edb742297a6d522b44b24151855077a75103d3ea92695f33c3180f3adea28ec2670a22b77fb27295455099570ee70e5773d033404332ce64f16718c5f31b0894963ac370aa253b55848b9928cefa2382094307e83e1acfd874ba1b0d567e922e3e5da9c83c94c04b254c19b7b3bcce48e32c2849c05cbed8dc2717a3e7192870c7db1d8f256f8b054d1e34ecf3689f8667681df4515e517234b0b694cf8af6b8e007cf980d8ec18e444ba68fa8043c5ba1289d89e9d0177996eb9f168c96f25ee4d466d5b35202cfcbac89ddac53572645da40a0051cc11a1fc4ec7fd9510e9e23ed34e66bcbbd3227d8e18f7145509fa4e2e83e3ccd5ea483751825e74fabd90b20bf13c86bea0ede453829284a6fa1d5aa27a0893936481405c5e49f6df9931ee269f0d03646a0443a1ca098158d2ae8161725f591ed3a202fb61eee41863085c3bb5d3a3ad707ed3370406f93e759a023f1747c89560e00ebf8aaac0ead22e665230430f7a1f47d5999d33a458d3baf1f2a6c0f2ce9a8b70ace10c2b87e407e51b76b1eafeb74e866224471ef7e5401fc3a2586e2f57c60241132f961880cadba8297cecb1b2a542b66c5078952afa37035fc4f19c2ded1194207bdd90943f3c33688608a93425c9983605439e2b6c03a7bd2bad8091b2a2c04a0542d87fdbbcb8b6e1a8d4360a9d8fe4ca93853681b21aee6854fc7092d1d94eda9219e74ccaedc50a16bf1a98a9cd169b2600e0f965241a9e36e2575b21377cccf6c993b34b48e6c1f75335357c1c89826554ee850eeacab8864e677dc3ca0062cf2e834555d34ce8d0d00f4b8c12e85f515ef0ec5e625bd1b36409bce22101023e81f089ecf2b39808625e032d2081dd7e3ac4c75293627069ec10edb7c9b8f1eea392829a54c11ce1a408f96d632881f2b04d44707617e53363dfc7aceadf1cb8a5135d02c67891bf9bf69580062f8391add929fe90ad05a802cc6f44e9a7b78799b42356522d959a36feb9e3373fae27dc44deb4bd6230eb9f3ea2aa8f920431f33a2612d547ad092a14cd028b69ae92626082ca20c30343a12d13d6c4bfa9f9142a5fb2c4504d2875eeb168eaef726fb95ec3a42d3ea46cebc524459cfb03382784eb8e2ce17db7e5c4d1bd2c5932779ce2e272694ef9463ebea8a4789a45a4d78413ab5965dc293b7d22f7893b1df84ada100a53ced03a61578dd032ff06014d6ecaefc93c7d8f2b8962d3e2fa18aae22a9cb04e6197685dacde35d4a3029b83e75bd92ddca6be9f873c9033b7c5857cbb0d7b0b349c77ed762d5812e1414c223f174e6135c513b44e63bbbda9bf692e8092b57064f46ac8589e749d7d384d6929fdfc650909f024445677669a55e2636d7c4c54f4c8bd6e0b90b40a06290608b0d35895ff4eb39101894318d7a9b20f892bbbf457e365a00e2d94069a5b066089d526f4e98b799c72a4b91cbfe92855cdc00da1ccb480b9f1ef43c37052273c6428971edf4d50d0ac1a15b0772c881255938cb0484e5f15ad2f5ab13e28d267c64031db5146ec4e49c7c4eb9cad38ad5b6b1820a4b5a9ab356b90606569fd455169f4b68a261d32b93f0678c122390261f4fbbe11d3668a82622ed03bc64dd46a59c10b2bdfef6226d47eeb8a032ab0990a3b42fd2bb519615deff5fc5df47fc9b2f9d79097abd5d816ff9684b4ea385f36b03ce24d49a4ffb1f98c66da1ae30fbb95eff3c2a20a4984af8c6c2e8cb9b884290144631642fe5ac9531dfcbc875a73990cdd969d017a7111e78ffa9226af955006c6f411d13ad0f1fe2c781c2c91f48ccb84d4c0c17b4e6e77b10c59c656abadf88d48462d95ab8ba25b7496c6060d7fa21cc82b56dcc4f6a35993d0f6491e929e93c8c57fb887a0e29309e7cde04b790427cca22185a7ec0fd413d64536585494f0f5c2940d557ed0997077efd4ee62054f275d9b3b7b420887db89135af6d9082506f59406942fdc5a01cf6bc6ac1e068ef9fc72956ebfec3a756935f9dc70d670489f81592338832553359f35ae5fa0347b4e64fece24ef2966504b67db66fac3e129d1e11ed7c74660e90080be989bc46ffb99c52a5ae6cd5fc4242edd3397c74d3e0fe3f4296a88c118d6f358115c2b525ea781d31788360faf5f88606ac2bdcc2a1c10cddb85e51061576d52ba4a8c84d3698caa6973cfef9e7f61004760d05dd600bdc2cb9b8c06de1ccdfd03e6c7b5fb55d79169b6e59c5e8d73cc3651ddc083e762862c299f5760c2cff04deb65630d54b6167c7707b3ee3000c988b990b1172c89899bbbe6dc1cf90f10f3d70817cf7f851ff6e0edf36df5cff2f641ce8f2d8410a354ed2ec5f15e23bd13b3205d6df8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 平摊分析</title>
    <url>/2021/04/16/algorithms18-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="9739e3745120dba91ec8aea238a23c9790d28ee2ef95ba2a01cc7d68a59b53d5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 对手论证</title>
    <url>/2021/04/16/algorithms19-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="7afeef5fa8fe1d508a9d94614e169dceb805e170216302146f0a327cd9695031"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 从算法视角重审数学概念</title>
    <url>/2021/03/19/algorithms2-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="0d908b60edd487d9eb56fbf585e0e9884c207348baa990132def32b3787077d0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 从算法视角重审数学概念</title>
    <url>/2021/03/19/algorithms2/</url>
    <content><![CDATA[<h2 id="数学运算背后的算法操作"><a href="#数学运算背后的算法操作" class="headerlink" title="数学运算背后的算法操作"></a>数学运算背后的算法操作</h2>]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 问题与规约</title>
    <url>/2021/06/11/algorithms20-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="d4abf0d7376e5b74c9e2fdf7f14142bdc7ea659096ef140d993427da8caf8a0c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 NP完全性理论初步</title>
    <url>/2021/06/11/algorithms21-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="1bba7983ca39b05882378f55e7e6d26a701778807b423d81b5c47a792834c7f1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 蛮力算法设计</title>
    <url>/2021/03/29/algorithms3-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="0fa488f1d36d13ef934f91f2783796a47f0d509b2bf159cbabef5b8c09022b4d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 分治排序</title>
    <url>/2021/04/10/algorithms4-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="fbc00413f6acaad59ad776cc0274541bf3996e6f8313ba504baf7f11eaa96dee"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 线性时间选择</title>
    <url>/2021/04/14/algorithms5-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="18398ff4ec07537b5fbacd5402df07691003d1a2c2befbf066a51a4b625fc843"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 对数时间查找</title>
    <url>/2021/04/15/algorithms6-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="989dc3873131a20b1e7be63f280d1c9e34e09c925af3b581a4d059b00df9a900"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 分治算法设计要素</title>
    <url>/2021/04/11/algorithms7-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="19aaa54bcad731e1c7578c6e23d48aa6a64bbbd90b5d0269424b13599bb368bc">757ff964fcfd9532ba69fc6fadfc1252ecfa91f5d7837b28cb81f3786fadb42a3e123510686071591261c8eafaf93d725b46790797babcf55d73151d48891177a07cbbeb13271e945a6498790ccaa48b85260017d4b5ea240a6aada014eb4b57beb1c821c0877358c20281eef3efaf54517b9611bc74a8a85fad2d7f43a9caebab6cfae43e006ae7a7efa57d1b9504a0c431e41c399d05b6b3ff8b0e8d7a8837f92d9efe345362cb71982de50e944110be727f66b5137facbb203a27965e8fe62d0dce7dc9a2c4164b1f2509b7667262ee3e0898a0a5e4cfae299bca078c4618fa75f897e455d2b68d7afb7d3454762e20c8fef662cd60232ad02773df1dbbbffb9e2144478fb16f6fef98fc9a8d03308240541f7b06e44187d5af097c71850c99b6681913608528f73428766c3912e071b042b30aba33a5b64363397e019bde4c2b63dc32fb788e7133180ae05a989aa6c4cf9101ed4633684d0e0600731abbe4b6a00e9d5918f0dd75cc0ffd09fb6c5c52704bcec97d08485e2b2271556a0febdf9ba910e94219352bf244834f064bfcc542fc470c8bd2268527163d370d8871e0283e3e6cb6d09898664560730a20ff8e65d000b31678afc345a01d45f8935c874cc621ecc8dd417036fe6ab48b3c5a718e3d3786ed13a686912e6de41e719b7fd077a90865c3702c5f1feba02305559009e2170acd581ff4a0ea8e6d8901654e2043675041f0d886e7d2d8e4a4aa46cc00f0ae7fc065d0f3d11804100d2ed003bab4531f5cf18a5f84670e467e0e986613ad2e7ca5c07c07f930d14c04d7d66ca2dbc6805e9f47ce6e7302d37a26f13f31c08d01e7a56dc49b096de01fd4a4dd26a0189745ae74358aa7f4651ef8f26e6aee43a0b7c032d170996dede7c41c4696ea57313e57a403e3f618fac33bcb6d9556f0b19f31f40f67d6882a39db402e942a87072440c65f3ca1902ddcc2cf9665429b9a1290fe6f628f49c6941f09a5182c44c1c2490ec2aa8a1cfecfd2cd774c2509156af9d1bbef8d4d6ce7ed53ee5b7404f5c6c35b23f367867f9b6adcfd95456ed2754667475a88c33c0310a4561557bbce95de1f9957ad9e6c3f19bc13dcd3144845e1f30650894be92f390d80dffb04e2c6a7f6daa6094e386d31c672631b1b8eeb38ca4a1fe7f4e3da4335d2f842374bee9883fcd293392172590bb169f6999c81b7c508a769cea51719618fb29df74f2142928a593d054b1de9aa16404a4f10d81075906ac5752f54271fc0111017b8a2f71e4e3606d07d0e07ed3b21bac04f06959946abb477af2c8d29c85e9e3a5d53b27ad3ffd7e49d2f9ef7d3c47a388400d7bc7e71844eac22db78eb3fff4af150f7a8ee55d8e6b357f447e394b97077ba9d7519b5b714042e15e292b6769f6704c9d140660edd733a477c47d45277c5b0eb03d0b6158cb31a7b743e2493fd1c38fc39a6c360d69d2d4b1a861acd4d2155d24cc3ed572debcd90163b5ef7dada2b187e1e7d1005d15c19967ab1995cc8a37091a9b52ee02c5bb0a67c8a72b025d91b2610bf53dec7362ae7c48d8ed25684f558f771fa2e06501cb19dd042cf007c08ba623f4d47210fa7806fb0a1f9d1314dceb591516667056e4102541014fc3d411ed1f0b6280d38fd606ec520f8cff20e99e0da07e8a5fe46f1ce9b286cacbb94b4fbf91d0ea9965d1f199b406b750aff5a562d8a7a86bf23cf63d91af5da58ffd4c9b63924a4d081ee50975d99dcf6242a58fbd6c92f812ca8002570b9ab9997fcbd8dca251caf832b58a1f38805736836bbbc0375b82ab641c7c4c0fcd38d9800dc59ac2ec866a9d96e75e4ad4a7d8a2e6fabf39605ef044513d0b745f2f8f6f5c76fe1ba70560ae9a16acce2d36c9bd37d8254117fd611e1b2e4769392ac35193e42065febf588c0f8f56c89e9d14d6b0a88f69260271150e90c7fb04c761191884a7d743ae6342f84fcef2b94f8de4a626dc7dbd50853f9b35cdc7ecdb2f230500a6e2197b938dd316bb5330cf07fe0fd430bc7be131abb875c2e4b81c3504fb089e66253c5d4df33f15eeab368919bc77796db6507de215b93c9f6a477b0e76657fc4175e1e2cec95a2b54b993a7cd35512c7e26094c12950f4501026fac6e25e79a390c6e3f83aa002d1b2aaf6c2583b90c5d9053f6e8413a5bafc9b35fd367afc406c5007f4fc59b96001e213ad3dd2d0073434eef35f10901c6be6e474409b15187fcf780af598ab8c3a85c20cf116c5d6fa25e8f3077ade08f011df302eb98ab8e503659bafcbe4b48a19f34791443e7edf28ab46cb3b34087b718c32f267be05ab57d2deec820ea28c618088d2a5c92b89a2da045e35f3e24bd68c66df677c859be4f565be0ea39fa72e8dfae3503448e9e09bb1e9b01f31cf25b48015746ce891ae6fb76aecffc0cc76ebdbf29eda408bc6b2b690102a536eb166c13c49678b7ea3cee74aeab29dd5785f56e6c16caa8686795de1c0a86134c81bc5313250c3234c736e39c66e30fa76d89a8f1759104a76f6945ae6d279853e1cc23688ed3a716d3c87a10f1445f77b8a460778c7ea8fb605b3cd57bb083476dc4c29ec109aaf44f4f4d2f15fd363df2cefed3f367dcf322c8c5081b4864a23b0679cce691839d6be15d3c16345e56b08560adf3dd98d695691d2668331f3f4d4a404ae955b08e8a463a2259d42e11ad2ed07ae718ca1a26568d09f238d778b97ef22fa7bf07f9848e88ccc5c6b8ef67032a29934245c32ac24fb30df3469446e81c77a9c76c97b6c92c80de12bb8796fee940ac0817cb3c9b1b6b886fb8a19d74e40d6556a23ecfe0f0b7cdcc1f1dbea1d43760ad72fefba656d0a9c6a484e4c1d85ce9663ee452a8ac58b9e35965a4af0ab13a37b941ceefc10781e79edf061a4a33c8eaf4fc5032b3a5ea454ee8e94c69d3fb95b41ad0c52885b398296454ade3277bbea56c4a60e1eb93484041c76491ff147d24b44592f342d68f468f8515ec9fc59ba1b0b7e38c8914a843916e121b696286da9ea9f2cac3931268960cc2d726d4ab1894b77d52da8a811d0082dd0fc3bde53b6123617981978692d86aae133457e317ee9ef7035f19b4b245ba5e96629793e2d66b32db1036cec9044a8cecc0fa94f7728a0b7039b2a91ea57e907f25c5f09b7cb3e29ac5ce8a6ca4ecc153cc4ac0dcdf99c8ee70394442c7a26b45f47a2893620cc6b7ba027cc0a101a1fa63a006fceef25fb2ee1f1a63788602de2e36b0dd93613efa3f28fa7f8101d18cd2f1382c5d0e5bdfa22a28c16748c50bd9bb7346eaabce050dc5341d89946a8f45006d95424ed67d2bda7d32ab64188ff7976e3cb88f014d2fbbc1bdc8e63a3b49edb9e1a42914d27c0f3f72e971c35adbab986a8a4dff17a019e9ab699fd010c85a63cdddc7a950e7270aec7d10949b169980dbc2e30e089429753c2fa46204f0a8138721e7ee6fbce990c9f121733f5b2a89eb6b60b126ce0bf9bc85dafbbe19a9cbd3b6b66fcef195cc607e813e0e025c272519bf06a5d76920ed3d08e7e7172cf908fa604ac736c54afe2f962d9fbc284cb598ad8c206440679154d44e9fbece465ede26d2dfc195a5036bb14ea0bd311785e08df5fb50d13ad5e6b78a8b6afb255d4a8948f0958931ec442342e67f4ea416a1b5bc440382cb095881a226534e7c2fb8b1825ed600d1e4680256d323e2061b94bb5fbb21e649e8aa0579aa3234d29d81a9c96321e68f3dae45ef71340366d3d372586f52cad13f4e8451363f381d6750620e77cddb008cf79c54227770e482caf013c29dfb494af5e32ffe922cbfcf97cf67decd3f6400434c4e047f426732c633fd36ff60dd0820999fda94c43131c3680442d1070c6ce89d0451cb18b1ff1733c70f201de50bfcd054e04c4fac907ffc1489777fc12172aa88727c1ea008f0490684b330b40b9a745f54a2f3c880268271ed95a5624e132f7b2aa6c81d9629f2384d101597b48472807b163224877de7638bf41100d5fd0ef9c241d5cdda1e9b65ab156dfeb8429670cb93434662a18ae570ed9a9e5ea9fd81784309f7e5aa46b50f79110b109081acaba240baaeef4f25507bbfc94c17274ae9a87d95832a4bb5e5b8917ae539a4359af91e8fda4402162f77e3688fb70d158090ae52c3b6de0c7096ab2a1246d6c48f79e5f1fb1ed5c6d665f499d05293d538159fe25ee95411c2b3dc80d5d6ce6fa92757aaba1b12de1fefcd852d0f3d1ffda005c09fe8d707b0740d7bd5ca2bbc11f043cfe59845130c7bc8226978e86fd90e9d2cf72713e1b93e30bd2915b77edbf55a7c8b047e8e4436cffb1e5c1fefce9d9108b92f672e7e1cb56f93423a0ef813296668f7bdaa4db8b99496e597a749be3f46a49649aa38b61ecfff1c7578b99f9708ed7346940275df2e27da3f16e2b02a6513d16583c2bb12f7df6e6c94eea2658a66d35a32c85b352cbb3e558fd2f1f16fc3b0c2e578c622307e15a18d18b3579706f8ce16df54ee8b123983780d391a542b7503550991ed1590df1c4100228eb87db2ee1fe4adb5e48854a3cc8a7599a5d2619f39ea5a5332b1b5a02ca34b7036a10df68484c284ebc13e1fca5b095a1dfc8121fb79939c86746a87010abeebfdff9b03628f7c8e353608114fc5e8b38c34a56298df0c8cf71a5f27cd5ad1dd051abf6c69926de16afba05ea19f9a5a3b4b8b571acc1451221590317d400ec4ca7d0ddce833885d7afa677bd89e88fff4a3be8d95808614161b4a5a74dd5b3c57503fcd4ec78e634dda22c1e8e051fbe24395d23fe88d1a2924bbcf7cf4c16aeaedd25c95c5f4d412d90789c119fedda35230c5766e7a39c1157097c3db0b8e8a58806ac7f4244d4d6f461172e41f1cf5a86557880d6b245b341447934aaa537d0f6a0070903f357354e87c0cb2927c0c2c56a75cd2a17dded0f073d03ea92d0c5679609c12ff2d3a6fd5cac3e282e61b4982f3bfe3acd7651740755a12f41686558d9843fb5a3d71b8321cadc36ac327e3506d1f61da7968f6a21e8eb147a7bd83ed557269757fd88b340f124029d932200fea69db2830a717c98ddd4837a00f1e4a477a8c60601896e29968840736813108f5e8290b87cfb42708e3db9984b8abce62e321277e428bd11fb7ceeff3e9530847046e5fe71a1b5e2d8fdf5ac9cb992535402a10b56eff9bae544821e7441e3ea38b35dcb3b7e16b4c940e557bbf54670b31eb992193917fdba6aecd143fef35e99c1044d934228a46bd7bc83b6b1cb597e2f2715aacb949a355fa0d38e98cc265708636f6c4d9f7432ec19bc70241a682b33433bd3aef52a9cc01d5decb563b6e04937a9b85ccb57cfc30f3a1542d6556ef8a8a58001bace4e23e128f2ad6d4d3a3fdbb39ad233195c84a6a6bd4b5611767a717fbe6c7adfc5fefe5bb6d7731be0dbb4e736a2879faf566e065e888eaef4187204bb8c2e4112e85024dc5bd2467b8c838c7fdb6a9146e688dd42d89d09fe77d3a11cf8ce81899ea30a36c54a3eaa98cd7b56fe5cfddb77ac2bb1d3e3a17def05e6b47a485f8f5382d8ec4927ec831c2a96093485c900b8c351662982d229d29149b8b956f5a34ee14c750b21785e3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 图的深度优先遍历</title>
    <url>/2021/05/24/algorithms8-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="9ab3c53081137c7a916a09265e84872ddc67119e73aa45dc7d0508090bb52900"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【习题解答】 图的广度优先遍历</title>
    <url>/2021/05/25/algorithms9-hw/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a2c3f61ccdfb23a6020dd997f92156596b4faae1c789e3761c01753f415dc01"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>Problem Set Solutions</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第一章-函数、极限和连续</title>
    <url>/2021/12/06/calculus1/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>sgn函数<ul>
<li>正数取1</li>
<li>负数取-1</li>
<li>0取0</li>
</ul>
</li>
<li>有界性<ul>
<li>可以从最值出发得到有界性<ul>
<li>有最值一定有界，有界不一定有最值</li>
</ul>
</li>
<li>可以从极限定义出发得到有界性</li>
<li>可以从连续性出发得到有界性</li>
<li>有限区间上，导函数有界，则原函数有界</li>
</ul>
</li>
</ul>
<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><ul>
<li>数列的极限<ul>
<li>$\forall \epsilon&gt;0,\exists N\in N^\star, n&gt;N \Rightarrow |A_n-A|&lt;\epsilon$</li>
</ul>
</li>
<li>函数的极限<ul>
<li>6个收敛位置<ul>
<li>点左，点，点右，无穷大，正无穷大，负无穷大</li>
</ul>
</li>
<li>形式<ul>
<li>$\forall \epsilon&gt;0,\exists \ [condition1]\ ,\ [condition2]\ \Rightarrow |f(x)-A|&lt;\epsilon$</li>
<li>点、无穷大对应$[condition1]$，左、右对应$[condition2]$</li>
</ul>
</li>
</ul>
</li>
<li>无穷大<ul>
<li>定义：按前面极限的定义</li>
<li>注意无穷大属于极限不存在的情况</li>
</ul>
</li>
<li>无穷小<ul>
<li>定义：按前面极限的定义，且$A=0$</li>
<li>比较<ul>
<li>同阶：比的极限为常数</li>
<li>等价：比的极限为1</li>
<li>高阶：比的极限为0</li>
<li>低阶：比的极限为无穷大</li>
</ul>
</li>
</ul>
</li>
<li>极限存在定义：左右极限相等</li>
<li>保号性：函数的极限存在，存在去心邻域使得函数和极限同号</li>
<li>两个极限存在法则<ul>
<li>夹逼定理</li>
<li>单调有界定理</li>
</ul>
</li>
<li>两个基本极限<ul>
<li>$\lim\limits_{x\rightarrow 0}\frac{sinx}{x}=1$</li>
<li>$\lim\limits_{x\rightarrow 0}(1+x)^{\frac{1}{x}}=e$</li>
</ul>
</li>
<li>等价无穷小替换的原理<ul>
<li>$A\sim C\Rightarrow \lim\frac{A}{B}=\lim\frac{AC}{BC}=\lim\frac{A}{C}\lim\frac{C}{B}=\lim\frac{C}{B}$</li>
</ul>
</li>
<li>洛必达法则<ul>
<li>适用条件<ul>
<li>0比0型</li>
<li>分子分母去心领域内可导且分母导数非0</li>
<li>导数比值的极限存在或无穷</li>
</ul>
</li>
<li>除非有变限积分函数，不推荐使用该法则<ul>
<li>该法则算不出结果不代表一定没有结果</li>
<li>该法则的每一次求导，都要验证使用条件</li>
</ul>
</li>
</ul>
</li>
<li>带佩亚诺余项的泰勒公式<ul>
<li>求极限时推荐使用</li>
</ul>
</li>
<li>极限计算的思路<ul>
<li>尽量化简、提取极限非0的因式</li>
<li>等价无穷小、洛必达、泰勒</li>
<li>导数定义、积分和式定义</li>
<li>夹逼定理、单调有界定理</li>
</ul>
</li>
<li>递推形式的数列极限<ul>
<li>先假设存在，求出唯一可能的极限</li>
<li>再证明存在性，一般用夹逼、单调有界等</li>
</ul>
</li>
<li>复合函数的极限<ul>
<li>内函数在$a$处有极限$b$，在某个$a$的去心领域内不等于$b$</li>
<li>外函数在$b$处有极限$c$</li>
<li>则复合函数在$a$处有极限$c$</li>
</ul>
</li>
</ul>
<h2 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h2><ul>
<li>左连续<ul>
<li>左极限等于函数值</li>
</ul>
</li>
<li>右连续<ul>
<li>右极限等于函数值</li>
</ul>
</li>
<li>连续<ul>
<li>极限等于函数值</li>
</ul>
</li>
<li>间断<ul>
<li>第一类<ul>
<li>可去间断：极限存在，但不等于函数值</li>
<li>跳跃间断：左右极限存在，但不等</li>
</ul>
</li>
<li>第二类<ul>
<li>无穷间断：极限不存在，无穷的情况</li>
<li>振荡间断：极限不存在，非无穷的情况</li>
</ul>
</li>
</ul>
</li>
<li>复合函数连续性<ul>
<li>内函数在$a$连续，函数值$b$</li>
<li>外函数在$b$连续</li>
<li>则复合函数在$a$连续</li>
</ul>
</li>
<li>闭区间上连续函数的性质<ul>
<li>有界、有最值</li>
<li>介值存在性定理、零点存在性定理</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-一元函数微分学</title>
    <url>/2021/12/06/calculus2/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><ul>
<li>$\Delta y=A\Delta x+o(\Delta x)$<ul>
<li>$f’(x_0)=A$ </li>
<li>$dx=\Delta x$</li>
<li>$dy=A\Delta x=f’(x_0)dx$</li>
<li>$o(\Delta x)=\frac{1}{2}f’’(\xi)(\Delta x)^2,\xi\in(x_0,x_0+\Delta x)$</li>
</ul>
</li>
<li>可微$\Leftrightarrow$可导$\Rightarrow$连续</li>
<li>反函数的导数<ul>
<li>$arcsinx’=\frac{1}{\sqrt{1-x^2}}$</li>
<li>$arccosx’=\frac{-1}{\sqrt{1-x^2}}$</li>
<li>$arctanx’=\frac{1}{1+x^2}$</li>
<li>$arccotx’=\frac{-1}{1+x^2}$ </li>
</ul>
</li>
<li>变限积分求导<ul>
<li>$(\int_{\phi_1(x)}^{\phi_2(x)}f(t)dt)’=f(\phi_2(x))\phi_2’(x)-f(\phi_1(x))\phi_1’(x)$</li>
</ul>
</li>
<li>参数式求导<ul>
<li>$\frac{dy}{dx}=\frac{\frac{dy}{dt}}{\frac{dx}{dt}}$</li>
</ul>
</li>
<li>隐函数求导<ul>
<li>两边同时微分再除以$dx$</li>
</ul>
</li>
<li>反函数求导<ul>
<li>一阶：$\frac{dx}{dy}=\frac{1}{\frac{dy}{dx}}$</li>
<li>二阶：按导数定义，用微分计算法则求解即可</li>
</ul>
</li>
</ul>
<h2 id="导数的应用"><a href="#导数的应用" class="headerlink" title="导数的应用"></a>导数的应用</h2><ul>
<li>单调性<ul>
<li>严格单调：没有常数区间的单调</li>
<li>单调：在常数区间外，单调</li>
</ul>
</li>
<li>极值<ul>
<li>必要条件：若可导，则导数为0</li>
<li>充分条件一：极值点处连续、去心邻域内可导、左右侧导数异号</li>
<li>充分条件二：极值点处二阶可导，且一阶导为0，二阶导不为0</li>
</ul>
</li>
<li>可疑极值（所有可能是极值的点）<ul>
<li>驻点</li>
<li>不可导点</li>
</ul>
</li>
<li>凹凸性<ul>
<li>定义：弦在弧上方是凹，弦在弧下方是凸<ul>
<li>数分的定义刚好反过来</li>
</ul>
</li>
<li>判断：要求一阶导没有常数区间，此时二阶导非正为凸、非负为凹</li>
</ul>
</li>
<li>拐点<ul>
<li>定义：凹凸的分界点</li>
<li>必要条件：若可二阶导，则二阶导为0</li>
<li>充分条件一：拐点处连续、去心邻域内可二阶导、左右侧二阶导异号</li>
<li>充分条件二：拐点处三阶可导，且二阶导为0，三阶导不为0</li>
</ul>
</li>
<li>驻点<ul>
<li>导数为0的点</li>
</ul>
</li>
<li>最值<ul>
<li>闭区间问题<ul>
<li>求内部的可疑极值点的函数值</li>
<li>求两端点的函数值</li>
<li>取其中最大者为最大值，最小者为最小值</li>
</ul>
</li>
<li>应用问题<ul>
<li>建模求解即可</li>
</ul>
</li>
</ul>
</li>
<li>渐近线<ul>
<li>水平渐近线<ul>
<li>正无穷或负无穷处的渐近线$y=c_1,y=c_2$，若重合只能算一条</li>
</ul>
</li>
<li>铅直渐近线<ul>
<li>某个极限为无穷的点$x_0$的渐近线$x=x_0$</li>
</ul>
</li>
<li>斜渐近线<ul>
<li>$\lim\limits_{x\rightarrow +\infty}\frac{f(x)}{x}=a,\lim\limits_{x\rightarrow +\infty}(f(x)-ax)=b$，则有斜渐近线$y=ax+b$</li>
</ul>
</li>
</ul>
</li>
<li>曲率<ul>
<li>$k=\frac{|d\theta|}{ds}\stackrel{y’=tan\theta}=\frac{|d(y’)|cos^2\theta}{\sqrt{1+(y’)^2}dx}=\frac{|y’’|}{(1+(y’)^2)^{\frac{3}{2}}}$</li>
</ul>
</li>
<li>曲率半径<ul>
<li>曲率的倒数</li>
</ul>
</li>
<li>曲率圆中心<ul>
<li>按<strong>递增</strong>的<strong>凹函数</strong>的情况推导，用曲率半径表达出通用公式<ul>
<li>曲率圆中心相对于函数点的位置，横坐标<strong>减</strong>，纵坐标<strong>加</strong>，且二阶导为<strong>正</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="中值定理体系"><a href="#中值定理体系" class="headerlink" title="中值定理体系"></a>中值定理体系</h2><ul>
<li>费马定理<ul>
<li>内容：极值点处，若可导，则导数为0</li>
<li>证明：以极大值为例，左导数大于等于0，右导数小于等于0，故导数等于0</li>
</ul>
</li>
<li>罗尔定理<ul>
<li>内容：闭区间连续，开区间可导，两端相等，则开区间内有驻点</li>
<li>证明<ul>
<li>若开区间内为常数，则有驻点</li>
<li>否则根据闭区间连续，得出开区间内有最值点，显然是极值点；又开区间内可导，根据费马定理，极值点为驻点</li>
</ul>
</li>
</ul>
</li>
<li>拉格朗日中值定理<ul>
<li>内容：闭区间连续，开区间可导，开区间内存在一个点的斜率，等于两端连线的斜率<ul>
<li>$\exists \xi\in (a,b),f’(\xi)=\frac{f(b)-f(a)}{b-a}$</li>
</ul>
</li>
<li>证明<ul>
<li>构造函数$g(x)=f(x)-\frac{f(b)-f(a)}{b-a}x$，构造思路是对$f’(x)=\frac{f(b)-f(a)}{b-a}$积分</li>
<li>验证构造函数在两端相等，结合罗尔定理即可</li>
</ul>
</li>
</ul>
</li>
<li>柯西中值定理<ul>
<li>内容：两个函数都闭区间连续，开区间可导，$\forall x\in (a,b),g’(x)\neq 0$，则$\exists \xi\in (a,b),\frac{f’(\xi)}{g’(\xi)}=\frac{f(b)-f(a)}{g(b)-g(a)}$</li>
<li>证明<ul>
<li>构造函数$h(x)=f(x)-\frac{f(b)-f(a)}{g(b)-g(a)}g(x)$，构造思路是对$f’(\xi)-\frac{f(b)-f(a)}{g(b)-g(a)}g’(\xi)$积分</li>
<li>验证构造函数在两端相等，结合罗尔定理即可</li>
</ul>
</li>
</ul>
</li>
<li>洛必达法则<ul>
<li>内容：当分子分母极限为0、去心邻域内分子分母导数存在且分母导数不为0、导数比值的极限存在或无穷，则$\lim\limits_{x\rightarrow a}\frac{f(x)}{F(x)}=\lim\limits_{x\rightarrow a}\frac{f’(x)}{F’(x)}$</li>
<li>证明<ul>
<li>令$f(a)=g(a)=0$，使得$[a,x]$连续，又$(a,x)$可导，则$\exists \xi\in (a,x),\frac{f’(\xi)}{g’(\xi)}=\frac{f(x)-0}{g(x)-0}$</li>
<li>两边取极限$\lim\limits_{x\rightarrow a}\frac{f(x)}{g(x)}=\lim\limits_{x\rightarrow a}\frac{f’(\xi)}{g’(\xi)}=\lim\limits_{\xi\rightarrow a}\frac{f’(\xi)}{g’(\xi)}=\lim\limits_{x\rightarrow a}\frac{f’(x)}{g’(x)}$</li>
</ul>
</li>
</ul>
</li>
<li>泰勒中值<ul>
<li>佩亚诺余项：若在$x_0$处n阶可导，则可在邻域内展开为<ul>
<li>$f(x)=f(x_0)+f’(x_0)(x-x_0)+\cdots+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)$</li>
<li>$R_n(x)=o((x-x_0)^n)$</li>
</ul>
</li>
<li>拉格朗日余项：若在$x_0$某邻域n+1阶可导，则在可在邻域内展开为<ul>
<li>$f(x)=f(x_0)+f’(x_0)(x-x_0)+\cdots+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)$</li>
<li>$R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}$</li>
</ul>
</li>
<li>注：前者一般用于极限计算，后者一般用于不等式证明</li>
</ul>
</li>
<li>积分中值定理<ul>
<li>内容：闭区间连续，则<ul>
<li>$\exists \xi\in (a,b),f(\xi)=\frac{\int_a^bf(x)dx}{b-a}$</li>
</ul>
</li>
<li>证明1<ul>
<li>闭区间连续，则原函数存在，可以使用牛顿莱布尼兹定理（参考第三章）</li>
<li>即证明$f(\xi)=\frac{F(a)-F(b)}{b-a}=F’(\xi)$</li>
<li>$F$闭区间连续，开区间可导，用拉格朗日中值定理即可</li>
</ul>
</li>
<li>证明2<ul>
<li>设$m=\min\limits_{a&lt;x&lt;b} f(x),M=\max\limits_{a&lt;x&lt;b}f(x)$</li>
<li>放缩分子的积分式，得到$m&lt;\frac{\int_a^bf(x)dx}{b-a}&lt;M$</li>
<li>因为$f(x)$闭区间连续，再用介值定理即可</li>
</ul>
</li>
</ul>
</li>
<li>广义积分中值定理<ul>
<li>内容：$f(x)$闭区间连续，$g(x)$闭区间可积且不变号<ul>
<li>$\exists \xi\in (a,b),f(\xi)=\frac{\int_a^bf(x)g(x)dx}{\int_a^bg(x)dx}$</li>
</ul>
</li>
<li>证明1（不严谨的证明，提供一种理解）<ul>
<li>$f(x)g(x)$和$g(x)$闭区间不一定连续，这里<strong>不严谨的假设</strong>原函数存在，使用牛顿莱布尼兹定理</li>
<li>$f(\xi)=\frac{FG(a)-FG(b)}{G(b)-G(a)}=\frac{f(\xi)g(\xi)}{g(\xi)}=\frac{FG’(\xi)}{G’(\xi)}$</li>
<li>根据前面不严谨的假设，$FG$和$G$闭区间连续，开区间可导，用柯西中值定理即可</li>
</ul>
</li>
<li>证明2（严谨的证明）<ul>
<li>设$m=\min\limits_{a&lt;x&lt;b} f(x),M=\max\limits_{a&lt;x&lt;b}f(x)$</li>
<li>放缩分子的积分式，得到$m&lt;\frac{\int_a^bf(x)g(x)dx}{\int_a^bg(x)dx}&lt;M$</li>
<li>因为$f(x)$闭区间连续，再用介值定理即可 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="不等式证明"><a href="#不等式证明" class="headerlink" title="不等式证明"></a>不等式证明</h2><ul>
<li>单调性法</li>
<li>最值法</li>
<li>拉格朗日中值定理法</li>
<li>拉格朗日余项泰勒公式法</li>
<li>双拉格朗日中值定理法</li>
</ul>
<h2 id="零点存在问题"><a href="#零点存在问题" class="headerlink" title="零点存在问题"></a>零点存在问题</h2><ul>
<li>连续函数的介值定理或零点定理</li>
<li>罗尔定理<ul>
<li>仔细体会拉格朗日中值定理和柯西中值定理的构造过程，其他的零点存在问题也是此思路</li>
<li>构造时涉及积分，可以考虑补上$e^x$等函数（求导后可以提取出公因式）</li>
</ul>
</li>
</ul>
<h2 id="高阶导数的零点界限"><a href="#高阶导数的零点界限" class="headerlink" title="高阶导数的零点界限"></a>高阶导数的零点界限</h2><ul>
<li>结论1：函数至少$k$个零点，则其导函数至少$k-1$个零点<ul>
<li>罗尔定理</li>
</ul>
</li>
<li>结论2：导函数至多$k$个零点，则原函数至多$k+1$个零点<ul>
<li>结论1 + 反证法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-一元函数积分学</title>
    <url>/2021/12/07/calculus3/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="原函数和不定积分"><a href="#原函数和不定积分" class="headerlink" title="原函数和不定积分"></a>原函数和不定积分</h2><ul>
<li>原函数<ul>
<li>若存在$F(x)$，使得$F’(x)=f(x)$，则$F(x)$是$f(x)$的原函数</li>
<li>$F(x)+C$是$f(x)$的原函数一般形式</li>
</ul>
</li>
<li>不定积分<ul>
<li>原函数的一般形式即不定积分</li>
<li>记为$\int f(x)dx=F(x)+C$</li>
</ul>
</li>
<li>原函数存在性（不定积分存在性）<ul>
<li>函数闭区间连续，则存在闭区间的原函数</li>
<li>函数闭区间，若间断点只有振荡间断点，则存在闭区间的原函数</li>
</ul>
</li>
</ul>
<h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><ul>
<li>定积分<ul>
<li>分割、乘积、求和、取极限，若极限存在，则该极限为定积分</li>
</ul>
</li>
<li>定积分存在性<ul>
<li>函数闭区间连续，则存在该区间上的定积分</li>
<li>函数闭区间有界，间断点有限，则存在该区间上的定积分</li>
</ul>
</li>
<li>不定积分和定积分的关系<ul>
<li>存在性互不相关</li>
<li>若函数闭区间连续，则不定积分和定积分都存在<ul>
<li>定积分表示原函数（变上限积分）：$F(x)=\int f(x)dx=\int_{a}^xf(t)dt+C$</li>
<li>原函数表示定积分（牛顿-莱布尼兹定理）：$\int_a^{b}f(x)dx=F(b)-F(a)$</li>
</ul>
</li>
<li>若函数闭区间有一个跳跃间断点，其余位置连续，设$F(x)=\int_{a}^xf(t)dt+C$<ul>
<li>分析1：根据存在性判定，闭区间不存在原函数，但存在定积分，说明存在某些位置$F(x)$不可导，或$F’(x)\neq f(x)$</li>
<li>结论1：$F(x)$闭区间连续</li>
<li>结论2：非间断位置，$F’(x)=f(x)$</li>
<li>结论3：间断位置，$F’_-(x)=f(x^-),F’_+(x)=f(x^+)$</li>
<li>分析2：间断点$x_0$是跳跃间断点，则$F’_-(x_0)\neq F’_+(x_0)\Rightarrow F(x_0)$不可导</li>
<li>分析3：间断点$x_0$如果改成可去间断点，则$F’(x_0)=\lim\limits_{x\rightarrow x_0} f(x)\neq f(x_0)$（不一定严谨，因为不清楚前面结论是否还成立）</li>
</ul>
</li>
</ul>
</li>
<li>定积分的性质<ul>
<li>$\forall x\in [a,b],f(x)\leq g(x)\Rightarrow \int_a^bf(x)dx\leq \int_a^b g(x)dx$</li>
<li>在上面性质基础上，若闭区间连续且$\exists x_0,f(x_0)&lt;g(x_0)\Rightarrow \int_a^bf(x)dx&lt; \int_a^b g(x)dx$</li>
<li>积分中值定理<ul>
<li>见第二章的中值定理体系</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="积分方法"><a href="#积分方法" class="headerlink" title="积分方法"></a>积分方法</h2><ul>
<li>建议记忆的积分公式<ul>
<li>$\int secxdx=ln|secx+tanx|+C$</li>
<li>$\int cscdx=ln|cscx-cotx|+C$</li>
<li>$\int\frac{1}{a^2-x^2}dx=\frac{1}{2a}ln|\frac{a+x}{a-x}|+C$<ul>
<li>对比记忆法：$arctan’x=\frac{1}{1+x^2}$</li>
</ul>
</li>
<li>$\int\frac{dx}{\sqrt{x^2\pm a^2}}=ln|x+\sqrt{x^2\pm a^2}|+C$<ul>
<li>对比记忆法：$arcsin’x=\frac{1}{\sqrt{1-x^2}}$</li>
</ul>
</li>
</ul>
</li>
<li>第一类换元积分法<ul>
<li>$u=\phi(x)$</li>
</ul>
</li>
<li>第二类换元积分法<ul>
<li>$x=\phi(t)$</li>
<li>比如带根式的积分，可以换元为三角函数积分，或直接换元为$t$形成有理函数积分</li>
</ul>
</li>
<li>定积分与不定积分的换元积分的注意事项<ul>
<li>定积分的换元法的上下限要调整对应的值</li>
<li>不定积分的换元法的结果表示要换元回原字母</li>
</ul>
</li>
<li>分部积分法<ul>
<li>$\int f(x)d(g(x))=f(x)g(x)-\int g(x)d(f(x))$</li>
</ul>
</li>
<li>有理函数积分（分子和分母都是多项式形式）<ul>
<li>思想：把分母因式分解，然后拆项</li>
<li>步骤<ul>
<li>解分母等于$0$的方程，从而把分母因式分解为若干项，但只有两种形式，一种实根对应项$(ax+b)^i$，另一种是复根对应项$(ax^2+bx+c)^i$</li>
<li>$(ax+b)^i$拆项后待定系数为$\sum\limits_{k=1}^{i}\frac{C_k}{(ax+b)^k}$</li>
<li>$(ax^2+bx+c)^i$拆项后待定系数为$\sum\limits_{k=1}^{i}\frac{A_kx+B_k}{(ax^2+bx+c)^k}$</li>
</ul>
</li>
<li>举例<ul>
<li>$\frac{2x^2-3}{x^2(x+2)^2(x^2+x+1)(x^2-2x+2)^2}$</li>
<li>$=\frac{A_1}{x}+\frac{A_2}{x^2}+\frac{B_1}{x+2}+\frac{B_2}{(x+2)^2}$</li>
<li>$+\frac{Cx+D}{x^2+x+1}+\frac{E_1x+F_1}{x^2-2x+2}+\frac{E_2x+F_2}{(x^2-2x+2)^2}$</li>
</ul>
</li>
</ul>
</li>
<li>用于定积分计算的结论<ul>
<li>偶函数对称区间的定积分为2倍单侧区间的定积分</li>
<li>奇函数对称区间的定积分为0</li>
<li>周期函数每个周期的定积分相等</li>
<li>华里士公式$\int_0^\frac{\pi}{2}sin^nxdx=\int_0^\frac{\pi}{2}cos^nxdx$<ul>
<li>$=\frac{n-1}{n}\times\frac{n-3}{n-2}\times\cdots\times \frac{1}{2}\times\frac{\pi}{2},n=2,4,6,\cdots$</li>
<li>$=\frac{n-1}{n}\times\frac{n-3}{n-2}\times\cdots\times \frac{2}{3}\times 1,n=3,5,7,\cdots$</li>
</ul>
</li>
<li>万能代换<ul>
<li>令$tan\frac{x}{2}=t$</li>
<li>一般不建议使用</li>
</ul>
</li>
</ul>
</li>
<li>带绝对值的积分<ul>
<li>建议分段去掉绝对值符号，哪怕要分无穷段（比如三角函数带绝对值）</li>
</ul>
</li>
</ul>
<h2 id="反常积分的计算和判敛"><a href="#反常积分的计算和判敛" class="headerlink" title="反常积分的计算和判敛"></a>反常积分的计算和判敛</h2><ul>
<li>无穷区间的反常积分<ul>
<li>上限和下限都为无穷时，需要拆成两项</li>
<li>根据极限定义判定各项是否收敛（无穷处的极限）</li>
<li>只有各项全部收敛，原极限收敛</li>
</ul>
</li>
<li>无界函数的反常积分（瑕积分）<ul>
<li>有多个瑕点（即无界的间断点，例如无穷间断点），需要拆成多项，使得每个积分项的上下限中只有一个瑕点</li>
<li>根据极限定义判定各项是否收敛（瑕点某单侧的极限）</li>
<li>只有各项全部收敛，原极限收敛</li>
</ul>
</li>
<li>建议记忆的反常积分<ul>
<li>$\int_0^{+\infty}e^{-x^2}dx=\frac{\sqrt{\pi}}{2}$<ul>
<li>用二重积分开根号计算出</li>
</ul>
</li>
<li>$a&gt;1,\int_{a}^\infty \frac{dx}{xln^p x}$，则$p&gt;1$，收敛<ul>
<li>分类讨论再用第一类换元积分法即可</li>
</ul>
</li>
<li>$\Gamma(n+1)=\int_0^{+\infty}x^ne^{-x}dx=n!$<ul>
<li>$\Gamma(x)$本质上是阶乘的插值函数，这里只用到其自然数定义域的部分</li>
</ul>
</li>
</ul>
</li>
<li>收敛判定方法<ul>
<li>通过计算出结果判敛</li>
<li>通过单调有界收敛定理</li>
<li>通过判敛定理（都是收敛或发散的充分条件，建议记忆）<ul>
<li>要求：定义区间内连续，$f(x)\geq 0$</li>
<li>区间右端点为瑕点：$\lim\limits_{x\rightarrow b-}(b-x)^pf(x)=A$</li>
<li>区间左端点为瑕点：$\lim\limits_{x\rightarrow a+}(x-a)^pf(x)=A$</li>
<li>右侧为无穷区间：$\lim\limits_{x\rightarrow +\infty}(x)^pf(x)=A$</li>
<li>左侧为无穷区间：$\lim\limits_{x\rightarrow -\infty}(x)^pf(x)=A$</li>
<li>收敛情况记忆：$0\leq A&lt;+\infty$，瑕积分对应$p<1$，无穷区间积分对应$p>1$</1$，无穷区间积分对应$p></li>
<li>发散情况记忆：$0&lt; A\leq +\infty$，瑕积分对应$p\geq 1$，无穷区间积分对应$p\leq 1$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="定积分的应用"><a href="#定积分的应用" class="headerlink" title="定积分的应用"></a>定积分的应用</h2><ul>
<li>平面图面积、平面曲线弧长、旋转体体积、旋转面面积，一律按微元法列方程，然后积分即可</li>
</ul>
<h2 id="定积分的有关证明"><a href="#定积分的有关证明" class="headerlink" title="定积分的有关证明"></a>定积分的有关证明</h2><ul>
<li>有绝对值时，一般要划分区间，去掉绝对值<ul>
<li>各种证明适用</li>
</ul>
</li>
<li>积分中值定理（包括广义积分中值定理）<ul>
<li>各种证明都适用，但求极限时注意$\xi$是否是固定的数</li>
</ul>
</li>
<li>积分的不等式相关问题<ul>
<li>积分保号性</li>
<li>放缩和夹逼准则</li>
<li>引入变量转化为变限积分</li>
<li>利用柯西不等式积分形式的证明原理<ul>
<li>形式：方和积$\geq$积和方</li>
<li>证明：引入变量转化为变限函数，再利用完全平方公式和保号性</li>
</ul>
</li>
</ul>
</li>
<li>变限积分函数有关问题<ul>
<li>换元、求导，从而转化为普通函数</li>
</ul>
</li>
<li>零点问题<ul>
<li>结合第二章的中值体系求解</li>
<li>零点存在性定理</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-向量代数和空间解析几何</title>
    <url>/2021/12/09/calculus4/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="叉乘和混合积"><a href="#叉乘和混合积" class="headerlink" title="叉乘和混合积"></a>叉乘和混合积</h2><ul>
<li>$\pmb{a}\times \pmb{b}=\left | \begin{matrix}\pmb{i}&amp; \pmb{j}&amp; \pmb{k}\\a_x&amp;a_y&amp;a_z\\b_x&amp;b_y&amp;b_z \end{matrix} \right |$<ul>
<li>大小对应两个向量合成的平行四边形的面积</li>
</ul>
</li>
<li>$(\pmb{a}\pmb{b}\pmb{c})=(\pmb{a}\times \pmb{b})\cdot \pmb{c}=\left | \begin{matrix}a_x&amp;a_y&amp;a_z\\b_x&amp;b_y&amp;b_z \\c_x&amp;c_y&amp;c_z\end{matrix} \right |$<ul>
<li>大小对应三个向量合成的平行六面体的体积</li>
</ul>
</li>
</ul>
<h2 id="平面和直线"><a href="#平面和直线" class="headerlink" title="平面和直线"></a>平面和直线</h2><ul>
<li>平面<ul>
<li>$Ax+By+Cz+D=0$</li>
<li>通过梯度计算，得到$(A,B,C)$是法向量</li>
</ul>
</li>
<li>直线<ul>
<li>$\frac{x-x_0}{a}=\frac{y-y_0}{b}=\frac{z-z_0}{c}$</li>
<li>通过定义法，得到$(a,b,c)$是方向向量，要求不是零向量</li>
</ul>
</li>
<li>平面间位置关系<ul>
<li>利用法向量</li>
</ul>
</li>
<li>直线间位置关系<ul>
<li>利用方向向量</li>
</ul>
</li>
<li>平面和直线的位置关系<ul>
<li>利用法向量和方向向量</li>
</ul>
</li>
<li>点到平面的距离<ul>
<li>$d=\frac{|Ax_0+By_0+Cz_0+D|}{\sqrt{A^2+B^2+C^2}}$</li>
<li>本质是把点和平面上某点相连，利用数量积求出连成的向量在法向量上的投影</li>
</ul>
</li>
<li>点到直线的距离<ul>
<li>把点和直线上某点相连，利用向量积求出连成的向量在垂直于方向向量上的投影</li>
</ul>
</li>
<li>平面直线的距离<ul>
<li>用点到直线的距离来求</li>
</ul>
</li>
<li>异面直线的距离<ul>
<li>在两个直线上分别取点连成向量，把<strong>混合积</strong>（两个方向向量和连成的向量）的大小除以两个方向向量<strong>叉乘</strong>的大小</li>
<li>本质上平行六面体体积除以底面的面积，就是高度，即异面直线的距离</li>
</ul>
</li>
</ul>
<h2 id="曲面和曲线"><a href="#曲面和曲线" class="headerlink" title="曲面和曲线"></a>曲面和曲线</h2><ul>
<li>变量数比方程数多$2$，则为曲面，变量数比方程数多$1$，则为曲线</li>
<li>旋转面方程<ul>
<li>利用点到转轴的距离不变性</li>
</ul>
</li>
<li>柱面方程<ul>
<li>准线上取一点$(x_0,y_0,z_0)$，写出过该点母线的参数直线方程$\frac{x-x_0}{a}=\frac{y-y_0}{b}=\frac{z-z_0}{c}=t$</li>
<li>把$x_0,y_0,z_0$用$x,y,z,t$表示出，再带回准线方程，即可达到曲线参数式方程</li>
</ul>
</li>
<li>曲线在某个坐标平面的投影<ul>
<li>曲线一般有两个方程表示三个未知量，即两个曲面的交线</li>
<li>比如在$x-y$平面的投影，只需要把两个方程的$z$消掉即可</li>
<li>注意变量的取值范围</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-多元函数微分学</title>
    <url>/2021/12/09/calculus5/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>重极限<ul>
<li>含义：以在平面上任何路径趋近某个点时，都有相同极限</li>
<li>证明极限不存在：找到某个路径，其极限不存在，或某两个路径极限不相等</li>
<li>证明极限存在：证明所有路径都有极限，且极限都相等</li>
<li>求解：运算化简、转化为一元函数、用等价无穷小代换、夹逼准则等</li>
</ul>
</li>
<li>连续性<ul>
<li>极限值等于函数值</li>
</ul>
</li>
<li>偏导数求解<ul>
<li>一般分段函数需要按定义求解</li>
<li>用导数公式法求解出的实际上是偏导数的极限</li>
</ul>
</li>
<li>微分<ul>
<li>充要条件<ul>
<li>$\Delta z=dz+o(\sqrt{(\Delta x)^2+(\Delta y)^2})=\frac{\partial z}{\partial x}dx+\frac{\partial z}{\partial y}dy+o(\sqrt{(\Delta x)^2+(\Delta y)^2})$</li>
<li>体现了微分$dz$形式的不变性</li>
</ul>
</li>
<li>必要条件<ul>
<li>某点处两个偏导数存在（只考虑了部分的方向）</li>
<li>某点处连续</li>
</ul>
</li>
<li>充分条件<ul>
<li>某点处两个偏导数连续</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="多元微分法则"><a href="#多元微分法则" class="headerlink" title="多元微分法则"></a>多元微分法则</h2><ul>
<li>复合函数偏导数<ul>
<li>绘制树形图<ul>
<li>对变量求偏导，结果是多个项的和</li>
<li>每个项都是多个导数的乘积，对应一条从根到叶的路径</li>
<li>路径上的结点有多个孩子，则求偏导，有一个孩子则求导</li>
</ul>
</li>
</ul>
</li>
<li>高阶偏导数<ul>
<li>把偏导数看出多元函数，继续求解即可</li>
</ul>
</li>
<li>混合偏导数次序无关条件<ul>
<li>当两个混合偏导数在某点连续，则在该点两个混合偏导数相等</li>
</ul>
</li>
<li>隐函数方程组的求导<ul>
<li>首先绘制树形图，明确变量的对应关系，便于开展求导过程</li>
<li>方程式左右两边同时求偏导，解出即可</li>
</ul>
</li>
<li>求带参数的全微分的原函数<ul>
<li>偏积分：分别用两个偏导数直接计算出原函数，再令其相等</li>
<li>利用$\frac{\partial P}{\partial y}=\frac{\partial Q}{\partial x}$<ul>
<li>首先使用微分充要条件，即$P,Q$是偏导数</li>
<li>然后使用混合偏导数次序无关条件，需要检查$P,Q$的连续性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="极值和最值"><a href="#极值和最值" class="headerlink" title="极值和最值"></a>极值和最值</h2><ul>
<li>驻点<ul>
<li>两个偏导数为0的点</li>
</ul>
</li>
<li>无条件极值<ul>
<li>本质：局部最值<ul>
<li>局部指的是某个邻域</li>
</ul>
</li>
<li>必要条件：若可偏导则为0（驻点）</li>
<li>可疑极值点的求解<ul>
<li>可能是极值的点，包括驻点和不可偏导点</li>
</ul>
</li>
<li>二元函数极值点的求解：设二阶偏导数为$A,B,C$<ul>
<li>$B^2-AC<0$有极值，$A>0$为极小值，$A&lt;0$有极大值</0$有极值，$A></li>
<li>$B^2-AC&gt;0$没有极值</li>
<li>$B^2=AC$不确定极值情况</li>
</ul>
</li>
<li>极值点的求解<ul>
<li>只能用定义法$\epsilon-\delta$语言</li>
</ul>
</li>
</ul>
</li>
<li>条件极值<ul>
<li>本质：给定曲线上的局部最值</li>
<li>可疑极值点的求解<ul>
<li>拉格朗日乘子法，转化为无条件可疑极值的求解</li>
</ul>
</li>
<li>二元函数极值点的求解：用条件消元，转化为无条件二元函数的极值<ul>
<li>条件消元不一定能成功</li>
</ul>
</li>
<li>极值点的求解<ul>
<li>只能用定义法$\epsilon-\delta$语言</li>
</ul>
</li>
</ul>
</li>
<li>闭区域最值<ul>
<li>求内部的最值<ul>
<li>求可疑极值（驻点、不可偏导点）</li>
</ul>
</li>
<li>求边界曲线的最值<ul>
<li>求可疑极值（驻点）。因为是条件极值，所以用拉格朗日乘子法</li>
<li>多个边界，要考虑边界的端点</li>
</ul>
</li>
</ul>
</li>
<li>问题形式<ul>
<li>因为极值只能用定义法求，所以问题一般是求二元函数的极值、多元函数的最值</li>
</ul>
</li>
</ul>
<h2 id="方向导数和梯度"><a href="#方向导数和梯度" class="headerlink" title="方向导数和梯度"></a>方向导数和梯度</h2><ul>
<li>方向导数<ul>
<li>本质：沿着某个方向的导数，比如偏导数是沿着坐标轴方向的导数</li>
<li>求解：若可微，则方向导数存在，可以借助两个偏导数进求方向导数<ul>
<li>两个偏导数在方向上的投影的代数和</li>
<li>两个偏导数对应向量的合成（即梯度），再投影到目标方向上</li>
</ul>
</li>
</ul>
</li>
<li>梯度<ul>
<li>本质：方向导数的最大值对应的方向向量</li>
<li>求解：各偏导数对应向量的合成<ul>
<li>比如$\pmb{grad}\ u(x,y)=(u’_x,0)+(0,u’_y)=(u’_x,u’_y)$</li>
</ul>
</li>
</ul>
</li>
<li>曲面切平面和法线<ul>
<li>先求曲面$F(x,y,z)=0$的法向量，即函数$F(x,y,z)$的梯度方向（也可以是梯度反向）</li>
<li>再根据法向量，求出切平面和法线方程</li>
</ul>
</li>
<li>曲线切线和法平面<ul>
<li>先曲线的方向向量</li>
<li>再根据方向向量，求出法平面和切线方程</li>
</ul>
</li>
<li>二元函数泰勒定理<ul>
<li>佩亚诺余项：若在$(x_0,y_0)$某邻域有二阶连续偏导，则在可在邻域内展开为<ul>
<li>$f(x)=f(x_0,y_0)+f’_x(x_0,y_0)(x-x_0)+f’_y(x_0,y_0)(y-y_0)$</li>
<li>$+\frac{f’’_{xx}(x_0,y_0)(x-x_0)^2+2f’’_{xy}(x_0,y_0)(x-x_0)(y-y_0)+f’’_{yy}(x_0,y_0)(y-y_0)^2}{2!}+R_n(x)$</li>
<li>$R_n(x)=o(\rho^2)$</li>
</ul>
</li>
<li>拉格朗日余项：若在$(x_0,y_0)$某邻域有二阶连续偏导，则在可在邻域内展开为<ul>
<li>$f(x)=f(x_0,y_0)+f’_x(x_0,y_0)(x-x_0)+f’_y(x_0,y_0)(y-y_0)+R_n(x)$</li>
<li>$R_n(x)=\frac{f’’_{xx}(x_\xi,y_\xi)(x-x_0)^2+2f’’_{xy}(x_\xi,y_\xi)(x-x_0)(y-y_0)+f’’_{yy}(x_\xi,y_\xi)(y-y_0)^2}{2!}$</li>
<li>$(x_\xi,y_\xi)$在$(x_0,y_0)$和$(x,y)$的线段不包括两端点的内部</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第六章-多元函数积分学</title>
    <url>/2021/12/11/calculus6/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="重积分"><a href="#重积分" class="headerlink" title="重积分"></a>重积分</h2><h3 id="二重积分"><a href="#二重积分" class="headerlink" title="二重积分"></a>二重积分</h3><ul>
<li>性质：和一元积分类似，有保号性和中值定理</li>
<li>计算：直角坐标、极坐标，注意用合适的积分次序计算累次积分<ul>
<li>$ds=dx\cdot dy=dr\cdot rd\theta$</li>
</ul>
</li>
<li>技巧1：根据积分域的对称性和被积函数的奇偶性简化计算<ul>
<li>情况一：积分域关于坐标轴对称，被积函数有奇偶性<ul>
<li>积分等于$0$或两倍的半积分域上的积分</li>
</ul>
</li>
<li>情况二：积分域关于$y=x$对称（即积分域表达式调换$x,y$不改变积分域）<ul>
<li>被积函数调换$x,y$不改变积分结果</li>
</ul>
</li>
<li>其他情况：对称性也可以不是关于坐标轴，而是平行于坐标轴的直线</li>
</ul>
</li>
<li>技巧2：极坐标的极点也可以不选在原点</li>
<li>技巧3：利用形心<ul>
<li>本质还是利用对称性</li>
</ul>
</li>
</ul>
<h3 id="三重积分"><a href="#三重积分" class="headerlink" title="三重积分"></a>三重积分</h3><ul>
<li>性质：保号性、中值定理</li>
<li>计算：直角坐标、柱坐标、球坐标，注意用合适的积分次序计算累次积分<ul>
<li>$ds=dx\cdot dy\cdot dz=dr\cdot rd\theta \cdot dz=rsin\varphi d\theta \cdot rd\varphi\cdot dr$</li>
</ul>
</li>
<li>技巧：和二重积分同理</li>
</ul>
<h3 id="交换累次积分"><a href="#交换累次积分" class="headerlink" title="交换累次积分"></a>交换累次积分</h3><ul>
<li>二重积分：根据积分上下限确定积分域、绘制草图、按另一种次序确定积分上下限</li>
<li>三重积分：相邻的俩个变量调换积分次序，转化为多遍二重积分的次序调换</li>
</ul>
<h2 id="曲线积分"><a href="#曲线积分" class="headerlink" title="曲线积分"></a>曲线积分</h2><h3 id="第一类曲线积分"><a href="#第一类曲线积分" class="headerlink" title="第一类曲线积分"></a>第一类曲线积分</h3><ul>
<li>先考虑几种情况的奇偶性和对称性，简化计算<ul>
<li>情况一：积分曲线关于坐标轴对称，被积函数有奇偶性</li>
<li>情况二：积分曲线关于$y=x$或$x=z$或$y=z$对称</li>
</ul>
</li>
<li>直接计算步骤（核心思路是$dl=\sqrt{d^2x+d^2y+d^2z}$）<ul>
<li>设曲线的方程$y=y(x),z=z(x)$<ul>
<li>说明每个$x$唯一对应着$y$和$z$，如果是参数式也要注意该点</li>
<li>不唯一对应时，需要拆分曲线为多个段</li>
</ul>
</li>
<li>$\int\limits_{L}f(x,y,z)dl=\int\limits_{L}f(x,y,z)\sqrt{d^2x+d^2y+d^2z}$</li>
<li>最后结果为$\int_{a}^bf(x,y,z)\sqrt{1+(y’(x))^2+(z’(x))^2}dx,a\leq x\leq b$</li>
</ul>
</li>
</ul>
<h3 id="第二类曲线积分"><a href="#第二类曲线积分" class="headerlink" title="第二类曲线积分"></a>第二类曲线积分</h3><ul>
<li>直接计算步骤（核心思路是计算$(P,Q,R)$到方向向量的投影）<ul>
<li>根据积分路径的方向，确定曲线的方向向量为$(i,j,k)$<ul>
<li>方向向量也可以用其方向余弦表示为$(cos\alpha,cos\beta,cos\gamma)$</li>
</ul>
</li>
<li>$\int\limits_LPdx+Qdy+Rdz=\int\limits_L(\frac{(P,Q,R)\cdot(i,j,k)}{|(i,j,k)|})dl$<ul>
<li>投影即数量积除以模</li>
<li>转化为第一类曲线积分</li>
</ul>
</li>
<li>教材的形式是$\int\limits_L(Pcos\alpha+Qcos\beta+Rcos\gamma)dl$<ul>
<li>本质一样的，但是不引入余弦，防止思路紊乱</li>
</ul>
</li>
</ul>
</li>
<li>斯托克斯公式<ul>
<li>$L$是空间光滑有向曲线，$\Sigma$是有向曲面，两者方向满足右手法则，且$P,Q,R$在$\Sigma$上有一阶连续偏导数</li>
<li>$\oint\limits_LPdx+Qdy+Rdz=\iint\limits_\Sigma(\frac{\partial R}{\partial y}-\frac{\partial Q}{\partial z})dydz+(\frac{\partial P}{\partial z}-\frac{\partial R}{\partial x})dzdx+(\frac{\partial Q}{\partial x}-\frac{\partial P}{\partial y})dxdy$<ul>
<li>转化为第二类曲面积分</li>
</ul>
</li>
</ul>
</li>
<li>格林公式<ul>
<li>斯托克斯公式的特殊情况，记忆即可，推导的思路顺序如下</li>
<li>第二类曲线积分$\rightarrow$第二类曲面积分$\rightarrow$第一类曲面积分$\rightarrow$二重积分</li>
</ul>
</li>
<li>$P,Q$在单连通域的上一阶连续可偏导，则下面是等价条件<ul>
<li>$\int Pdx+Qdy$和路径无关</li>
<li>沿着封闭光滑曲线的第二类积分为$0$</li>
<li>$\frac{\partial Q}{\partial y}-\frac{\partial P}{\partial x}=0$</li>
<li>存在可微函数$F(x,y)$使得$dF(x,y)=Pdx+Qdy$</li>
</ul>
</li>
<li>补形法结合格林公式（斯托克斯公式）<ul>
<li>当不是封闭曲线时，可以补成封闭曲线<ul>
<li>补后的整体用格林公式计算，补的形状用直接法计算</li>
</ul>
</li>
<li>当封闭曲线内有点不存在一阶连续偏导数，则可以补一个小的封闭曲线，把该点挖去<ul>
<li>补后的整体用格林公式计算，补的形状用直接法计算</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="曲面积分"><a href="#曲面积分" class="headerlink" title="曲面积分"></a>曲面积分</h2><h3 id="第一类曲面积分"><a href="#第一类曲面积分" class="headerlink" title="第一类曲面积分"></a>第一类曲面积分</h3><ul>
<li>先考虑几种情况的奇偶性和对称性，简化计算<ul>
<li>情况一：积分曲面关于坐标轴对称，被积函数有奇偶性</li>
<li>情况二：积分曲面关于$y=x$或$x=z$或$y=z$对称</li>
</ul>
</li>
<li>直接计算步骤（核心思路是$dS=\frac{dxdy}{|cos\gamma|}$或$dS=\sqrt{(dxdy)^2+(dydz)^2+(dzdx)^2}$）<ul>
<li>设曲面的方程$z=z(x,y)$，法向量为$(cos\alpha,cos\beta,cos\gamma)=\pm\frac{(-z’_x,-z’_y,1)}{\sqrt{(z’_x)^2+(z’_y)^2+1}}$<ul>
<li>说明每个$(x,y)$唯一对应着$z$，如果是参数式也要注意该点</li>
<li>不唯一对应时，需要拆分曲面为多个部分</li>
</ul>
</li>
<li>利用$\iint\limits_{\Sigma}f(x,y,z)dS=\iint\limits_{\Sigma}f(x,y,z)\frac{dxdy}{|cos\gamma|}$</li>
<li>或$\iint\limits_{\Sigma}f(x,y,z)dS=\iint\limits_{\Sigma}f(x,y,z)\sqrt{1+(\frac{dzdy}{dxdy})^2+(\frac{dzdx}{dydx})^2}dxdy$<ul>
<li>注意这里$\frac{dzdy}{dxdy}=\frac{\partial z}{\partial x}$与$\frac{dzdx}{dydx}=\frac{\partial z}{\partial y}$，不难记忆</li>
</ul>
</li>
<li>最后结果为$\iint\limits_{\Sigma_{xy}}f(x,y,z)\sqrt{1+(z’_x)^2+(z’_y)^2}dxdy$</li>
</ul>
</li>
</ul>
<h3 id="第二类曲面积分"><a href="#第二类曲面积分" class="headerlink" title="第二类曲面积分"></a>第二类曲面积分</h3><ul>
<li>直接计算步骤（核心思路是计算$(P,Q,R)$到法向量的投影）<ul>
<li>根据有向曲面的内外侧，确定曲面的法向量为$(i,j,k)$<ul>
<li>法向量也可以用其方向余弦表示为$(cos\alpha,cos\beta,cos\gamma)$</li>
</ul>
</li>
<li>$\iint\limits_\Sigma Pdydz+Qdxdz+Rdxdy=\iint\limits_\Sigma (\frac{(P,Q,R)\cdot(i,j,k)}{|(i,j,k)|})dS$<ul>
<li>投影即数量积除以模</li>
<li>转化为第一类曲线积分</li>
</ul>
</li>
<li>教材的形式是$\iint\limits_\Sigma(Pcos\alpha+Qcos\beta+Rcos\gamma)dS$<ul>
<li>本质一样的，但是不引入余弦，防止思路紊乱</li>
</ul>
</li>
</ul>
</li>
<li>高斯公式<ul>
<li>$\Sigma$是空间光滑有向曲面，$\Omega$是空间闭区域，有向曲面取外侧，且$P,Q,R$在$\Omega$上有一阶连续偏导数</li>
<li>$\iint\limits_\Sigma Pdydz+Qdxdz+Rdxdy=\iiint\limits_{\Omega}(\frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z})dV$<ul>
<li>转化为三重积分</li>
</ul>
</li>
</ul>
</li>
<li>补形法结合高斯公式<ul>
<li>当不是封闭曲面时，可以补成封闭曲线<ul>
<li>补后的整体用高斯公式计算，补的形状用直接法计算</li>
</ul>
</li>
<li>当封闭曲面内有点不存在一阶连续偏导数，则可以补一个小的封闭曲面，把该点挖去<ul>
<li>补后的整体用高斯公式计算，补的形状用直接法计算</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="场论初步"><a href="#场论初步" class="headerlink" title="场论初步"></a>场论初步</h2><p>设向量场是$\pmb{A}=(P,Q,R)$,有向曲面为$\Sigma$</p>
<ul>
<li>通量<ul>
<li>即第二类曲面积分求解</li>
<li>$\Phi=\iint\limits_{\Sigma}Pdydz+Qdzdx+Rdxdy$</li>
</ul>
</li>
<li>散度<ul>
<li>即高斯公式右侧的数值</li>
<li>$div\pmb{A}=\frac{\partial P}{\partial x}+\frac{\partial Q}{\partial y}+\frac{\partial R}{\partial z}$</li>
</ul>
</li>
<li>旋度<ul>
<li>即斯托克斯公式右侧的向量</li>
<li>$\pmb{rotA}=(\frac{\partial R}{\partial y}-\frac{\partial Q}{\partial z},\frac{\partial P}{\partial z}-\frac{\partial R}{\partial x},\frac{\partial Q}{\partial x}-\frac{\partial P}{\partial y})$</li>
</ul>
</li>
</ul>
<h2 id="多元积分的应用"><a href="#多元积分的应用" class="headerlink" title="多元积分的应用"></a>多元积分的应用</h2><ul>
<li>质心<ul>
<li>$\overline{x}=\frac{\sum xdm}{\sum dm}$</li>
</ul>
</li>
<li>转动惯量<ul>
<li>$I=\sum r^2dm$</li>
</ul>
</li>
<li>做功<ul>
<li>设力场是$\pmb{F}=(P,Q,R)$,有向曲线为$L$</li>
<li>做功为$W=\int\limits_LPdx+Qdy+Rdz$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第七章-无穷级数</title>
    <url>/2021/12/11/calculus7/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="理解铺垫"><a href="#理解铺垫" class="headerlink" title="理解铺垫"></a>理解铺垫</h2><ul>
<li>无穷级数和数列的区别<ul>
<li>无穷级数本质是<strong>一个</strong>数，这个数的表达形式是<strong>无穷个</strong>数的和（加号连接每一项）</li>
<li>数列本质是<strong>无穷个</strong>数，这无穷个数的表达形式是<strong>无穷个</strong>数的排列（逗号连接每一项）</li>
</ul>
</li>
<li>无穷级数和数列的联系<ul>
<li>两者存在1对1的映射关系，级数和数列的第n项指的是同一个数</li>
<li>经常用数列中的理论解决无穷级数问题。比如：级数收敛等价于，级数所对应数列的前n项和（也是一个数列）在无穷处收敛</li>
<li><strong>后面在表述中，在没有歧义的情况下，把“级数所对应数列”表述为“数列”</strong></li>
</ul>
</li>
</ul>
<h2 id="常数项级数"><a href="#常数项级数" class="headerlink" title="常数项级数"></a>常数项级数</h2><h3 id="正项级数敛散性"><a href="#正项级数敛散性" class="headerlink" title="正项级数敛散性"></a>正项级数敛散性</h3><p>思考顺序和相关定理：</p>
<ul>
<li>收敛定义：适合任意级数<ul>
<li>数列的和收敛，则级数收敛</li>
<li>若考虑正项级数，则数列的前n项和数列是单调增的，下一步可以考虑上界是否存在</li>
</ul>
</li>
<li>收敛必要条件：适合任意级数<ul>
<li>数列不收敛，则级数不收敛</li>
</ul>
</li>
<li>比值判别法：适合正项级数，使用范围小，判定方便，优先考虑<ul>
<li>若第n+1项比第n项的极限小于1，级数收敛</li>
<li>若第n+1项比第n项的极限大于1，级数发散</li>
<li>若第n+1项比第n项的极限等于1，不确定敛散性</li>
</ul>
</li>
<li>根植判别法：适合正项级数，使用范围小，判定方便，优先考虑<ul>
<li>若第n项开n次根号的极限小于1，级数收敛</li>
<li>若第n项开n次根号的极限大于1，级数发散</li>
<li>若第n项开n次根号的极限等于1，不确定敛散性</li>
</ul>
</li>
<li>比较判别法：适合正项级数，使用范围大，判定不方便（需要构造新级数），次优考虑<ul>
<li>已知每一项更大的正项级数收敛（如$\sum_{n=1}^{\infty} \frac{1}{n^2}$），则级数收敛</li>
<li>已知每一项更小的正项级数发散（如$\sum_{n=1}^{\infty} \frac{1}{n}$），则级数发散</li>
</ul>
</li>
<li>比较判别法极限形式：适合正项级数，使用范围大，判定不方便（需要构造新级数），次优考虑<ul>
<li>若极限情况的项比值为常数，则同敛散性</li>
<li>若极限情况的项比值为无穷（即分子更大），分子级数收敛，则分母级数收敛</li>
<li>若极限情况的项比值为0（即分子更小），分子级数发散，则分母级数发散</li>
</ul>
</li>
<li>积分判别法：适合正项级数<ul>
<li>找到数列所对应的函数</li>
<li>级数敛散性 = 数列和的敛散性 = 函数积分的敛散性</li>
<li>第一个等号的本质是收敛定义，第二个等号的本质是在定义法求积分的过程使用夹逼定理</li>
</ul>
</li>
</ul>
<h3 id="交错级数敛散性"><a href="#交错级数敛散性" class="headerlink" title="交错级数敛散性"></a>交错级数敛散性</h3><ul>
<li>莱布尼兹判别准则法（收敛充分条件）：适合交错级数<ul>
<li>数列项的绝对值递减，极限处等于0</li>
</ul>
</li>
<li>绝对收敛法（收敛充分条件）：适合任意级数<ul>
<li>每一项取绝对值后的级数收敛（绝对收敛），则原级数收敛</li>
<li>之所以是充分条件，考虑到原级数收敛，不一定就绝对收敛，也可能条件收敛</li>
</ul>
</li>
<li>加括号法（收敛必要条件）：适合任意级数，但主要应用于交错级数<ul>
<li>加括号后的级数发散，则原级数发散</li>
</ul>
</li>
<li>正项负项法：适合任意级数、交错级数<ul>
<li>考虑把级数拆分为正项的和、负项的和两个子级数</li>
<li>两个都收敛，则原级数绝对收敛</li>
<li>两个都发散，则原级数条件收敛或发散</li>
<li>一个收敛，一个发散，则原级数发散</li>
</ul>
</li>
</ul>
<h3 id="任意项级数敛散性"><a href="#任意项级数敛散性" class="headerlink" title="任意项级数敛散性"></a>任意项级数敛散性</h3><ul>
<li>前面分析的适合任意级数的方法都可以使用</li>
</ul>
<h3 id="证明题和综合题"><a href="#证明题和综合题" class="headerlink" title="证明题和综合题"></a>证明题和综合题</h3><ul>
<li>基本思路：从定义出发分析，可以使用前面的级数敛散性判定方法</li>
<li>常用定理：数列的单调有界定理、夹逼定理</li>
<li>冷僻结论：数列的极限 = 数列前n项平均值的极限</li>
<li>常考题型：<ul>
<li>问题：给出数列递推式，求收敛值</li>
<li>方法<ul>
<li>首先证明收敛性，比如用数列单调有界定理</li>
<li>然后求收敛情况下可能的收敛值，一般是取极限、解方程</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="函数项级数"><a href="#函数项级数" class="headerlink" title="函数项级数"></a>函数项级数</h2><h3 id="理解铺垫-1"><a href="#理解铺垫-1" class="headerlink" title="理解铺垫"></a>理解铺垫</h3><ul>
<li>函数项级数的理解：<ul>
<li>常数项级数可以理解为一个常数</li>
<li>函数项级数，也<strong>可以理解为</strong>一个函数（一个x映射到唯一的常数项级数）</li>
</ul>
</li>
<li>收敛域的理解<ul>
<li>x取某值时，所映射的级数收敛，该值为收敛点</li>
<li>收敛域是所有收敛点的集合</li>
</ul>
</li>
<li>函数和函数项级数的关系<ul>
<li>在收敛域上，x可以映射到唯一的一个数，此时函数项级数<strong>就是</strong>函数，叫做和函数，两者只是表达形式有所不同，值相同</li>
<li>函数项级数是和函数在收敛域上的展开</li>
<li>和函数是函数项级数在收敛域上的和值</li>
</ul>
</li>
</ul>
<h3 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h3><ul>
<li>收敛半径R：x大于R，幂级数发散；x小于R幂级数绝对收敛；x等于R单独考虑敛散性</li>
<li>收敛区间<ul>
<li>定义：(-R，R)，不包括收敛半径的端点，开区间</li>
<li>求法：幂级数取绝对值，用正项级数比较判别法或根值判别法进行分析</li>
<li>作用：幂级数$\sum_{n=1}^\infty a_nx^{n}$的和函数$S(x)$在收敛区间上<ul>
<li>连续</li>
<li>可导且可逐项求导，即$S’(x)=\sum_{n=1}^\infty na_nx^{n-1}$</li>
<li>可积分（从0到x）且可逐项积分，即$\int_0^x S(t)dt=\sum_{n=1}^\infty \frac{a_n}{n+1}x^{n+1}$</li>
</ul>
</li>
<li>收敛区间是不包括端点的，如果要考虑幂级数的和函数从0到R是否可以逐项积分，则要求<ul>
<li>和函数的原函数左连续性：和函数从0到R积分 = 和函数从0到极限接近R处的积分</li>
<li>幂级数逐项积分后的级数收敛性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="泰勒级数"><a href="#泰勒级数" class="headerlink" title="泰勒级数"></a>泰勒级数</h3><ul>
<li>泰勒级数泰勒中值定理的区别是<ul>
<li>前者把函数展开为无穷项</li>
<li>后者把函数展开为有穷项+带$\xi$余项的形式</li>
</ul>
</li>
<li>要记住常见麦克劳林级数<ul>
<li>$(1+x)^k=1+kx+\frac{k(k-1)}{2!}x^2+\cdots$<ul>
<li>记忆方法：当k为正整数时就是二项式展开</li>
<li>收敛区间：建议记住为$(-1,1)$，收敛域取决于$k$</li>
</ul>
</li>
<li>$\frac{1}{1-x}=1+x+x^2+\cdots$<ul>
<li>记忆方法：其实是$(1+x)^k=1+kx+\frac{k(k-1)}{2!}x^2+\cdots$一种特例</li>
<li>收敛域：$(-1,1)$</li>
</ul>
</li>
<li>$\frac{1}{1+x}=1-x+x^2-\cdots$<ul>
<li>记忆方法：其实是$(1+x)^k=1+kx+\frac{k(k-1)}{2!}x^2+\cdots$一种特例</li>
<li>收敛域：$(-1,1)$</li>
</ul>
</li>
<li>$ln(1+x)=x-\frac{x^2}{2}+\frac{x^3}{3}-\cdots$<ul>
<li>记忆方法：$\frac{1}{1+x}=1-x+x^2-\cdots$进行逐项积分</li>
<li>收敛域：$(-1,1]$</li>
</ul>
</li>
<li>$e^x=1+x+\frac{x^2}{2!}+\cdots$<ul>
<li>记忆方法：本条开始全是<strong>带阶乘的形式</strong>且收敛域都是双无穷区间，可以通过$e^x$和$1+x$的等价无穷小关系联想</li>
<li>收敛域：$(-\infty,+\infty)$</li>
</ul>
</li>
<li>$cosx=1-\frac{x^2}{2!}+\frac{x^4}{4!}-\cdots$<ul>
<li>记忆方法：通过$cosx$和$1-\frac{x}{2!}$等价无穷小联想</li>
<li>收敛域：$(-\infty,+\infty)$</li>
</ul>
</li>
<li>$sinx=x-\frac{x^3}{3!}+\frac{x^5}{5!}-\cdots$<ul>
<li>记忆方法：记住了$cosx$的展开，不难联想$sinx$的展开</li>
<li>收敛域：$(-\infty,+\infty)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="幂级数的收敛域"><a href="#幂级数的收敛域" class="headerlink" title="幂级数的收敛域"></a>幂级数的收敛域</h3><ul>
<li>先求收敛区间（收敛半径），前面已经提到过</li>
<li>再考虑端点敛散性</li>
</ul>
<h3 id="幂级数展开"><a href="#幂级数展开" class="headerlink" title="幂级数展开"></a>幂级数展开</h3><ul>
<li>不推荐用泰勒级数直接展开</li>
<li>用前面的7个常用麦克劳林级数进行配凑</li>
<li>配凑方法有<ul>
<li>级数每一项同时提出一个x或凑出一个x</li>
<li>逐项求导或逐项积分，需要对导数表和积分表熟悉</li>
</ul>
</li>
</ul>
<ul>
<li>配凑的注意事项<ul>
<li>注意各常用麦克劳林级数的首项，防止下标开始位置出错 </li>
<li>注意考虑麦克劳林级数的收敛域  </li>
<li>注意配凑时除以x，要讨论x为0的情况，否则定义域有问题</li>
<li>注意级数在和式中如果有$x^0$的项，一律按$x^0=1$处理，哪怕是$x=0$的情况也按$0^0=1$处理</li>
</ul>
</li>
</ul>
<ul>
<li>默认情况需要给出收敛域</li>
</ul>
<h3 id="函数在某点的高阶导数"><a href="#函数在某点的高阶导数" class="headerlink" title="函数在某点的高阶导数"></a>函数在某点的高阶导数</h3><ul>
<li>使用幂级数展开</li>
<li>低阶项求导后为0</li>
<li>题目往往设置某点的值，恰好使得高阶项全部为0</li>
</ul>
<h3 id="级数求和"><a href="#级数求和" class="headerlink" title="级数求和"></a>级数求和</h3><ul>
<li>常数项级数求和<ul>
<li>数列求和直接计算</li>
<li>利用常用麦克劳林展开进行配凑（如级数每一项提出x、凑x、逐项积分、逐项求导等），需要思考哪个常数部分是x，要求常数在收敛域范围内</li>
</ul>
</li>
<li>函数项级数求和：核心还是配凑，如级数每一项提出x、凑x、逐项积分、逐项求导等</li>
</ul>
<h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h2><h3 id="理解铺垫-2"><a href="#理解铺垫-2" class="headerlink" title="理解铺垫"></a>理解铺垫</h3><ul>
<li>傅里叶级数指的是把周期函数展开为每一项为正余弦的三角级数</li>
<li>因为和函数是周期函数，展开的每一项也是周期函数，所以实际问题中往往只需要考虑一个周期的展开即可（很多教材没有指明这个点，很容易造成迷惑）</li>
<li>因为只需要考虑一个周期，一般选择关于原点对称的区间，方便计算。即使问题不是问原点对称区间的情况，也可以先计算原点对称区间的展开，然后补充一个利用函数周期性的步骤</li>
<li>一般考虑周期为$2\pi$和$2l$两个情况</li>
</ul>
<h3 id="傅里叶级数的收敛性"><a href="#傅里叶级数的收敛性" class="headerlink" title="傅里叶级数的收敛性"></a>傅里叶级数的收敛性</h3><ul>
<li>课本的狄利克雷定理对周期函数一个周期上的连续情况进行讨论</li>
<li>实际上可以在实数域上考虑，定理等价精简为<ul>
<li>如果周期函数一个周期内只有有限个第一类间断点（跳跃、可去）和有限个极值点，则函数的傅里叶级数收敛</li>
<li>在周期函数连续处，傅里叶级数收敛于周期函数</li>
<li>在周期函数间断处，傅里叶级数收敛于间断两侧的平均值</li>
</ul>
</li>
</ul>
<h3 id="周期函数的傅里叶展开"><a href="#周期函数的傅里叶展开" class="headerlink" title="周期函数的傅里叶展开"></a>周期函数的傅里叶展开</h3><ul>
<li>$f(x)\sim \frac{a_0}{2}+\sum_{n=1}^\infty [a_ncos(\frac{\pi nx}{l})+b_nsin(\frac{\pi nx}{l})]$</li>
<li>$a_n=\frac{1}{l}\int_{-l}^{l}f(x)cos(\frac{\pi nx}{l})dx$</li>
<li>$b_n=\frac{1}{l}\int_{-l}^{l}f(x)sin(\frac{\pi nx}{l})dx$</li>
<li>这里之所以用$\sim$而不是$=$，因为周期函数在间断点不等于傅里叶级数</li>
<li>需要根据周期函数，分析傅里叶级数的收敛性，如果级数收敛且没有间断点，$\sim$可以改写成$=$</li>
<li>利用奇偶展开来辅助理解和记忆<ul>
<li>如果$f(x)$是偶函数<ul>
<li>则$f(x)sin(\frac{\pi nx}{l})$为奇函数</li>
<li>则$b_n=0$</li>
<li>则$f(x)\sim \frac{a_0}{2}+\sum_{n=1}^\infty a_ncos(\frac{\pi nx}{l})$</li>
<li>则级数的每一项都是偶函数余弦</li>
<li>傅里叶偶展开又叫傅里叶余弦展开</li>
</ul>
</li>
<li>如果$f(x)$是奇函数<ul>
<li>则$f(x)cos(nx)$为奇函数</li>
<li>则$a_n=0$</li>
<li>则$f(x)\sim \sum_{n=1}^\infty b_nsin(\frac{\pi nx}{l})$</li>
<li>则级数的每一项都是奇函数正弦</li>
<li>傅里叶奇展开又叫傅里叶正弦展开</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="周期函数的拓展"><a href="#周期函数的拓展" class="headerlink" title="周期函数的拓展"></a>周期函数的拓展</h3><ul>
<li>奇偶拓展（正余弦展开）：如果已知一个定义在原点单侧的区间上的函数，对其进行傅里叶奇展开或偶展开的步骤为<ul>
<li>先把该函数当奇函数或偶函数拓展</li>
<li>再用周期函数性质把该函数拓展到整个R区间内</li>
<li>最后对该周期函数进行傅里叶展开并分析收敛性（$\sim$看情况改写为$=$）</li>
</ul>
</li>
<li>任意区间拓展：如果已知一个定义在非原点对称区间上的函数，对其进行傅里叶展开的步骤为<ul>
<li>利用周期函数性质把该函数拓展到整个R区间内</li>
<li>对该周期函数傅里叶展开并分析收敛性（$\sim$看情况改写为$=$）</li>
<li>回答在给定区间上的展开情况（用$=$连接函数和傅里叶级数）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第八章-常微分方程</title>
    <url>/2021/12/11/calculus8/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="可分离变量微分方程"><a href="#可分离变量微分方程" class="headerlink" title="可分离变量微分方程"></a>可分离变量微分方程</h2><ul>
<li>形式：$y$和$x$可分离到等式两侧</li>
<li>方法：分离变量至两次后，两端积分即可</li>
</ul>
<h2 id="齐次微分方程"><a href="#齐次微分方程" class="headerlink" title="齐次微分方程"></a>齐次微分方程</h2><ul>
<li>形式：$\frac{dy}{dx}=f(\frac{y}{x})$</li>
<li>思路：换元令$t=\frac{y}{x}$</li>
<li>注意：所有的换元操作在解出微分方程后都需要把原变量带回去，结果中的变量必须是原始的</li>
</ul>
<h2 id="一阶线性方程"><a href="#一阶线性方程" class="headerlink" title="一阶线性方程"></a>一阶线性方程</h2><ul>
<li>形式：$\frac{dy}{dx}+P(x)y=Q(x)$</li>
<li>思路<ul>
<li>背公式$y=e^{-\int P(x)dx}\times(\int Q(x)e^{\int P(x)dx}dx+C)$</li>
<li>注意：因为是一阶微分方程，只带一个常数C，公式中的不定积分不需要带上常数</li>
</ul>
</li>
</ul>
<h2 id="伯努利方程"><a href="#伯努利方程" class="headerlink" title="伯努利方程"></a>伯努利方程</h2><ul>
<li>形式：$\frac{dy}{dx}+P(x)y=Q(x)y^n$</li>
<li>思路<ul>
<li>换元令$u=y^{1-n},du=(1-n)y^{-n}dy$</li>
<li>替换掉原式的$dy$即可转化为一阶线性方程</li>
</ul>
</li>
</ul>
<h2 id="全微分方程"><a href="#全微分方程" class="headerlink" title="全微分方程"></a>全微分方程</h2><ul>
<li>形式$P(x,y)dx+Q(x,y)dy=0$，$P,Q$有一阶连续偏导数，且$\frac{\partial P}{\partial y}=\frac{\partial Q}{\partial x}$</li>
<li>思路：凑积分或偏积分求全微分的原函数，$P(x,y)dx+Q(x,y)dy=du(x,y)=0$</li>
</ul>
<h2 id="对称情况"><a href="#对称情况" class="headerlink" title="对称情况"></a>对称情况</h2><ul>
<li>形式：有可能出现$x$和$y$的位置对调的情况</li>
<li>思路：把$y$当$x$，$x$当$y$来处理即可</li>
</ul>
<h2 id="可降阶的高阶微分方程"><a href="#可降阶的高阶微分方程" class="headerlink" title="可降阶的高阶微分方程"></a>可降阶的高阶微分方程</h2><ul>
<li>一般只有三种形式<ul>
<li>$y^{(n)}=f(x)$</li>
<li>$y’’=f(x,y’)$</li>
<li>$y’’=f(y,y’)$</li>
</ul>
</li>
<li>思路分别对应如下<ul>
<li>反复积分降阶</li>
<li>换元令$y’=u,y’’=\frac{du}{dx}$，降阶为$u$和$x$的一阶方程$\frac{du}{dx}=f(x,u)$</li>
<li>换元令$y’=u,y’’=\frac{du}{dx}=\frac{du}{dy}\frac{dy}{dx}=\frac{du}{dy}u$，降阶为$u$和$y$一阶方程$\frac{du}{dy}u=f(y,u)$</li>
</ul>
</li>
</ul>
<h2 id="线性方程解的结构"><a href="#线性方程解的结构" class="headerlink" title="线性方程解的结构"></a>线性方程解的结构</h2><ul>
<li>齐次方程<ul>
<li>方程的阶数即线性无关的解个数</li>
<li>通解：阶数个线性无关的解的线性组合</li>
</ul>
</li>
<li>非齐次方程：非齐次方程的通解 = 非齐次方程的一个特解 + 对应齐次方程的通解</li>
<li>叠加原理<ul>
<li>用的比较少</li>
<li>指的是，已知两个非齐次微分方程的特解$y_1,y_2$，则把两个非齐次方程右侧的x多项式相加后得到的非齐次方程的特解是$y_1+y_2$</li>
<li>不用背，按定义很容易推导</li>
</ul>
</li>
</ul>
<h2 id="线性常系数齐次方程"><a href="#线性常系数齐次方程" class="headerlink" title="线性常系数齐次方程"></a>线性常系数齐次方程</h2><ul>
<li>形式：$y^{(n)}+p_1y^{(n-1)}+\cdots+p_{n-1}y’+p_ny=0$</li>
<li>求解步骤<ul>
<li>解特征方程$y^{n}+p_1y^{n-1}+\cdots+p_{n-1}y+p_n=0$（即k阶导换成k次方）</li>
<li>每一重实根对应着一个线性无关的解，每一重<strong>复根对</strong>对应两个线性无关的解，对应如下</li>
<li>单实根$r$<ul>
<li>$Ce^{rx}$</li>
</ul>
</li>
<li>$k$重实根$r$<ul>
<li>$(C_1+C_2x+\cdots+C_kx^{k-1})e^{rx}$</li>
</ul>
</li>
<li>单重复根对$a\pm bi$<ul>
<li>$[C_1cos(bx)+C_2sin(bx)]e^{ax}$</li>
</ul>
</li>
<li>k重复根对$a\pm bi$<ul>
<li>$[(C_1+C_2x+\cdots+C_kx^{k-1})cos(bx)+(D_1+D_2x+\cdots+D_kx^{k-1})sin(bx)]e^{ax}$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="线性常系数非齐次方程"><a href="#线性常系数非齐次方程" class="headerlink" title="线性常系数非齐次方程"></a>线性常系数非齐次方程</h2><ul>
<li>形式：$y^{(n)}+p_1y^{(n-1)}+\cdots+p_{n-1}y’+p_ny=f(x)$</li>
<li>求解步骤<ul>
<li>解对应齐次方程的通解</li>
<li>寻找一个非齐次方程的特解</li>
<li>利用线性方程解的结构，非齐次方程特解 + 齐次方程通解 = 非齐次方程通解</li>
</ul>
</li>
<li>非齐次方程特解求解方法<ul>
<li>已知$f(x)=e^{ax}[P_m(x)cos(bx)+P_n(x)sin(bx)]$</li>
<li>$P_m$和$P_n$是两个给定的$m$次、$n$次多项式</li>
<li>设特解为$y^\star=x^ke^{ax}[Q_l(x)cos(bx)+R_l(x)sin(bx)]$</li>
<li>$k$为特征方程的复根对$a\pm bi$的重数</li>
<li>$l=\max\{m,n\}$</li>
<li>$Q_l$和$R_l$是两个待定系数的$l$次多项式</li>
<li>特解待定系数带入原微分方程，算出特解</li>
</ul>
</li>
</ul>
<h2 id="欧拉方程"><a href="#欧拉方程" class="headerlink" title="欧拉方程"></a>欧拉方程</h2><ul>
<li>形式：$x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+p_2x^{n-2}y^{(n-2)}+\cdots+p_{n-1}y=f(x)$</li>
<li>思路<ul>
<li>这是$y$关于$x$线性微分方程，但不是常系数</li>
<li>设$t=lnx$，则$x^ky^{(k)}=D(D-1)\cdots(D-k+1)y$，$D=\frac{d}{dt}$</li>
<li>上面一条把$y$关于$x$的$k$阶导数换成了$y$关于$t$的$k$的阶导数。推导不难，但步骤比较繁琐，可以推但没必要，建议背下来直接使用。</li>
<li>换元后变成关于$y$关于$t$的线性常系数微分方程，用前面的方法求解</li>
<li>求解后把$t$换回$x$</li>
</ul>
</li>
</ul>
<h2 id="已知通解求方程"><a href="#已知通解求方程" class="headerlink" title="已知通解求方程"></a>已知通解求方程</h2><ul>
<li>根据通解$y$，求出$y’$和$y’’$</li>
<li>消去上面的常量即可得到微分方程</li>
</ul>
<h2 id="微分方程应用题"><a href="#微分方程应用题" class="headerlink" title="微分方程应用题"></a>微分方程应用题</h2><ul>
<li>根据题干条件思考变量之间的微分关系</li>
<li>列出微分方程</li>
<li>求解微分方程</li>
</ul>
]]></content>
      <categories>
        <category>微积分</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 电路的基本定律</title>
    <url>/2022/04/12/circuit-analysis-1/</url>
    <content><![CDATA[<h2 id="电路模型"><a href="#电路模型" class="headerlink" title="电路模型"></a>电路模型</h2><ul>
<li>电路<ul>
<li>电器件互相连接构成的电流通路</li>
<li>一定包括电源、负载、导线</li>
</ul>
</li>
<li>电路功能<ul>
<li>能量产生、传输、转换</li>
<li>对信号发射、接收、传输、处理</li>
</ul>
</li>
<li>理想电器元件模型<ul>
<li>理想电阻元件<ul>
<li>只消耗电能，如电阻器、灯泡、电炉</li>
</ul>
</li>
<li>理想电容元件<ul>
<li>只存储电脑，如各种电容器</li>
</ul>
</li>
<li>理想电感元件<ul>
<li>只存储磁能，如各种电感线圈</li>
</ul>
</li>
</ul>
</li>
<li>电路模型（电路图）<ul>
<li>把实际电路的各个器件用器件模型表示，按原方式连接</li>
<li>电路理论研究的对象都是电路模型，是实际电路的抽象</li>
<li>一个实际电路可能有多个电路模型</li>
</ul>
</li>
</ul>
<h2 id="电路分类"><a href="#电路分类" class="headerlink" title="电路分类"></a>电路分类</h2><ul>
<li>集总参数电路（lumped circuit）和分布式参数电路（distributed circuit）<ul>
<li>前者的电路尺寸远小于电磁波波长，此时认为电路各处电磁能量同时到达，电路为电磁空间一个点，导线上的电流处处相等</li>
<li>反之为后者</li>
</ul>
</li>
<li>线性电路（linear circuit）和非线性电路（nonlinear circuit）<ul>
<li>描述前者的方程都是线性的代数或者微分方程，完全由线性元件、独立源、线性受控源构成</li>
<li>反之为后者，更普遍</li>
</ul>
</li>
<li>时不变电路（time-invariant circuit）和时变电路（time-varying circuit）<ul>
<li>前者的元件参数值不随时间变化，描述的方程是常系数的代数或微积分方程</li>
<li>反之为后者</li>
</ul>
</li>
<li>动态电路（dynamic circuit）和电阻电路（resistance circuit）<ul>
<li>前者含有储能元件，如电感或电容，描述方程为微积分方程</li>
<li>反之为后者，描述方程为代数方程</li>
</ul>
</li>
<li>有源电路（active circuit）和无源电路（passive circuit）<ul>
<li>某种情况能对外提供能量为前者</li>
<li>任何情况都不能对外提供能量为后者</li>
</ul>
</li>
</ul>
<h2 id="电路变量"><a href="#电路变量" class="headerlink" title="电路变量"></a>电路变量</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>基本变量<ul>
<li>电流</li>
<li>电压</li>
</ul>
</li>
<li>复合变量<ul>
<li>功率</li>
<li>能量</li>
</ul>
</li>
</ul>
<h3 id="电流变量"><a href="#电流变量" class="headerlink" title="电流变量"></a>电流变量</h3><ul>
<li>电流的形成<ul>
<li>电荷在电场力作用下有规则的定向移动</li>
</ul>
</li>
<li>电流强度$i(t)$<ul>
<li>单位时间内通过导体横截面的电荷量，单位安培（A）</li>
<li>$i(t)=\frac{dq(t)}{dt}$</li>
</ul>
</li>
<li>电流方向：正电荷运动的方向<ul>
<li>实际方向：正电荷运动的方向</li>
<li>参考方向：电路图中所假定正电荷运动的方向（若计算的结果为正，则参考方向就是实际方向，反之参考方向为实际方向的反方向）</li>
<li>电路图的电流方向标注<ul>
<li>$i_{ab}$表示电流参考方向为从$a$到$b$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="电压变量"><a href="#电压变量" class="headerlink" title="电压变量"></a>电压变量</h2><ul>
<li>电压定义<ul>
<li>$u(t)=\frac{dW}{dq}$，单位伏特（V）</li>
</ul>
</li>
<li>电压极性（方向）<ul>
<li>实际电压<ul>
<li>高电位为”+”极，低电位为”-“极，两点电位降低的方向是电压的方向</li>
</ul>
</li>
<li>参考极性<ul>
<li>假设电压的”+”极和”-“极</li>
</ul>
</li>
<li>关联参考方向<ul>
<li>选取的参考电流方向和参考电压方向一致，则称电压u和电流i对该元件是<strong>参考方向关联的</strong></li>
</ul>
</li>
<li>电路图的电压极性标注<ul>
<li>$u_{ab}$表示电压$a$端为”+”极，$b$端为”-“极</li>
<li>若不标注电压参考方向，则认为与电流参考方向关联</li>
</ul>
</li>
<li>直流电流和直流电压<ul>
<li>大小和方向都不随时间变化的电流和电压</li>
<li>I和U表示</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="功率"><a href="#功率" class="headerlink" title="功率"></a>功率</h2><ul>
<li>定义<ul>
<li>单位时间电场力所做的功，单位瓦（W）</li>
<li>$p(t)=\frac{dW(t)}{dt}$</li>
</ul>
</li>
<li>与电压和电流的关系（以关联电路为例）<ul>
<li>$p(t)=\frac{dW(t)}{dq}frac{dq}{dt}=u(t)i(t)$<ul>
<li>若$p&gt;0$则电路消耗（吸收）功率</li>
<li>若$p&lt;0$则电路产生（发出）功率</li>
<li>因此上式为消耗功率公式，而$p=-u(t)i(t)$为产生功率公式</li>
</ul>
</li>
</ul>
</li>
<li>额定功率<ul>
<li>为了设备安全设置的功率限额</li>
</ul>
</li>
<li>能量计算<ul>
<li>$w(t)=\int_{-\infty}^tp(\xi)d\xi$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>电路分析</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 程序设计基础知识</title>
    <url>/2022/02/24/cpp-1/</url>
    <content><![CDATA[<h2 id="程序的本质"><a href="#程序的本质" class="headerlink" title="程序的本质"></a>程序的本质</h2><ul>
<li>程序 = 算法 + 数据结构</li>
<li>程序用<strong>数据类型</strong>描述数据，用<strong>流程控制语句</strong>实现算法</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>值集：规定数据类型包含的值和值结构</li>
<li>操作集：规定对值集的值的运算</li>
<li>区分数据类型便于检查合法性<ul>
<li>静态类型语言：编译时检查数据类型</li>
<li>动态类型语言：运行时检查数据类型</li>
</ul>
</li>
</ul>
<h2 id="c-数据类型"><a href="#c-数据类型" class="headerlink" title="c++数据类型"></a>c++数据类型</h2><ul>
<li>基本数据类型<ul>
<li>int、short、long</li>
<li>float、double</li>
<li>char</li>
<li>bool</li>
</ul>
</li>
<li>构造数据类型<ul>
<li>枚举</li>
<li>数组</li>
<li>结构</li>
<li>联合</li>
<li>指针</li>
<li>引用</li>
</ul>
</li>
</ul>
<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ul>
<li>顺序执行：表达式、空语句、复合语句</li>
<li>选择执行：if、switch</li>
<li>循环执行：for、while、do-while<ul>
<li>计数循环</li>
<li>事件循环</li>
</ul>
</li>
<li>无条件转移：goto、break、continue</li>
</ul>
<h2 id="过程抽象"><a href="#过程抽象" class="headerlink" title="过程抽象"></a>过程抽象</h2><ul>
<li>隐藏实现细节，使用者只需要知道相应的功能</li>
<li>函数调用实现过程抽象</li>
</ul>
<h2 id="程序在内存的分配"><a href="#程序在内存的分配" class="headerlink" title="程序在内存的分配"></a>程序在内存的分配</h2><ul>
<li>静态数据区<ul>
<li>全局变量、static局部变量、常量</li>
<li>默认初始化为0</li>
</ul>
</li>
<li>代码区</li>
<li>栈区<ul>
<li>auto局部变量</li>
</ul>
</li>
<li>堆区<ul>
<li>动态变量</li>
</ul>
</li>
</ul>
<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><ul>
<li>函数在函数体中直接或间接调用自己</li>
<li>递归条件、结束条件</li>
</ul>
<h2 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h2><ul>
<li>引用直接访问实参（相当于别名），指针间接访问实参</li>
<li>引用只能访问实参，不能再引用其他变量，但指针可以通过修改地址访问实参以外的数据</li>
<li>可以使用引用实现的指针功能，尽量用引用实现</li>
<li>可以用const指针实现引用参数的功能<ul>
<li>比如int * const p，此时p不可修改</li>
</ul>
</li>
<li>const int 表示不可修改的整型</li>
<li>const int* const p 表示不可修改的整型的指针，且该指针也不可修改</li>
<li>返回值也可以是引用类型，但是不应该返回局部变量的引用</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>静态表示</li>
<li>动态表示<ul>
<li>动态数组</li>
<li>链表</li>
</ul>
</li>
</ul>
<h2 id="编译预处理命令"><a href="#编译预处理命令" class="headerlink" title="编译预处理命令"></a>编译预处理命令</h2><ul>
<li>文件包含命令 #include<ul>
<li>全局函数和全局变量的定义放在源文件，声明放在头文件</li>
</ul>
</li>
<li>宏定义 #define</li>
<li>条件编译命令 <ul>
<li>避免重复定义</li>
<li>基于多环境的程序编制（windows、unix、mac）</li>
<li>开发阶段的调试信息</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 Counting</title>
    <url>/2021/03/09/combinatorics-1/</url>
    <content><![CDATA[<h2 id="Double-Counting-Principle"><a href="#Double-Counting-Principle" class="headerlink" title="Double Counting Principle"></a>Double Counting Principle</h2><h3 id="数学含义"><a href="#数学含义" class="headerlink" title="数学含义"></a>数学含义</h3><p>$\sum_{i=1}^m\sum_{j=1}^n A[i][j]=\sum_{j=1}^n\sum_{i=1}^m A[i][j]$</p>
<h3 id="lemma定理："><a href="#lemma定理：" class="headerlink" title="lemma定理："></a>lemma定理：</h3><p>$\sum\limits_{v\in V}deg(v)=2|E|$</p>
<p><strong>lemma定理的证明</strong>:定义一个矩阵，行是顶点，列是边，当一个顶点是边的端点，则矩阵对应位置为1。使用double counting principle即可证得lemma定理。</p>
<p><strong>lemma定理的推论</strong>：奇度顶点有偶数个</p>
]]></content>
      <categories>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 数据抽象与封装</title>
    <url>/2022/02/26/cpp-2/</url>
    <content><![CDATA[<ul>
<li>数据抽象<ul>
<li>数据的使用者只需要知道对数据的操作和操作间的关系，不需要知道数据具体形式</li>
</ul>
</li>
<li>数据封装<ul>
<li>把数据和操作作为整体实现，使用者通过接口对数据操作，不需要知道数据具体形式</li>
</ul>
</li>
<li>对象<ul>
<li>数据和操作的封装体</li>
</ul>
</li>
<li>类<ul>
<li>描述了对象的特征（包含的数据和操作）</li>
</ul>
</li>
<li>继承<ul>
<li>定义子类，把父类的特征先包含进来</li>
</ul>
</li>
<li>多态性（论域元素有多个解释）<ul>
<li>一名多用<ul>
<li>函数名重载</li>
<li>操作符重载</li>
</ul>
</li>
<li>类属性<ul>
<li>类属函数：一个函数可以对多个类型的数据操作</li>
<li>类属类型：一个类型可以描述多种类型的数据</li>
</ul>
</li>
</ul>
</li>
<li>绑定：确定多态元素的使用是多态元素的哪一种<ul>
<li>静态绑定<ul>
<li>编译时决定</li>
</ul>
</li>
<li>动态绑定<ul>
<li>运行时决定</li>
</ul>
</li>
</ul>
</li>
<li>this指针<ul>
<li>类的成员函数的隐藏形参</li>
<li>类型为该类对象的指针</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【工作日志】 第一篇博客</title>
    <url>/2021/01/21/first%20blogs/</url>
    <content><![CDATA[<p>欢迎来到我的博客。</p>
<p>搭建博客的初衷，一方面是个人知识体系的总结与分享；其次是平时工作学习的记录和自我反馈。</p>
<p>文章中有任何问题需要交流，都可以在博客评论区留言。</p>
<p>本人邮箱：401986905@qq.com。</p>
]]></content>
      <categories>
        <category>工作日志</category>
      </categories>
      <tags>
        <tag>Working Logs</tag>
      </tags>
  </entry>
  <entry>
    <title>【工作日志】 毕设整理</title>
    <url>/2021/04/29/graduation-design-log/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="2828c15203836a1eb819fe437296d7bd43ef174ec8d07a3c9265bbb757e070e3">ad43cd26d5b7026203cb76ab857976b3fae4deb41e0851382517be9714c0e8520a2373d977f2f8839edf1d0ebe625571bef044cc97efb804b6cc47d04ba4150d285d46775e3d2d52e95a31830e0cf6246c6fe30e6e2c9ee86f9c4024ffb339898a45fb3334fb430f2f3895100a48910ede691682b08ea762292819e34651a6ce011ef6918c9cbd45ba08027580257592b503c89bcb7717ca8245bb3ab6224bb10729251a082f9041039635570e8102090fe1eadc88746c99b09d638f8c353f47cf609175f13e0e23addfc90ccd5817cf91fe4886383d58d63ba0c12e010523f25abd9fb76bf0f167c712436cc62a8aa4bc70ef918b48f645ef3c8e1ee922a9cdaccce8f1de76567919ada4a8fa4328a7c15f866424dde0032cddea71de067abd07031e2d6fca848806e47c4141b5b80d8ad6bd511c01f136adf45726048f8799fee993e1853cfa5e3b71608f15faa22ac2a1865e079259c00811ec461249a06697eefe1d521bbe1e4f55fae2fccb644429212970ec08e36ef970a578e528352a27d82e6bfc677ddfaeabc848b7a07341f268da3b4f886a8612f5ab19f131c25279d91522e3339cc20dd406a630b569884fdc8477c94ac0dd11e4d0b6c30ababb040cfb35b104ecaf5baeab466731fca5b2c897df21e268427c60011d2d70d1a044c67ae2c88f42cb38b4fc817a2c9f492cb8d810d071035a6d71fc9e4e1fd403aae33ac8c0d58a99917d531f14a786aae37b519bfdb1874ed375f64fde20d87b5092b358e9682da39deca50896df3b1f96e290ce7096667b34e7ca27231952cfdedd313bb4bcdc83d08aa160a5018dfe59dfd5faae3c8e6c54426098fc39c5b443638dbac3b6926e6dc8901b8d9d7f4dd9d25eddc19006b47b5c942fc4509c461098beb3adef68476fec7d9ae44275a23136e50ba6467a8f7fbd9c8c54c13225e0421c5f25859b0edf3d0c1991e6583ae16b4c5870cac70efd05a143a0940113c30c2eaa7da1151ee39e686bd2688782bbde12621d65d31abe0487b8f2a460abe5fc5f3d47be023d257699b2e1d6a86aef22a470f62b6c5d97d2f9d84eff525beb4ee3fa1d34490816e5caa5038cbc1d33529e860e863d8738b2f068c9cab0a993e4865fd98047ea7896f829ad7cbd50754e70b32745ef3bb6dea7afc0a37dee70f2b6d3d7934f311719c2d36c4ac4fff1944f25f6cf57967f0bca20957262b37da21544b355588cffd49998ab626ca58fc338fd27d14e9b8412a5a6b276620ae7892301a3f17e0b9c2caf958771a8bab72a5d3441ccfb1ce788db5563ee581a1a2e20eee1da46d1187646c2b9cc0c3e47c0d19180f11f987301ee3ecb8b1bd95a38745ccdc213a4357a99ed7a8fa653fd11cd24d2363ecae0916184f6a11c6038e3887f5ad6301bc414ad5035796976a87e9a9e0fb594b932fbeab47db8e41c102eeab6fcd7c2e28df1235890af0798d20e5afe41d0176339479a3e65c6819cd4016fd5f3bc3c3042df48fb481e0c5ee1c062cd91cb996fb1653cc3605ff28f141a2dde1cf4bede14b1acbcfe2cb18c29ce3930cac8e55cc0a96b1559d9544ef78192fe86506b1071e77c9244c415f66f06b1bf1b64ec7c8d2816ebbcb0cd3d76dd91f8e3bd463b9dc246ab572dc9207f19b834e25aa81bc8c46d5cd118995610d616034fdf7caac42a5df021feda22b79b59cdf58fb5b3e39cab43765001b6fca7a97aac374b93b345ecd02cf8c1d6a165fd4f4781330886d49ee39b010f1e1b65953f95ac83106cb82e48075a9b47f84fc9db4de6766c2e4bdbb45b3d689fe546623617fb5456595f729773e10b72f656217200add9cbfc3b821f97fd12dda00129942c7d4898226ab338fcc0807c972c3ca31c44b919be7248f299e7e3bdbddec9daeccf7ab7474a551cac20d475f04ab873aa8d1d091622ba2635f6a68794f0f61e30c47bdab7cce4d9325cd93bd5a0324ec1dc73ce0b23653de45d9298567c28b1eaa34ff9b559230368f023d1b525b2d583cfce26e329eaf87b62bff60b6624f6bd0885e21a0ecae3eebe330814e16566176057ce7c4cf185e86adf5767eb16e33dedb57f6522fa5ced8a83e10c01e4dec8ca5bd8f1ab0ed46911c2a3ac19a449a8164b721b3e853bd764b1c339a1077a9dadd075c7c34e04378c0271f96ccd55f060de979061589adea9d3b37a89763cb32b50d7efc58169d64e76fa80bc8dee406a0b70cfbb148155822c60f2a054490e6ff0af36daee0e9b58a4ba8dc8907a2d425987e15c36baf2bb61b37706fe1f81ce84466bb780cd8b409689034463bd39cb1a7063c75f681946c87a68ea74fff14f348b71328db8a7a499792d88751274941203a20f1d9d797e1ff3103489652808da04de7ea13defdfba8ca59a8cef066386cc2589b3b29dda8f95ada56010ef7db4d997e214472a431a2d5108921752f0306023a07634becdc586e7b98c60c2c81cd62deaf7e02bfc42173979f63cdccb55a73a09e52caf138f6a2f648828554bb1b6458f4f142c858a5ad13a4cd2fc17386e91cd0883af80983895ddae91d5f62f0254d9f3f6e949a6038de068c4d245bf6b7e05e028e1afe65247b0e7bde801ceda606d250625e8dcb822cb4c2e49b9acedce6d1eab7b52cb7bb8e4076a3bc93fb81150b092212eba903528697291ebdfa10766ea3641e44066ef5a59282960a461dde6a5f08b7ccddb014f122a2292d9d7fcdcdde059bbd4a439a39eb9ef27317901ff07800b619c79fbc56edfa29588848150b71abe24b50844266074f54086223eb5b16092492517f62df1384042d03f44a7ddd79f41062cd7722d815abe0a561129372f0b580d848839244e6bc96c5f8d45b5e7d7e48a1a55c499f6c368dfe5363b46e42658026af7b1f80d70e4816f2bdbf7f4e0f368248d677f68853a20fefb19475178c5c6c49e990074d37b07b652a681440c7c570802c40cdd73ef1c0925737a61c1ea214c75e6fafaf9db35578689f0907f9c233d88130c171f301a3d21b66bb1a982d4c0e1f87a279564de074ec23f9e45b221978aa7f7f8117c343b1dcbdaee6683b516bfce8a720247593dd962613ad309067db6056e6ef72918b0a23690ec7d7c20b28f9f454d4bc06be1a9f0da30256cc639ba5b1066f1b1f788a24767fa06117682b730be421c0ac9edf2fd595b152950cf3b89cef54632fd9e495d36a78df4565c4db63435a159609219572f29c6fda6b725a6bb58a60cbbed1c779730a916c9d21cd53a9ee4dc4176f9b645ea2bffa6473016673b7a15916f96551bf0aace66596c61a445155db28cdf13f9ceafabd1566a4aef741a58c4b6e0459a4ec1fcbfae946bae415301bf9546bf4d5ffe605e94d7e9418234b11dd89b3a89b8ac98a099e62dc949d49756184a2dc5825cfe9cb5b020d46f53733b91fb61e95cfa854623cc62c79ff53078bfd15c29739bbd5695ee2ad4892f59a35362d69469fdd540444aea595bd9cc38f6d13b58a8f0f6075d438777818b43f11ceeaac06fc02f93b295e9fdbf3e4cf2c28b099e4498d4ec0af1d4e8dab1c7edab70edcb7ad1578933736356004ebd8c93841d31a0d0ac0f75aeff48dd53e21130dd044100197b642c0af8afb4028b39169c7d859be27f52d4c42c66586512da97f6e77bda164c84887b3d582bf7af11e985809eedafa2a701e967f72339f883581b37a599dc97f6a556ba1514f7b30210fc8c4db382d6af8f46b71a3e84a5f869155929250131670f4a8107c89decc439a28cacba052cd7158bf090cfc05ca76130753af2aae29b8ac29d9a2bfe8ec17f3c2b118075c862e0e63fc092d3756db74abfb3a72d09a8abcd0a26112ef91597dd27c14c233b498ad6e25e1d968b9387761f00a53da0d4abefa75cd3837eb9770d0273a5d7109f550ec23d41aa82dc82da2a9e8bccef545bf4a74ea763e64072268eeaaf162c0de53895a0410dddda4d0ffd83d268454f860ccf1ddfa67a3b86fbd4fbd9a01f529ba93a726a87429fd71424d2f1e41a4ebff1e6abf6b9d19335fbafa539cff7a0a8ba7aa675b5a993bd4d3d3750e00ccb273b580223dd3b107fcf21ef68dc68a2fc2595567ffaa0a2d0f2209b40c4cedb7cdd2a70186954fa08452fb9d93a4d8a3d769ec2175c3d330ff87c4a6e62c1a916e828f42d7894b27683a6ceb610e29c71d8b50c4c57459590a29869c8d7cf5f8f0c50dd0856d57339ac892045ca0fe126b0e4b5aad75b0b1b614dde4307ba6d6105386db333658bb1267421863b460b16e40619a157330912ad0f3f948c5db85987286a26ab48be684303daed5418c529e26bd0135eaadbc51459da4dc912f09bc2ba97d2d5d199e46cb9f43242c7e3f818c5707127acece606f77a094d16a5c2c0d4fc9c4735442c1eb9912e909ad409514e0e8d94f974c5c0b61da1ae5a7c3d73ca77a847c489209d03519fd4a57a4e6d62cd08b938151cdca216b97f6f29b24f5aedde4392257e89885d6478dbde42</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作日志</category>
      </categories>
      <tags>
        <tag>Working Logs</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 图的基本概念</title>
    <url>/2021/03/08/graphIntroduction-1/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>定义：一集元素和它们之间关系的二元组(V,E)，其中集合V称为<strong>顶点集</strong>，集合E是V中元素组成的某些无序对的集合，称为<strong>边集</strong>，顶点的数目$|V|$称为图的<strong>阶</strong>，边的数目$|E|$称为图的边数。</p>
<h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>定义：点表示顶点，线段表示边，绘制出平面表示图。</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul>
<li><strong>关联</strong>：   点是边的端点，则点和边在图中相关联。</li>
<li><strong>相邻</strong>：   两个点有边相连，则点相邻；两个边至少有一个公共端点，则边相邻。</li>
<li><strong>环边</strong>：   两个端点都重合的两个边。</li>
<li><strong>重边</strong>：   给定顶点u、v。则图中连接u、v的两条或以上的边称为图中u、v的重边。</li>
<li><strong>简单图</strong>：  无环边也无重边的图为简单图。</li>
<li><strong>完全图</strong>：  所有点对之间都有边的图。</li>
<li><strong>空图</strong>：   边集为空的图。</li>
<li><strong>平凡图</strong>：  只有一个顶点的空图。</li>
<li><strong>零图</strong>：   边集和点集都为空的图。（顶点集为空则边集肯定为空）。</li>
<li><strong>顶点的度</strong>： 图中顶点关联的边数，记为$d_G(v)$或$d(v)$。</li>
<li><strong>最大度</strong>：  $\Delta(G)=max\{d(v)|v \in V(G)\}$。</li>
<li><strong>最小度</strong>：  $\delta(G)=min\{d(v)|v \in V(G)\}$。</li>
<li><strong>正则图</strong>：  各个顶点度都一样（设度为k）的图，称为k-正则图。</li>
<li><strong>图的补图</strong>： 补图和原图的点集相同；补图和原图的边集互为补集(设完全图的边集为全集)。</li>
</ul>
<h3 id="lemma定理"><a href="#lemma定理" class="headerlink" title="lemma定理"></a>lemma定理</h3><p>图中各顶点度数之和是边数的两倍，即$\sum\limits_{v \in V(G)}d(v)=2|E|$  </p>
<p><strong>推论：图中奇度顶点的数目一定是偶数。</strong> </p>
<h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><ul>
<li>子图：对于图G和H，若$V(H)\subset V(G)$且$E(H)\subset E(G)$，则H是G的子图，记为$H\subset G$。</li>
<li>生成子图：H是G的子图且$V(H)=V(G)$，则H是G的生成子图。 </li>
<li>点导出子图：$\forall v_i,v_j \in V’=V(H),((v_i,v_j)\in E(G)\rightarrow(v_i,v_j)\in E(H))$，记为$H=G[V’]$。</li>
<li>边导出子图： $V(H)=\bigcup\limits_{e\in E(H)}e$，记为$H=G[E’]$。</li>
<li>$G-V’$：从$G$中删除顶点$V’$，包括删除顶点的边，从而获得子图。</li>
<li>$G-E’$：从$G$中删除边$E’$，不删除顶点，从而获得子图。</li>
</ul>
<h3 id="路和圈"><a href="#路和圈" class="headerlink" title="路和圈"></a>路和圈</h3><p>途径：图G中一个点边交替出现的序列<br>迹：边不重复的途径<br>路：顶点不重复的迹<br>闭途径：起点终点相同的途径<br>闭迹：边不重复的闭途径。<br>圈：中途点不重复的闭迹。</p>
<h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>途径的长度：边的数量<br>最短路的长度：即距离，两个点之间长度最小的路<br>奇圈：长度为奇数的圈<br>偶圈：长度为偶数的圈</p>
<h3 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h3><p>定义：若G的顶点可以划分为两个非空子集X和Y，且单个子集内部没有边，则G为二部图。记为$G=(X\cup Y,E)$。</p>
<p><strong>完全二部图</strong>：若二部图G的两个子集为X和Y，且X的每个顶点和Y的每个顶点之间都有边，则G为完全二部图。</p>
<p>定理:一个图是二部图当且仅当它不含奇圈。</p>
<h3 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h3><ul>
<li>点连通：两个点间有路相同。</li>
<li>连通图：任意两顶点连通。</li>
<li>图的连通分支：把图的顶点划分为一系列非空子集，使得两顶点在同一个子集中当且仅当它们连通。通过这些子集得到的一系列点导出子图就是原图的一个个连通分支。连通分支的个数为连通分支数。</li>
<li>点的离心率e(v)：点v到图上距离该点最远的点的距离</li>
<li>中心：离心率最小的点</li>
<li>半径rad(G)：离心率的最小值</li>
<li>直径diam(G)：离心率的最大值</li>
</ul>
<p>定理：若图G(V,E)连通，则$|E|\geq |V|-1$</p>
<h3 id="图的同构"><a href="#图的同构" class="headerlink" title="图的同构"></a>图的同构</h3><p>定义：在图$G=(V(G),E(G))$和图$H=(V(H),E(H))$中，存在一一映射：$\alpha:V(G)\rightarrow V(H)$和$\beta: E(G)\rightarrow E(H)$,使得对任意$e=(u,v)\in E(G)$，都有$(\alpha(u),\alpha(v))\in E(H)$，且$\beta(e)=(\alpha(u),\alpha(v))$，则G和H同构，记为$G\cong H$</p>
<p>注：同构关系是一个等价关系（自反、对称、传递）。同构的判断属于NP问题。</p>
<h3 id="图的运算"><a href="#图的运算" class="headerlink" title="图的运算"></a>图的运算</h3><p>G的补图：$\overline{G}=\langle V(G),\{(x,y)\notin E(G)\}\rangle$</p>
<p>G和H的并：$G \cup H=\langle V(G)\cup V(H),E(G)\cup E(H)\rangle$</p>
<p>G和H的和：仅当$V(G) \cap V(H)$交集为空时，$G+H=\langle V(G)\cup V(H),E(G)\cup E(H)\rangle$</p>
<p>G和H的联：$V(G)\vee V(H)$是在和的基础上连接$V(G)$和$V(H)$中的一些点对，即添加一些边</p>
<p>G和H的对称差：当$V(G)=V(H)=V$，$G\oplus H=\langle V,(E(G)\cup E(H))\setminus(E(G)\cap E(H))\rangle$</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 可平面图的判断</title>
    <url>/2021/05/06/graphIntroduction-10/</url>
    <content><![CDATA[<h2 id="可平面图的判断"><a href="#可平面图的判断" class="headerlink" title="可平面图的判断"></a>可平面图的判断</h2><h3 id="剖分"><a href="#剖分" class="headerlink" title="剖分"></a>剖分</h3><ul>
<li>剖分：在一条边上加入一个新的顶点，将其分为两条边</li>
<li>Kuratowski子图：图中的，是$K_5$或$K_{3,3}$剖分的子图</li>
<li>Kuratowski定理：可平面图的充要条件是没有kuratowski子图</li>
<li>Wagner定理：可平面图的充要条件是没有可以收缩到$K_5$或$K_{3,3}$的子图</li>
</ul>
<h2 id="DMP算法"><a href="#DMP算法" class="headerlink" title="DMP算法"></a>DMP算法</h2><h3 id="H-fragment"><a href="#H-fragment" class="headerlink" title="H-fragment"></a>H-fragment</h3><p>图$G$的$H-fragment$：给定$G$的子图$H$，$G$的$H-fragment$是$G$中去掉$H$后剩余的“连通分支”，包括：</p>
<ul>
<li>一条不在$H$中但两个端点都在$H$中的边及其两端</li>
<li>$G-V[H]$的一个连通分支加上它连到H的边及其端点</li>
</ul>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ul>
<li>迭代地嵌入当前子图的fragment，直到G全部被嵌入（可平面）或者某个fragment无法嵌入（不可平面）</li>
<li>嵌入一个fragment可能难以操作，但总能嵌入其中的一条路</li>
<li>图$G$是可平面的当且仅当$G$的每个块都是可平面的</li>
</ul>
<h3 id="DMP算法流程"><a href="#DMP算法流程" class="headerlink" title="DMP算法流程"></a>DMP算法流程</h3><ul>
<li>如果有多个块，只需要检测每个块（2-连通图）是否可平面即可</li>
<li>对于每个2-连通图$G$，从中任取一个圈$G_0$，平面嵌入</li>
<li>迭代如下<ul>
<li>找到所有$G_i-fragment$</li>
<li>对于每个$G_i-fragment$（称作$B$），在$G_i$中找到所有包含所有$B$的附着点的面（称为$F(B)$）。如果某个$F(B)$为空，则$G$不可平面；如果某个$|F(B)|=1$<br>则选中这个$B$；如果每个$|F(B)&gt;1|$，则任选一个$B$</li>
<li>从选中的$B$中任选一条连接两个附着点的路$P$，将$P$嵌入到$F(B)$的一个面中。</li>
<li>将结果记作$G_{i+1}$</li>
<li>如果$G_{i+1}=G$则$G$可平面，否则继续迭代。</li>
</ul>
</li>
</ul>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul>
<li>块分解：$O(v)$，基于DFS</li>
<li>找初始的圈：$O(v)$</li>
<li>迭代轮数:<ul>
<li>简单平面图满足$\epsilon\leq 3v-6$</li>
<li>$\varphi=\epsilon-v+1\leq 2v-5\in O(v)$，因此每轮迭代新增一个面</li>
</ul>
</li>
<li>每轮的迭代时间：$O(v)$</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 边染色、点染色和面染色</title>
    <url>/2021/05/16/graphIntroduction-11/</url>
    <content><![CDATA[<h2 id="边染色"><a href="#边染色" class="headerlink" title="边染色"></a>边染色</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>边$k$染色<ul>
<li>$E(G)\rightarrow \{1,2,\cdots,k\}$</li>
<li>$E_i$：色为$i$的边集</li>
</ul>
</li>
<li>边正常$k$染色：相邻的边不同色</li>
<li>边$k$色可染的： 能找到一个边正常$k$染色</li>
<li>边色数：<ul>
<li>边$k$色可染的最小$k$</li>
<li>记作$\chi’$</li>
</ul>
</li>
<li>只考虑无环图，可以有重边</li>
</ul>
<h3 id="边色数的性质和意义"><a href="#边色数的性质和意义" class="headerlink" title="边色数的性质和意义"></a>边色数的性质和意义</h3><ul>
<li>$\Delta\leq \chi’ \leq \epsilon$</li>
<li>$\chi’$和匹配的联系：<ul>
<li>$E(G)$至少要被划分成$\chi’(G)$个匹配</li>
<li>如果$E(G)$能被划分为$m$个匹配，则$\chi’(G)\leq m$</li>
</ul>
</li>
</ul>
<h3 id="最佳边k染色"><a href="#最佳边k染色" class="headerlink" title="最佳边k染色"></a>最佳边k染色</h3><ul>
<li>对于边$k$染色$c$，用$c(v)$表示顶点$v$出现的色数</li>
<li>若$\sum c’(v)&gt;\sum c(v)$，则称$c’$是$c$的一个改进</li>
<li>不能改进的边$k$染色称作最佳边$k$染色（未必是边正常$k$染色）</li>
</ul>
<h3 id="Vizing定理"><a href="#Vizing定理" class="headerlink" title="Vizing定理"></a>Vizing定理</h3><p>对于简单图$G$，$\Delta\leq \chi’\leq \Delta+1$</p>
<h3 id="简单图的分类"><a href="#简单图的分类" class="headerlink" title="简单图的分类"></a>简单图的分类</h3><ul>
<li>第一类图：$\chi’=\Delta$</li>
<li>第二类图：$\chi’=\Delta+1$</li>
</ul>
<h3 id="二部图的边色数"><a href="#二部图的边色数" class="headerlink" title="二部图的边色数"></a>二部图的边色数</h3><ul>
<li>对于二部图$G$，$\chi’=\Delta$</li>
<li>二部图的边正常$\Delta$染色算法<ul>
<li>$k$正则二部图有$k$个边不重的完美匹配</li>
<li>算法思路<ul>
<li>将二部图扩展成$\Delta$正则二部图</li>
<li>反复的求最大匹配，即完美匹配，染色后从图中删去</li>
<li>忽略添加的顶点和边</li>
</ul>
</li>
<li>二部图边染色复杂度：目前最快的算法是$O(mlog\Delta)$；</li>
<li>一般简单图的边染色：多项式时间内可以做到$\Delta+1$染色</li>
</ul>
</li>
</ul>
<h2 id="点染色"><a href="#点染色" class="headerlink" title="点染色"></a>点染色</h2><h3 id="相关概念-1"><a href="#相关概念-1" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>$k$染色<ul>
<li>$V(G)\rightarrow \{1,2,\cdots,k\}$</li>
<li>$V_i$：色为$i$的顶点集</li>
</ul>
</li>
<li>正常$k$染色：相邻的顶点不同色</li>
<li>$k$色可染的： 能找到一个正常$k$染色</li>
<li>色数：<ul>
<li>$k$色可染的最小$k$</li>
<li>记作$\chi$</li>
</ul>
</li>
</ul>
<h3 id="色数的性质和意义"><a href="#色数的性质和意义" class="headerlink" title="色数的性质和意义"></a>色数的性质和意义</h3><ul>
<li>$\chi \leq v$</li>
<li>$\chi$和点独立集的联系：<ul>
<li>$v(G)$至少要被划分成$\chi(G)$个点独立集</li>
<li>如果$V(G)$能被划分为$m$个点独立集，则$\chi(G)\leq m$</li>
</ul>
</li>
</ul>
<h3 id="色临界图及其性质"><a href="#色临界图及其性质" class="headerlink" title="色临界图及其性质"></a>色临界图及其性质</h3><ul>
<li>$k$临界的：$\chi=k$的极小图</li>
<li>$k$色图一定包含一个$k$临界子图</li>
<li>色临界图一定是连通的简单图</li>
<li>对于$k$临界图$G$中的任一顶点$v$，能找到一个正常$k$染色使得$v$的色独一无二且与其他$k-1$种色都相邻</li>
<li>$k$临界图满足$\Delta\geq k-1$</li>
<li>对于$k$临界图$G$中的任一边$e$，$G-e$的任一正常$k-1$染色都使得$e$的两个端点同色</li>
<li>色临界图的点割集不是团（两两相邻的顶点子集）</li>
<li>每个色临界图都是块（无割点的连通图）</li>
<li>色临界图若有2-点割集$\{u,v\}$，则$u$和$v$不相邻</li>
</ul>
<h3 id="色数的界和正常染色算法"><a href="#色数的界和正常染色算法" class="headerlink" title="色数的界和正常染色算法"></a>色数的界和正常染色算法</h3><h4 id="贪心算法一"><a href="#贪心算法一" class="headerlink" title="贪心算法一"></a>贪心算法一</h4><ul>
<li>假设可以染的色为$1,2,\cdots$</li>
<li>对于顶点$v_1,v_2,\cdots,v_n$按任意序染色，总选择不冲突的下标最小的色</li>
<li>最多需要$\Delta+1$种颜色</li>
<li>$\chi\leq \Delta+1$</li>
</ul>
<h4 id="贪心算法二"><a href="#贪心算法二" class="headerlink" title="贪心算法二"></a>贪心算法二</h4><ul>
<li>假设可以染的色为$1,2,\cdots$</li>
<li>对于顶点$v_1,v_2,\cdots,v_n$按度降序染色，总选择不冲突的下标最小的色</li>
<li>$\chi\leq \max_i\min\{d(v_i)+1,i\}=1+\max_i\min\{d(v_i),i-1\}\leq \Delta+1$</li>
<li>初期$i$较小，后期$d(v_i)$较小，因此总体较小</li>
</ul>
<h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>除完全图和奇圈以外的连通简单图$G$满足$\chi\leq \Delta$</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>对于$k&gt;2$，判断一个图是否$k$色可染是NP-完全问题</li>
<li>一般意义上的求色数更是$NP-hard$问题</li>
<li>找到一个近似比为常数的近似算法同样困难</li>
</ul>
<h2 id="面染色"><a href="#面染色" class="headerlink" title="面染色"></a>面染色</h2><h3 id="相关概念-2"><a href="#相关概念-2" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>面$k$染色</li>
<li>面正常$k$染色：边界有公共边的面不同色</li>
<li>面$k$色可染的</li>
<li>面色数</li>
</ul>
<h3 id="五色定理"><a href="#五色定理" class="headerlink" title="五色定理"></a>五色定理</h3><ul>
<li>定理：对于任何平面图$G$,$\chi(G)\leq 5$</li>
<li>推论：由对偶图都是平面图，故平面图一定是面5色可染的</li>
</ul>
<h3 id="四色猜想"><a href="#四色猜想" class="headerlink" title="四色猜想"></a>四色猜想</h3><ul>
<li>猜想：对任何平面图$G$，$\chi(G)\leq 4$</li>
<li>三角剖分平面图：每个面的度数都为3的简单平面图</li>
<li>构形：每个内部面的度数都为3的简单平面图</li>
<li>极小反例：<ul>
<li>$\chi&gt;4$的简单平面图中阶最小的一个</li>
<li>不失一般性，设其为三角剖分平面图，如果不是也可以加边使之成为三角剖分平面图，且还是极小反例。</li>
</ul>
</li>
<li>不可免集：构形的集合，任何一个极小反例至少包含其中一个构形</li>
<li>如果找到一个不可免集，其中每个构形都不可能出现在极小反例中，称作可约的，则出现了矛盾，因此极小反例不存在，四色猜想得证。</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 有向图</title>
    <url>/2021/05/27/graphIntroduction-12/</url>
    <content><![CDATA[<h2 id="有序对"><a href="#有序对" class="headerlink" title="有序对"></a>有序对</h2><ul>
<li>无序对：<ul>
<li>含有1个或2个元素的集合</li>
<li>$(v_1,v_2)=\{v_1,v_2\}$，$(v_2,v_2)={v_2}$</li>
</ul>
</li>
<li>有序对：$\langle a_1,b_1\rangle=\langle a_2,b_2\rangle$ 当且仅当 $a_1=a_2$ 且 $b_1=b_2$</li>
<li>有序对的集合表示：$\langle a,b\rangle=\{\{a\},\{a,b\}\}$</li>
</ul>
<h2 id="有向图和弧"><a href="#有向图和弧" class="headerlink" title="有向图和弧"></a>有向图和弧</h2><ul>
<li>$G=\langle V,A \rangle$<ul>
<li>$V$：顶点集</li>
<li>$A$：弧集，一个有向对的集合。弧又称为有向边</li>
</ul>
</li>
<li>一些术语<ul>
<li>弧的尾</li>
<li>弧的头</li>
<li>环弧：头尾相同的弧</li>
<li>并行弧：具有相同头的相同尾的弧</li>
<li>简单有向图：无环弧，无并行弧</li>
<li>反向弧：简单有向图中头尾相反的弧</li>
</ul>
</li>
</ul>
<h2 id="度和邻点"><a href="#度和邻点" class="headerlink" title="度和邻点"></a>度和邻点</h2><ul>
<li>出度：$d^+(v)$</li>
<li>入度：$d^-(v)$</li>
<li>最小出度：$\delta^+$</li>
<li>最小入度：$\delta^-$</li>
<li>最大出度：$\Delta^+$</li>
<li>最大入度：$\Delta^-$</li>
<li>出邻点和入邻点</li>
</ul>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>对任何有向图$G$，都有$\sum\limits_{v\in V(G)}d^+(v)=\sum\limits_{v\in V(G)}d^-(v)=\sum\limits_{v\in V(G)}\frac{d(v)}{2}=\epsilon$</p>
<h2 id="途径、迹、路、圈"><a href="#途径、迹、路、圈" class="headerlink" title="途径、迹、路、圈"></a>途径、迹、路、圈</h2><ul>
<li>有向途径<ul>
<li>顶点和弧交替出现的序列</li>
<li>与弧的方向一致</li>
</ul>
</li>
<li>有向迹：弧不重复出现</li>
<li>有向路：顶点不重复出现</li>
<li>有向圈：起点和终点相同</li>
</ul>
<h2 id="底图和定向"><a href="#底图和定向" class="headerlink" title="底图和定向"></a>底图和定向</h2><ul>
<li>底图：有向图 $\rightarrow$ 无向图</li>
<li>定向：无向图 $\rightarrow$ 有向图<ul>
<li>不唯一</li>
<li>竞赛图：完全图的定向</li>
</ul>
</li>
</ul>
<h2 id="连通"><a href="#连通" class="headerlink" title="连通"></a>连通</h2><ul>
<li>弱连通：底图是连通的</li>
<li>强连通：任取顶点u和v，存在从u到v的有向路</li>
<li>强连通分支：极大强连通子图</li>
<li>强连通分支之间不存在公共顶点</li>
<li>强连通分支图不存在有向圈</li>
</ul>
<h2 id="强连通的充要条件"><a href="#强连通的充要条件" class="headerlink" title="强连通的充要条件"></a>强连通的充要条件</h2><p>$G$是强连通有向图的充要条件是$G$的所有顶点在一条有向闭途径上</p>
<h2 id="强连通定向"><a href="#强连通定向" class="headerlink" title="强连通定向"></a>强连通定向</h2><p>无向图$G$可定向成强连通图的充分必要条件为：$G$连通且无割边。</p>
<h2 id="竞赛图"><a href="#竞赛图" class="headerlink" title="竞赛图"></a>竞赛图</h2><ul>
<li>王<ul>
<li>到其他任何顶点都有长度不超过2的有向路</li>
<li>不一定唯一</li>
</ul>
</li>
<li>定理：竞赛图中出度最大的顶点一定是王</li>
<li>竞赛图中一个顶点$v$是唯一的王当且仅当$v$的出度是$v-1$</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 网络流</title>
    <url>/2021/05/27/graphIntroduction-13/</url>
    <content><![CDATA[<h2 id="网络的基本概念"><a href="#网络的基本概念" class="headerlink" title="网络的基本概念"></a>网络的基本概念</h2><ul>
<li>网络：弧带权的有向图<ul>
<li>弧的权又称弧的容量，记作$c(a)\geq 0$</li>
<li>只讨论简单的有向图（无环弧、无并行弧）</li>
<li>有一个特殊的源点，记作$s$</li>
<li>有一个特殊的汇点，记作$t$</li>
</ul>
</li>
<li>流：<ul>
<li>$f$：定义在弧上的非负实值函数</li>
<li>$f^+(v)$：顶点$v$的所有出弧的流量和</li>
<li>$f^-(v)$：顶点$v$的所有入弧的流量和</li>
</ul>
</li>
<li>可行流：<ul>
<li>容量约束：$\forall a\in A(G),0\leq f(a)\leq c(a)$</li>
<li>守恒约束：$\forall v\in V(G)\setminus \{s,t\},f^+(v)=f^-(v)$</li>
</ul>
</li>
<li>对于任意网络，可行流总是存在的，比如：零值流</li>
<li>流量：<ul>
<li>$f^-(t)-f^+(t)$</li>
</ul>
</li>
<li>必有$f^-(t)-f^+(t)=f^+(s)-f^-(s)$</li>
<li>最大流：流量最大的可行流</li>
<li>f增广路<ul>
<li>底图中的一条s-t路</li>
<li>经过的每条正向弧$a\in A(G):f(a)&lt;c(a)$</li>
<li>经过的每条反向弧$a\in A(G):f(a)&gt;0$</li>
</ul>
</li>
<li>增广路的“可增量”</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 图的连通性</title>
    <url>/2021/03/11/graphIntroduction-2/</url>
    <content><![CDATA[<h2 id="割点和割边"><a href="#割点和割边" class="headerlink" title="割点和割边"></a>割点和割边</h2><h3 id="割点定义"><a href="#割点定义" class="headerlink" title="割点定义"></a>割点定义</h3><p>$v \in V(G):w(G-v)&gt;w(G)$</p>
<h3 id="割点的一个定理"><a href="#割点的一个定理" class="headerlink" title="割点的一个定理"></a>割点的一个定理</h3><p>如果点v是简单图G的一个割点，则边集$E[G]$可划分为两个非空子集$E_1$和$E_2$，使得边导出子图$G[E_1]$和$G[E_2]$恰好有一个公共顶点v。</p>
<h3 id="连通图中割点的等价定义"><a href="#连通图中割点的等价定义" class="headerlink" title="连通图中割点的等价定义"></a>连通图中割点的等价定义</h3><ul>
<li>v是G的割点</li>
<li>G-v不连通</li>
<li>存在$V(G)\setminus\{v\}$的一个划分：$V(G)\setminus\{v\}=U\cup W$,$U\cap W=\emptyset$,使得对$\forall u\in U$和$\forall w\in W$,v在每条u-w路上</li>
<li>存在$u,w\in V(G)$,使得u,w异于v，且v在每条u-w路上</li>
</ul>
<h3 id="割边定义"><a href="#割边定义" class="headerlink" title="割边定义"></a>割边定义</h3><p>$e \in E(G):w(G-e)&gt;w(G)$</p>
<h3 id="割边的等价定义"><a href="#割边的等价定义" class="headerlink" title="割边的等价定义"></a>割边的等价定义</h3><ul>
<li>e是G的割边</li>
<li>e不在G的任何圈中</li>
</ul>
<h3 id="连通图中割边的等价定义"><a href="#连通图中割边的等价定义" class="headerlink" title="连通图中割边的等价定义"></a>连通图中割边的等价定义</h3><ul>
<li>e是G的割边</li>
<li>存在$V(G)$的一个划分：$V(G)=U\cup W$,$U\cap W=\emptyset$,使得对$\forall u\in U$和$\forall w\in W$,e在每条u-w路上</li>
<li>存在$u,v\in V(G)$,使得e在每条u-v路上</li>
</ul>
<h2 id="连通度和边连通度"><a href="#连通度和边连通度" class="headerlink" title="连通度和边连通度"></a>连通度和边连通度</h2><h3 id="点割集"><a href="#点割集" class="headerlink" title="点割集"></a>点割集</h3><p>$S \subset V(G): w(G-S)&gt;1$</p>
<h3 id="极小点割集"><a href="#极小点割集" class="headerlink" title="极小点割集"></a>极小点割集</h3><p>任何真子集都不是点割集</p>
<h3 id="最小点割集"><a href="#最小点割集" class="headerlink" title="最小点割集"></a>最小点割集</h3><p>图中含顶点数最少的点割集</p>
<h3 id="连通度"><a href="#连通度" class="headerlink" title="连通度"></a>连通度</h3><ul>
<li>G不是完全图：最小点割集的势</li>
<li>G是完全图：v-1</li>
<li>G不连通：0</li>
<li>G是零图或平凡图：不讨论</li>
</ul>
<h3 id="连通度性质（-kappa-G-kappa-）"><a href="#连通度性质（-kappa-G-kappa-）" class="headerlink" title="连通度性质（$\kappa(G)=\kappa$）"></a>连通度性质（$\kappa(G)=\kappa$）</h3><ul>
<li>没有势为k-1或更小的点割集</li>
<li>任意去掉k-1或更少的点，仍然连通</li>
</ul>
<h3 id="k-连通"><a href="#k-连通" class="headerlink" title="k-连通"></a>k-连通</h3><p>即$\kappa(G)\geq k$</p>
<h3 id="边割集"><a href="#边割集" class="headerlink" title="边割集"></a>边割集</h3><p>$S \subset E(G): w(G-S)&gt;1$</p>
<h3 id="极小边割集"><a href="#极小边割集" class="headerlink" title="极小边割集"></a>极小边割集</h3><p>任何真子集都不是边割集</p>
<h3 id="最小边割集"><a href="#最小边割集" class="headerlink" title="最小边割集"></a>最小边割集</h3><p>图中含边数最少的边割集</p>
<h3 id="边连通度"><a href="#边连通度" class="headerlink" title="边连通度"></a>边连通度</h3><ul>
<li>最小边割集的势</li>
<li>G不连通：0</li>
<li>G是零图或平凡图：不讨论</li>
</ul>
<h3 id="连通度性质（-kappa’-G-k-）"><a href="#连通度性质（-kappa’-G-k-）" class="headerlink" title="连通度性质（$\kappa’(G)=k$）"></a>连通度性质（$\kappa’(G)=k$）</h3><ul>
<li>没有势为k-1或更小的边割集</li>
<li>任意去掉k-1或更少条边，仍然连通</li>
</ul>
<h3 id="k-边连通"><a href="#k-边连通" class="headerlink" title="k-边连通"></a>k-边连通</h3><p>即$\kappa’(G)\geq k$</p>
<h3 id="一个重要的定理"><a href="#一个重要的定理" class="headerlink" title="一个重要的定理"></a>一个重要的定理</h3><p>$\kappa(G)\leq \kappa’(G)\leq \delta(G)$</p>
<h3 id="kappa-G-的一个上界"><a href="#kappa-G-的一个上界" class="headerlink" title="$\kappa(G)$的一个上界"></a>$\kappa(G)$的一个上界</h3><p>$2\epsilon=\sum\limits_{u\in V(G)}d(u)\geq\delta(G)v\Rightarrow\delta(G)\leq \frac{2\epsilon}{v}\Rightarrow\kappa(G)\leq \delta(G)\leq \frac{2\epsilon}{v}\Rightarrow\kappa(G)$的一个上界$\lfloor\frac{2\epsilon}{v}\rfloor$</p>
<h3 id="kappa-G-kappa’-G-的一个充分条件"><a href="#kappa-G-kappa’-G-的一个充分条件" class="headerlink" title="$\kappa(G)=\kappa’(G)$的一个充分条件"></a>$\kappa(G)=\kappa’(G)$的一个充分条件</h3><p>G是3-正则图</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 k-连通图</title>
    <url>/2021/03/18/graphIntroduction-3/</url>
    <content><![CDATA[<h2 id="2-连通图的性质"><a href="#2-连通图的性质" class="headerlink" title="2-连通图的性质"></a>2-连通图的性质</h2><h3 id="块"><a href="#块" class="headerlink" title="块"></a>块</h3><p>G是块：G是无割点的连通图<br>H是G的块：H是G中极大无割点连通子图</p>
<h3 id="块的等价定义-G是-v-geq-3-的连通图"><a href="#块的等价定义-G是-v-geq-3-的连通图" class="headerlink" title="块的等价定义(G是$v\geq 3$的连通图)"></a>块的等价定义(G是$v\geq 3$的连通图)</h3><ul>
<li>G是2-连通的(块)</li>
<li>G的任二顶点共圈</li>
<li>G的任一顶点与任一边共圈</li>
<li>G的任二边共圈</li>
<li>对 $\forall u,v\in V(G)$ 及 $\forall e \in E(G)$ 存在 $(u,v)$ 路含有边 $e$</li>
<li>对 $\forall u,v,w\in V(G)$，存在 $(u,v)$ 路含有顶点 $w$</li>
<li>对 $\forall u,v,w\in V(G)$，存在 $(u,v)$ 路不含有顶点 $w$</li>
</ul>
<h3 id="块的一些其他性质"><a href="#块的一些其他性质" class="headerlink" title="块的一些其他性质"></a>块的一些其他性质</h3><ul>
<li>两个块最多只有一个公共顶点</li>
<li>两个块没有公共边</li>
<li>块是对图的边集的一种划分，等价关系是共圈</li>
<li>割点$\Leftrightarrow$块的交点</li>
<li>块-割点图</li>
</ul>
<h3 id="块的求法"><a href="#块的求法" class="headerlink" title="块的求法"></a>块的求法</h3><p>john Hopcroft和Robert Tarjan提出的经典算法</p>
<ul>
<li>思想：基于一次DFS</li>
<li>时间复杂度：线性</li>
<li>详细内容：可参考《算法导论》</li>
</ul>
<h2 id="Menger定理"><a href="#Menger定理" class="headerlink" title="Menger定理"></a>Menger定理</h2><h3 id="分离集"><a href="#分离集" class="headerlink" title="分离集"></a>分离集</h3><ul>
<li>x-y分离集(x-y cut)：$S \subseteq V(G)\setminus\{x,y\}:G-S$中没有$x-y$路</li>
<li>最小x-y分离集(minmum x-y cut)：势最小的x-y分离集</li>
<li>x-y分离数：最小x-y分离集的势，记为s(x,y)</li>
<li>两两内部无公共顶点的x-y路的最大条数：记作r(x,y)</li>
</ul>
<h3 id="Menger定理内容"><a href="#Menger定理内容" class="headerlink" title="Menger定理内容"></a>Menger定理内容</h3><p>设x,y是图G的两个不相邻的顶点，则s(x,y)=r(x,y)</p>
<h3 id="Menger定理推论"><a href="#Menger定理推论" class="headerlink" title="Menger定理推论"></a>Menger定理推论</h3><p>$v\geq k+1$的图G是k-连通图</p>
<p>$\Leftrightarrow$ G中任二顶点至少被k条两两内部无公共顶点的路所连</p>
<h3 id="一个困惑"><a href="#一个困惑" class="headerlink" title="一个困惑"></a>一个困惑</h3><p>$v\geq k+1$的图G是k-连通图</p>
<p>$\Leftrightarrow$ G中任二不相邻的顶点至少被k条两两内部无公共顶点的路所连</p>
<p>是否成立呢？</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 匹配的概念</title>
    <url>/2021/03/25/graphIntroduction-4/</url>
    <content><![CDATA[<h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><ul>
<li>匹配：M是G的匹配：G中两两不相邻边构成的集合</li>
<li>被饱和的顶点：M中边的端点被M饱和</li>
</ul>
<h2 id="完美匹配"><a href="#完美匹配" class="headerlink" title="完美匹配"></a>完美匹配</h2><ul>
<li>所有顶点都被饱和的匹配</li>
<li>阶是偶数</li>
<li>包含阶数的一半的边数</li>
<li>$K_{2n}$ 包含 $2n-1$ 个不重的完美匹配</li>
</ul>
<h2 id="最大匹配"><a href="#最大匹配" class="headerlink" title="最大匹配"></a>最大匹配</h2><ul>
<li>极大匹配：势极大的匹配，不是任何匹配的真子集</li>
<li>最大匹配：势最大的匹配</li>
</ul>
<h2 id="匹配的增光路"><a href="#匹配的增光路" class="headerlink" title="匹配的增光路"></a>匹配的增光路</h2><ul>
<li>M交错路：边交替属于$M$和$E(G)\setminus M$的路</li>
<li>M增广路：起点和终点未被$M$饱和的$M$交错路</li>
</ul>
<h2 id="最大匹配的充要条件"><a href="#最大匹配的充要条件" class="headerlink" title="最大匹配的充要条件"></a>最大匹配的充要条件</h2><p>图$G$的一个匹配$M$是最大匹配 $\Leftrightarrow$ $G$中不存在$M$的增广路</p>
<h2 id="奇分支"><a href="#奇分支" class="headerlink" title="奇分支"></a>奇分支</h2><ul>
<li>阶为奇数的连通分支</li>
<li>图G的奇分支的数量记作$o(G)$</li>
<li>向图中增加边不会增加奇分支的数量</li>
</ul>
<h2 id="完美匹配的充要条件"><a href="#完美匹配的充要条件" class="headerlink" title="完美匹配的充要条件"></a>完美匹配的充要条件</h2><p>图$G$有完美匹配 $\Leftrightarrow \forall S\subset V(G), o(G-S)\leq |S|$</p>
<h2 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h2><ul>
<li>$k$-因子：图$G$的$k$-正则生成子图</li>
<li>$1$-因子：完美匹配</li>
<li>可$k$-因子分解的：图G有一组$k$-因子的边集构成$E(G)$的一个划分</li>
<li>$k_{2n}$ 是可$1$-因子分解的</li>
<li>$\forall n&gt;0$, $k_{2n+1}$是可$2$-因子分解的</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 最大匹配算法</title>
    <url>/2021/04/01/graphIntroduction-5/</url>
    <content><![CDATA[<h2 id="面向二部图的增广路算法"><a href="#面向二部图的增广路算法" class="headerlink" title="面向二部图的增广路算法"></a>面向二部图的增广路算法</h2><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><ul>
<li>搜索一条增广路</li>
<li>如果找到了：替换得到更大的匹配，返回1</li>
<li>否则结束</li>
</ul>
<h3 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h3><ol>
<li>每轮从二部图的任意一侧的不饱和顶点开始，搜索增广路，以左侧为例。</li>
<li>左侧到右侧，找不在匹配中的边；右侧到左侧，找在匹配中的边。</li>
<li>如果找到一个不是起点的未饱和顶点 $\Rightarrow$ 则找到增广路 $\Rightarrow$ 替换得到更大的匹配 $\Rightarrow$ 转到5。</li>
<li>或深度优先搜索完所有的点和边，仍未找到增广路 $\Rightarrow$ 本轮没找到增广路 $\Rightarrow$ 转到5。</li>
<li>如果左侧还有不饱和的顶点没有搜索过，则转到1进入下一轮搜索。</li>
</ol>
<h3 id="算法正确性"><a href="#算法正确性" class="headerlink" title="算法正确性"></a>算法正确性</h3><ul>
<li>算法一定会终止<ul>
<li>DFS不重复的搜索 $\Rightarrow$ 每轮搜索一定会结束</li>
<li>总点数是有限的 $\Rightarrow$ 替换更大的匹配只能进行有限次 $\Rightarrow$ 轮数是有限的 </li>
</ul>
</li>
<li>算法一旦终止，找到的一定是最大匹配<ul>
<li>存在增广路 $\Rightarrow$ 一定能找到</li>
<li>不存在增广路 $\Rightarrow$ 无增广路 $\Rightarrow$ 找到最大匹配</li>
</ul>
</li>
</ul>
<h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><ul>
<li>搜索的最大轮数: $O(v)$</li>
<li>每轮搜索的最大步骤数: $O(v+\epsilon)$</li>
<li>整个算法时间代价: $O(v\epsilon)$</li>
</ul>
<h2 id="面向二部图的Hopcroft-karp算法"><a href="#面向二部图的Hopcroft-karp算法" class="headerlink" title="面向二部图的Hopcroft-karp算法"></a>面向二部图的Hopcroft-karp算法</h2><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><ul>
<li>在增广路算法基础上改进</li>
<li>总搜索最短的增广路</li>
<li>每轮搜索多条无公共顶点的增广路，全部替换</li>
</ul>
<h3 id="算法细节-1"><a href="#算法细节-1" class="headerlink" title="算法细节"></a>算法细节</h3><ol>
<li>每轮从二部图的任意一侧的<strong>所有</strong>不饱和顶点开始，搜索增广路，以左侧为例。</li>
<li>左侧到右侧，找不在匹配中的边；右侧到左侧，找在匹配中的边。</li>
<li><strong>并发的</strong>利用广度优先搜索，对所有顶点进行分层；所有可能的起点构成第0层；与第i层相邻的所有未分层的顶点构成第i+1层。</li>
<li>若第k层包含未饱和的右侧顶点 $\Rightarrow$ 在分层信息引导下反向DFS搜回第0层，找到增广路，并把找到了增广路<strong>做删除标记</strong> $\Rightarrow$ 第k层多个未饱和的右侧顶点可能找到多条无公共顶点的最短增广路。</li>
<li>若找不到增广路 $\Rightarrow$ 无增广路 $\Rightarrow$ 找到最大匹配；否则替换得到更大的匹配并返回步骤1。</li>
</ol>
<h3 id="算法正确性-1"><a href="#算法正确性-1" class="headerlink" title="算法正确性"></a>算法正确性</h3><ul>
<li>算法一定会终止<ul>
<li>BFS不重复的搜索 $\Rightarrow$ 每轮搜索一定会结束</li>
<li>总点数是有限的 $\Rightarrow$ 替换更大的匹配只能进行有限次 $\Rightarrow$ 轮数是有限的 </li>
</ul>
</li>
<li>算法一旦终止，找到的一定是最大匹配<ul>
<li>存在增广路 $\Rightarrow$ 一定能找到</li>
<li>不存在增广路 $\Rightarrow$ 无增广路 $\Rightarrow$ 找到最大匹配</li>
</ul>
</li>
</ul>
<h3 id="算法时间复杂度-1"><a href="#算法时间复杂度-1" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><ul>
<li>搜索的最大轮数: $O(\sqrt{v}$</li>
<li>每轮搜索的最大步骤数: $O(v+\epsilon)$</li>
<li>整个算法时间代价: $O(\sqrt{v}\epsilon)$</li>
</ul>
<h2 id="面向一般图的Edmonds算法"><a href="#面向一般图的Edmonds算法" class="headerlink" title="面向一般图的Edmonds算法"></a>面向一般图的Edmonds算法</h2><h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a>算法思路</h3><ul>
<li>在增广路算法的基础上改进</li>
<li>在每轮搜索中，如果一个顶点在本轮搜索中，已经经过长为偶数的交错路到达，同时又经过长为奇数的交错路到达，那么就发现了一个奇圈，两条路并称为flower；奇圈称为blossom</li>
<li>两条交错路的最长公共子路称为stem，其终点称为base</li>
<li>stem的最后一条边在当前匹配中，否则再往后的一条边一定在匹配中，是唯一的，和奇圈矛盾</li>
<li>blossom的顶点关联的边中，除blossom中的边和stem的最后一条边以外，其它都不在当前匹配中。(否则该边奇圈中的顶点在奇圈中的两条边都是未匹配的边，从而无法发现奇圈)</li>
<li>将blossom收缩为一个顶点：顶点合并，内部边删除、外部边保留</li>
<li>如果新图中有增广路，那么原图中一定有增广路</li>
</ul>
<h3 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h3><ul>
<li>在搜索过程中，一旦发现奇圈，将其收缩成一个顶点，再继续搜索</li>
<li>如果新图中的增广路经过收缩后的顶点，那么利用奇圈中的两条交错路之一（恰有一条会符合要求）将其还原到原图的增广路</li>
</ul>
<h3 id="算法时间复杂度-2"><a href="#算法时间复杂度-2" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><ul>
<li>朴素的实现：$O(v^4)$</li>
<li>合适的数据结构表示blossom和处理收缩：$O(v^3)$</li>
<li>一般图最大匹配的其他算法中，时间开销最少的能到达：$O(\sqrt{v}\epsilon)$</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 中国邮递员问题和旅行商问题</title>
    <url>/2021/04/08/graphIntroduction-6/</url>
    <content><![CDATA[<h2 id="中国邮递员问题"><a href="#中国邮递员问题" class="headerlink" title="中国邮递员问题"></a>中国邮递员问题</h2><h3 id="最优邮路"><a href="#最优邮路" class="headerlink" title="最优邮路"></a>最优邮路</h3><p>求赋权连通图中含有所有边且权和最小的闭途径</p>
<h3 id="Euler图"><a href="#Euler图" class="headerlink" title="Euler图"></a>Euler图</h3><ul>
<li>Euler迹：经过每条边恰好一次的迹</li>
<li>Euler闭迹：经过每条边恰好一次的闭迹</li>
<li>Euler图：有Euler闭迹的图</li>
<li>Euler图的最优邮路：即Euler闭迹</li>
</ul>
<h3 id="非Euler图的最优邮路"><a href="#非Euler图的最优邮路" class="headerlink" title="非Euler图的最优邮路"></a>非Euler图的最优邮路</h3><ul>
<li>必然要重复经过一些边</li>
<li>重复走过的边作为重边添加到图中 $\Rightarrow$ 新图一定是Euler图</li>
<li>原图的最优邮路和新图的Euler闭迹一一对应</li>
</ul>
<h3 id="问题转换"><a href="#问题转换" class="headerlink" title="问题转换"></a>问题转换</h3><ul>
<li>添加重边成为Euler图（如果本身不是的话）</li>
<li>使添加的边权和最小</li>
<li>找Euler闭迹</li>
</ul>
<h3 id="添加重边成为Euler图"><a href="#添加重边成为Euler图" class="headerlink" title="添加重边成为Euler图"></a>添加重边成为Euler图</h3><h4 id="Euler图的充要条件"><a href="#Euler图的充要条件" class="headerlink" title="Euler图的充要条件"></a>Euler图的充要条件</h4><p>一个非空连通图是Euler图当且仅当它没有奇度顶点</p>
<h4 id="添加重边的方案"><a href="#添加重边的方案" class="headerlink" title="添加重边的方案"></a>添加重边的方案</h4><ul>
<li>奇度顶点 $\rightarrow$ 偶度顶点</li>
<li>偶度顶点 $\rightarrow$ 偶度顶点</li>
</ul>
<h3 id="使添加的边权和最小"><a href="#使添加的边权和最小" class="headerlink" title="使添加的边权和最小"></a>使添加的边权和最小</h3><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>设$G$是赋权连通图，$G$中有$2k$个奇度顶点。$G^\star$是$G$的最优邮路对应的Euler图，令$E’=E(G^\star) \setminus E(G)$。则$H=G[E’]$是以$G$的奇度顶点为起点和终点的k条无公共边的最短路之并。</p>
<h4 id="重边的添加方法"><a href="#重边的添加方法" class="headerlink" title="重边的添加方法"></a>重边的添加方法</h4><ul>
<li>连接k对奇度顶点的k条无公共边的最短路</li>
<li>且边权和最小</li>
</ul>
<h2 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h2><h3 id="Hamilton图"><a href="#Hamilton图" class="headerlink" title="Hamilton图"></a>Hamilton图</h3><ul>
<li>Hamilton路：经过每个顶点恰一次的路</li>
<li>Hamilton圈：经过每个顶点恰一次的圈</li>
<li>Hamilton图：有Hamilton圈的图</li>
</ul>
<h3 id="旅行商问题的难度"><a href="#旅行商问题的难度" class="headerlink" title="旅行商问题的难度"></a>旅行商问题的难度</h3><ul>
<li>找Hamilton圈：NP-complete</li>
<li>找权和最小的Hamilton圈：NP-hard</li>
</ul>
<h3 id="旅行商问题的近似算法"><a href="#旅行商问题的近似算法" class="headerlink" title="旅行商问题的近似算法"></a>旅行商问题的近似算法</h3><ul>
<li>邻近点法</li>
<li>最小生成树法</li>
<li>最小权匹配法</li>
<li>Kernighan-Lin</li>
</ul>
<h3 id="邻近点法"><a href="#邻近点法" class="headerlink" title="邻近点法"></a>邻近点法</h3><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>贪心的选择最近的未访问的邻点前行</p>
<h4 id="算法性能"><a href="#算法性能" class="headerlink" title="算法性能"></a>算法性能</h4><ul>
<li>近似比$w(H)\setminus w(H^\star)\leq (\lceil log_2v\rceil)$</li>
<li>最终结果只和初始点的选取有关</li>
<li>时间复杂度：$O(v^2)$</li>
</ul>
<h3 id="最小生成树法"><a href="#最小生成树法" class="headerlink" title="最小生成树法"></a>最小生成树法</h3><h4 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h4><ul>
<li>找$K_n$的一颗最小生成树</li>
<li>为$T$中的每条边添加重边成为$T^\star$</li>
<li>找$T^\star$的一条Euler闭迹$C$</li>
<li>沿$C$前行，跳过已访问过的顶点，直至访问完所有顶点</li>
</ul>
<h4 id="算法性能-1"><a href="#算法性能-1" class="headerlink" title="算法性能"></a>算法性能</h4><ul>
<li>近似比$w(H)\setminus w(H^\star)\leq 2$</li>
<li>最终结果和最小生成树、闭迹、闭迹初始点有关</li>
<li>时间复杂度：找最小生成树$O(\epsilon+vlog v)$，添加重边$O(v)$，找Euler闭迹$O(v)$，沿Euler闭迹前行$O(v)$</li>
<li>本算法可以进一步优化</li>
</ul>
<h3 id="最小权匹配法"><a href="#最小权匹配法" class="headerlink" title="最小权匹配法"></a>最小权匹配法</h3><h4 id="基本思路-2"><a href="#基本思路-2" class="headerlink" title="基本思路"></a>基本思路</h4><ul>
<li>找$K_n$的一颗最小生成树</li>
<li>找$T$中奇度顶点在$K_n$中异于导出子图$G’$的最小权完美匹配$M$</li>
<li>将$M$添加到$T$中成为$T^\star$</li>
<li>找$T^\star$的一条Euler闭迹$C$</li>
<li>沿$C$前行，跳过已访问过的顶点，直至访问完所有顶点</li>
</ul>
<h4 id="算法性能-2"><a href="#算法性能-2" class="headerlink" title="算法性能"></a>算法性能</h4><ul>
<li>近似比$w(H)\setminus w(H^\star)\leq \frac{3}{2}$</li>
<li>最终结果和最小生成树、最小权完美匹配、闭迹、闭迹初始点有关</li>
<li>时间复杂度：找最小生成树$O(\epsilon+vlog v)$，找最小权完美匹配$O(\sqrt{v}\epsilon)，$添加边$O(v)$，找Euler闭迹$O(v)$，沿Euler闭迹前行$O(v)$</li>
<li>本算法可以进一步优化</li>
</ul>
<h3 id="Kernighan-Lin"><a href="#Kernighan-Lin" class="headerlink" title="Kernighan-Lin"></a>Kernighan-Lin</h3><p>理论近似比差，实际效果好的算法，详略。</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 支配集、点独立集和点覆盖集</title>
    <url>/2021/04/15/graphIntroduction-7/</url>
    <content><![CDATA[<h2 id="支配集"><a href="#支配集" class="headerlink" title="支配集"></a>支配集</h2><h3 id="支配集-控制集"><a href="#支配集-控制集" class="headerlink" title="支配集(控制集)"></a>支配集(控制集)</h3><ul>
<li>$D$是$G$支配集：$\forall v \in (V(G)\setminus D), \exists u \in D,(u,v)\in E(G)$</li>
<li>极小支配集：任何真子集都不是支配集</li>
<li>最小支配集：顶点数最小</li>
<li>支配数$\gamma(G)$：最小支配集的势</li>
</ul>
<h3 id="支配集与匹配"><a href="#支配集与匹配" class="headerlink" title="支配集与匹配"></a>支配集与匹配</h3><ul>
<li>从完美匹配中的每条边任取一个端点构成一个支配集</li>
<li>从最大匹配中的每条边中存在一个端点的取法构成支配集</li>
</ul>
<h3 id="支配集和其补集"><a href="#支配集和其补集" class="headerlink" title="支配集和其补集"></a>支配集和其补集</h3><ul>
<li>无孤立顶点的图$G$中，存在支配集$D$和$V(G)\setminus D$</li>
<li>无孤立顶点的图$G$中，极小支配集$D$的补集$V(G)\setminus D$是支配集</li>
<li>无孤立顶点的图$G$中，对任意一个极小支配集$D_1$，必存在另一个极小支配集$D_2$，使得$D_1\cap D_2=\emptyset$</li>
<li>$V(G)\setminus D_1$是支配集且$D_1\cap (V(G)\setminus D_1)=\emptyset \Rightarrow$在$V(G)\setminus D_1$的子集中取极小可得$D_2$</li>
</ul>
<h3 id="极小支配集的充要条件"><a href="#极小支配集的充要条件" class="headerlink" title="极小支配集的充要条件"></a>极小支配集的充要条件</h3><p>图$G$的支配集$D$是一个极小支配集当且仅当$D$中每个顶点$v$满足下列条件之一：</p>
<ul>
<li>$N(v)\cap D =\emptyset$</li>
<li>存在$u\in V(G)\setminus D$使得$N(u)\cap D={v}$</li>
</ul>
<h3 id="支配数的估计"><a href="#支配数的估计" class="headerlink" title="支配数的估计"></a>支配数的估计</h3><ul>
<li>无孤立顶点的图$G$满足$\gamma(G)\leq \frac{v}{2}$</li>
<li>$\lceil\frac{v}{1+\Delta(G)}\rceil\leq \gamma(G)\leq v-\Delta(G)$</li>
</ul>
<h3 id="求最小支配集的算法"><a href="#求最小支配集的算法" class="headerlink" title="求最小支配集的算法"></a>求最小支配集的算法</h3><ul>
<li>和集合覆盖问题可以相互转化：NP-hard</li>
<li>贪心算法：每次迭代总选能支配最多剩余顶点的那个顶点，近似比$1+log\ v$</li>
<li>不存在近似比好于对数的多项式时间算法（除非P=NP），即贪心已经足够好了</li>
</ul>
<h3 id="支配集的应用"><a href="#支配集的应用" class="headerlink" title="支配集的应用"></a>支配集的应用</h3><ul>
<li>奇次支配集：Lights Out</li>
<li>最小连通支配集：自组网络中的虚拟骨干网</li>
</ul>
<h2 id="点独立集"><a href="#点独立集" class="headerlink" title="点独立集"></a>点独立集</h2><h3 id="点独立集-1"><a href="#点独立集-1" class="headerlink" title="点独立集"></a>点独立集</h3><ul>
<li>$I$是$G$的点独立集：$\forall u,v\in I,(u,v)\notin E(G)$</li>
<li>极大点独立集：顶点数极多（不是任何一个点独立集的真子集）</li>
<li>最大点独立集：顶点数最多</li>
<li>独立数$\alpha(G)$：最大点独立集的势</li>
</ul>
<h3 id="点独立集与支配集"><a href="#点独立集与支配集" class="headerlink" title="点独立集与支配集"></a>点独立集与支配集</h3><ul>
<li>极大点独立集必然是最小支配集</li>
<li>若$I$是点独立集，则它是极大点独立集当且仅当它是支配集</li>
<li>$\alpha(G)\geq \gamma(G)$</li>
</ul>
<h3 id="点独立集与连通度"><a href="#点独立集与连通度" class="headerlink" title="点独立集与连通度"></a>点独立集与连通度</h3><ul>
<li>设$v(G)\geq 2$，若图$G$中任意两个不相邻顶点$x,y$均有$d(x)+d(y)\geq v(G)$，则$\alpha(G)\leq \kappa(G)$</li>
<li>设$G$是$v$阶简单图$(v \geq 2)$。若$\delta(G)\geq \frac{v}{2}$，则$\alpha(G)\leq \kappa(G)$</li>
</ul>
<h3 id="求最大独立集的算法"><a href="#求最大独立集的算法" class="headerlink" title="求最大独立集的算法"></a>求最大独立集的算法</h3><ul>
<li>最大独立集即补图中最大团：NP-hard</li>
<li>不存在近似比显著好于线性的多项式时间算法（除非P=NP）</li>
</ul>
<h3 id="独立集的应用"><a href="#独立集的应用" class="headerlink" title="独立集的应用"></a>独立集的应用</h3><h4 id="最大带权独立集：图像分割"><a href="#最大带权独立集：图像分割" class="headerlink" title="最大带权独立集：图像分割"></a>最大带权独立集：图像分割</h4><ul>
<li>顶点：所有可能的块</li>
<li>边：重叠的块</li>
<li>权：块的显著程度</li>
</ul>
<h2 id="点覆盖集"><a href="#点覆盖集" class="headerlink" title="点覆盖集"></a>点覆盖集</h2><h3 id="点覆盖集-1"><a href="#点覆盖集-1" class="headerlink" title="点覆盖集"></a>点覆盖集</h3><ul>
<li>$F$是$G$的点覆盖集：$\forall (u,v)\in E(G),\{u,v\}\cap F\neq \emptyset$</li>
<li>极小点覆盖集：顶点数极少（任何一个真子集都不是点覆盖集）</li>
<li>最小点覆盖集：顶点数最少</li>
<li>点覆盖数$\beta(G)$：最小点覆盖集的势</li>
</ul>
<h3 id="点覆盖集与支配集"><a href="#点覆盖集与支配集" class="headerlink" title="点覆盖集与支配集"></a>点覆盖集与支配集</h3><ul>
<li>点覆盖集与所有边关联</li>
<li>支配集与所有剩余点相邻</li>
<li>连通图中点覆盖集一定是支配集，但支配集不一定是点覆盖集</li>
</ul>
<h3 id="点覆盖集与独立集"><a href="#点覆盖集与独立集" class="headerlink" title="点覆盖集与独立集"></a>点覆盖集与独立集</h3><ul>
<li>$F$是点覆盖集当且仅当$V(G)\setminus F$是点独立集</li>
<li>$F$是极小点覆盖集当且仅当$V(G)\setminus F$是极大点独立集</li>
<li>$\alpha(G)+\beta(G)=v(G)$</li>
</ul>
<h3 id="求最小点覆盖集的算法"><a href="#求最小点覆盖集的算法" class="headerlink" title="求最小点覆盖集的算法"></a>求最小点覆盖集的算法</h3><h4 id="点覆盖集和极大匹配的关系"><a href="#点覆盖集和极大匹配的关系" class="headerlink" title="点覆盖集和极大匹配的关系"></a>点覆盖集和极大匹配的关系</h4><ul>
<li>极大匹配饱和的所有顶点构成一个点覆盖集</li>
<li>近似比2</li>
<li>找极大匹配即可</li>
<li>不存在近似比好于1.3606的多项式时间算法（除非P=NP）</li>
<li>目前还没有找到近似比显著小于2的多项式时间算法：基于极大匹配的算法还不错</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 边独立集和边覆盖集</title>
    <url>/2021/04/22/graphIntroduction-8/</url>
    <content><![CDATA[<h2 id="边独立集"><a href="#边独立集" class="headerlink" title="边独立集"></a>边独立集</h2><h3 id="边独立集-1"><a href="#边独立集-1" class="headerlink" title="边独立集"></a>边独立集</h3><ul>
<li>边独立集（匹配）：两两不相邻的边</li>
<li>极大边独立集（极大匹配）：不是任何边独立集的真子集</li>
<li>最大边独立集（最大匹配）：边数最多</li>
<li>边独立数$\alpha’(G)$：最大边独立集的势</li>
</ul>
<h3 id="边独立集与点覆盖集"><a href="#边独立集与点覆盖集" class="headerlink" title="边独立集与点覆盖集"></a>边独立集与点覆盖集</h3><ul>
<li>对任何无环边的图$G$，$\alpha’(G)\leq \beta(G)$</li>
<li>二部图$X-Y$有饱和$X$的匹配当且仅当$\forall S\subset X,|N(S)|\geq |S|$</li>
<li>二部图$G$，$\alpha’(G)=\beta(G)$</li>
</ul>
<h4 id="求最小点覆盖的算法"><a href="#求最小点覆盖的算法" class="headerlink" title="求最小点覆盖的算法"></a>求最小点覆盖的算法</h4><ul>
<li>一般图：不存在近似比好于1.3606的多项式时间算法（除非P=NP）</li>
<li>二部图：存在精确的多项式时间算法</li>
</ul>
<h4 id="二部图最小点覆盖算法细节"><a href="#二部图最小点覆盖算法细节" class="headerlink" title="二部图最小点覆盖算法细节"></a>二部图最小点覆盖算法细节</h4><ul>
<li>求最大匹配</li>
<li>未饱和顶点作为第0层</li>
<li>根据交错路的距离对其他顶点分层</li>
<li>每条边都有一个端点在奇层</li>
<li>奇层顶点恰根据匹配中一条边引出一个新的偶层顶点</li>
</ul>
<h3 id="边独立数的估计"><a href="#边独立数的估计" class="headerlink" title="边独立数的估计"></a>边独立数的估计</h3><p>设图$G$无孤立点，则$\lceil\frac{v}{1+\Delta(G)}\rceil\leq \alpha’(G)\leq \lfloor\frac{v}{2}\rfloor$</p>
<h2 id="边覆盖集"><a href="#边覆盖集" class="headerlink" title="边覆盖集"></a>边覆盖集</h2><h3 id="边覆盖集-1"><a href="#边覆盖集-1" class="headerlink" title="边覆盖集"></a>边覆盖集</h3><ul>
<li>$L$是$G$（$G$无孤立点即$\delta(G)&gt;0$）的边覆盖集：$\forall u\in V(G),\exists v\in V(G),(u,v)\in L$</li>
<li>极小边覆盖集：任何一个真子集都不再是边覆盖集</li>
<li>最小边覆盖集：边数最少</li>
<li>边覆盖数$\beta’(G)$：最小边覆盖集的势</li>
</ul>
<h3 id="边覆盖集与边独立集"><a href="#边覆盖集与边独立集" class="headerlink" title="边覆盖集与边独立集"></a>边覆盖集与边独立集</h3><ul>
<li>若$\delta(G)&gt;0$，则$\alpha’(G)+\beta’(G)=v(G)$</li>
<li>设$\delta(G)&gt;0$，则$\alpha’(G)\leq \beta’(G)$，等号成立当且仅当$G$有完美匹配</li>
</ul>
<h3 id="边覆盖集与点独立集"><a href="#边覆盖集与点独立集" class="headerlink" title="边覆盖集与点独立集"></a>边覆盖集与点独立集</h3><ul>
<li>$\alpha(G)\leq \beta’(G)$</li>
<li>设$G$是二部图且$\delta(G)\geq 0$，则$\alpha(G)=\beta’(G)$</li>
</ul>
<h3 id="边覆盖数的估计"><a href="#边覆盖数的估计" class="headerlink" title="边覆盖数的估计"></a>边覆盖数的估计</h3><p>设$G$无孤立点，则$\lceil\frac{v}{2}\rceil\leq\beta’(G)\leq\lceil v\frac{\Delta(G)}{1+\Delta(G)}\rceil$</p>
<h3 id="无孤立点图中更一般的关系"><a href="#无孤立点图中更一般的关系" class="headerlink" title="无孤立点图中更一般的关系"></a>无孤立点图中更一般的关系</h3><ul>
<li>边独立集小于等于边覆盖集，当边独立集为完美匹配，边覆盖集为最小时取等号</li>
<li>边独立集小于等于点覆盖集，当边独立集为最大匹配，点覆盖集为最小时取等号</li>
<li>点独立集小于等于边覆盖集，当点独立集为最大，边覆盖集为最小时取等号</li>
<li>$\gamma(G)\leq \min\{\alpha(G),\beta(G),\alpha’(G),\beta’(G)\}$</li>
</ul>
<h3 id="求最小边覆盖集的算法"><a href="#求最小边覆盖集的算法" class="headerlink" title="求最小边覆盖集的算法"></a>求最小边覆盖集的算法</h3><ul>
<li>原理是$\beta’(G)=v(G)-\alpha’(G)=\alpha’(G)+[v(G)-2\alpha’(G)]$</li>
<li>最大匹配</li>
<li>每个未饱和点任取一边</li>
</ul>
<h2 id="关系小节"><a href="#关系小节" class="headerlink" title="关系小节"></a>关系小节</h2><ul>
<li>$\gamma(G)\leq \min\{\alpha(G),\beta(G),\alpha’(G),\beta’(G)\}$</li>
<li>$\alpha(G)\leq \beta’(G)$</li>
<li>$\alpha’(G)\leq \beta(G)$</li>
<li>$\alpha’(G)\leq \beta’(G)$</li>
<li>$\alpha(G)+ \beta(G)=v(G)$</li>
<li>$\alpha’(G)+ \beta’(G)=v(G)$</li>
</ul>
<h2 id="求解算法小节"><a href="#求解算法小节" class="headerlink" title="求解算法小节"></a>求解算法小节</h2><ul>
<li>最小支配集：近似算法，贪心</li>
<li>最大点独立集：最小点覆盖集的补集</li>
<li>最小点覆盖集：一般图用近似算法，基于极大匹配；二部图基于最大匹配</li>
<li>最大边独立集：即最大匹配求解算法，一般图用Edmonds，二部图用Hopcroft-Karp</li>
<li>最小边覆盖集：基于最大匹配</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 平面图的概念</title>
    <url>/2021/04/29/graphIntroduction-9/</url>
    <content><![CDATA[<h3 id="平面图的概念"><a href="#平面图的概念" class="headerlink" title="平面图的概念"></a>平面图的概念</h3><h4 id="可平面图"><a href="#可平面图" class="headerlink" title="可平面图"></a>可平面图</h4><ul>
<li>定义：能画在平面上，且任意两边不交叉</li>
<li>交叉：包含端点以外的其他公共点</li>
<li>这个画法叫做一种平面嵌入</li>
<li>画出来的结果是一个平面图</li>
<li>两个很重要的不可平面图，是$K_5,K_{3,3}$</li>
</ul>
<h4 id="可平面图的性质"><a href="#可平面图的性质" class="headerlink" title="可平面图的性质"></a>可平面图的性质</h4><ul>
<li>可平面图的子图是可平面图</li>
<li>环边和重边不影响可平面图</li>
</ul>
<h4 id="面和边界"><a href="#面和边界" class="headerlink" title="面和边界"></a>面和边界</h4><ul>
<li>面<ul>
<li>平面图的边将平面划分出的极大区域</li>
<li>面数：$\varphi(G)$</li>
</ul>
</li>
<li>无限面<ul>
<li>面积无限的面，又称外部面</li>
<li>平面图只有一个无限面</li>
<li>每个非外部面都能按照另一种平面嵌入变为外部面</li>
</ul>
</li>
<li>边界<ul>
<li>包围一个面的所有边</li>
</ul>
</li>
<li>面的度数<ul>
<li>边界上边的数量，又称长度</li>
<li>只在一个面的边界上的边（即割边）计两次</li>
<li>图的所有面的度数和=所有边数目的两倍</li>
</ul>
</li>
<li>平面图G是二部图的充要条件是任意一个面的度数是偶数</li>
</ul>
<h4 id="极大可平面图"><a href="#极大可平面图" class="headerlink" title="极大可平面图"></a>极大可平面图</h4><ul>
<li>极大可平面图：<ul>
<li>简单可平面图</li>
<li>任意增加一条连接不相邻顶点的边都不再是可平面图</li>
</ul>
</li>
<li>性质<ul>
<li>一定是连通图</li>
<li>不能有割点或割边（$v\geq 3$时）</li>
</ul>
</li>
<li>对于至少含3个顶点的极大平面图，其每个面的度数必定都是3</li>
</ul>
<h3 id="Euler公式及其应用"><a href="#Euler公式及其应用" class="headerlink" title="Euler公式及其应用"></a>Euler公式及其应用</h3><h4 id="Euler公式"><a href="#Euler公式" class="headerlink" title="Euler公式"></a>Euler公式</h4><ul>
<li>对于连通的平面图，$v-\epsilon+\varphi=2$</li>
<li>对于具有$w$个连通分支的平面图，$v-\epsilon+\varphi=w+1$</li>
</ul>
<h4 id="Euler公式的应用"><a href="#Euler公式的应用" class="headerlink" title="Euler公式的应用"></a>Euler公式的应用</h4><ul>
<li>设$G$是连通的平面图，且每个面的度数至少为$l(l\geq 3)$，则$\epsilon\leq \frac{l}{l-2}(v-2)$</li>
<li>设$G$是具有$w(w\geq 1)$个连通分支的平面图，各个面的度数至少为$l(l\geq 3)$，则$\epsilon\leq \frac{l}{l-2}(v-w-1)$</li>
<li>$K_5$和$K_{3,3}$都是不可平面图</li>
<li>设$G$是$v\geq 3$的简单平面图，则$\epsilon\leq 3v-6$</li>
<li>设$G$是$v\geq 3$的简单平面图，则$\delta \leq 5$</li>
<li>设$G$是$v\geq 3$的极大简单平面图，则$\epsilon= 3v-6,\varphi=2v-4$</li>
<li>设$G$是$v\geq 3$的简单连通图，则$G$是极大平面图当且仅当$G$的每个面的度数均为3</li>
<li>不可能用正圆画出4个集合的Venn图</li>
</ul>
<h3 id="平面图的对偶图"><a href="#平面图的对偶图" class="headerlink" title="平面图的对偶图"></a>平面图的对偶图</h3><h4 id="对偶图"><a href="#对偶图" class="headerlink" title="对偶图"></a>对偶图</h4><ul>
<li>面$\rightarrow$点</li>
<li>公共边界上的边$\rightarrow$连接两点的边</li>
<li>割边$\rightarrow$环</li>
<li>记作$G^\star$</li>
</ul>
<h4 id="对偶图的性质"><a href="#对偶图的性质" class="headerlink" title="对偶图的性质"></a>对偶图的性质</h4><ul>
<li>$G$的割边对应$G^\star$的环边，$G$的环边对应$G^\star$的割边</li>
<li>$G^\star$是连通图</li>
<li>$G^\star$是平面图</li>
<li>定理：设$G^\star$是具有$w$个连通分支的平面图$G$的对偶图，则<ul>
<li>$v^\star = \varphi$</li>
<li>$\epsilon^\star =\epsilon$</li>
<li>$\varphi^\star = v-w+1$</li>
<li>设$G^\star$的顶点${v_i}^\star$位于$G$的面$F_i$中，则$d_{G^\star}({v_i}^\star)=d(F_i)$</li>
</ul>
</li>
<li>同构图的对偶图不一定同构</li>
<li>对于连通的平面图$G$，其对偶图的对偶图还是$G$，即$(G^\star)^\star=G$</li>
</ul>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第一章-行列式</title>
    <url>/2021/11/12/linearAlgebra1/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="拉普拉斯展开式"><a href="#拉普拉斯展开式" class="headerlink" title="拉普拉斯展开式"></a>拉普拉斯展开式</h2><ul>
<li>$\pmb{A}$和$\pmb{B}$分别是$m$阶矩阵和$n$阶矩阵</li>
<li>$\left | \begin{matrix} \pmb{A}&amp; \pmb{\star} \\ \pmb{O}&amp; \pmb{B} \\ \end{matrix} \right |=\left | \begin{matrix} \pmb{A}&amp; \pmb{O} \\ \pmb{\star}&amp; \pmb{B} \\ \end{matrix} \right |=|\pmb{A}|\cdot|\pmb{B}|$</li>
<li>$\left | \begin{matrix} \pmb{O}&amp; \pmb{A} \\ \pmb{B}&amp; \pmb{\star} \\ \end{matrix} \right |=\left | \begin{matrix} \pmb{\star}&amp; \pmb{A} \\ \pmb{B}&amp; \pmb{O} \\ \end{matrix} \right |=(-1)^{mn}|\pmb{A}|\cdot|\pmb{B}|$</li>
</ul>
<h2 id="范德蒙行列式"><a href="#范德蒙行列式" class="headerlink" title="范德蒙行列式"></a>范德蒙行列式</h2><p>$\left | \begin{matrix} 1&amp; 1&amp; \cdots&amp; 1 \\ x_1&amp; x_2&amp; \cdots&amp; x_n \\ {x_1}^2&amp; {x_2}^2&amp; \cdots&amp; {x_n}^2 \\ \vdots&amp; \vdots&amp; \ &amp; \vdots \\ {x_1}^{n-1}&amp; {x_2}^{n-1}&amp; \cdots&amp; {x_n}^{n-1} \end{matrix} \right |=\prod\limits_{1\leq j\leq i\leq n}(x_i-x_j)$</p>
<h2 id="爪型行列式"><a href="#爪型行列式" class="headerlink" title="爪型行列式"></a>爪型行列式</h2><ul>
<li>形式：$\left | \begin{matrix} a_{11}&amp; a_{12}&amp; a_{13}&amp; \cdots &amp;a_{1n}  \\ a_{21}&amp; a_{22}&amp; \ &amp; \ &amp; \  \\ a_{31}&amp; \ &amp; a_{33} &amp; \ &amp;\  \\ \vdots &amp; \  &amp; \ &amp; \ &amp;\   \\ a_{n1} &amp; \ &amp; \ &amp; \  &amp;a_{nn} \end{matrix} \right |$</li>
<li>解法：把第$1$列以外的第$i$列，按某个比例加到第$1$列，消去第$1$列的第$i$行元素</li>
</ul>
<h2 id="代数余子式"><a href="#代数余子式" class="headerlink" title="代数余子式"></a>代数余子式</h2><p>代数余子式相关问题考虑根据下面的思路</p>
<ul>
<li>代数余子式定义：直接计算</li>
<li>行列式构造：利用某行代数余子式与该行元素值无关，<strong>构造</strong>新的行列式</li>
<li>行列式定义：<strong>行列式的值等于</strong>其任意一行（列）的元素与该行（列）代数余子式的乘积和</li>
<li>行列式性质：行列式任意一行（列）的元素与其他任意行（列）代数余子式的乘积和<strong>等于0</strong></li>
<li>伴随矩阵定义：矩阵的伴随矩阵的<strong>第i行第j列</strong>元素等于矩阵的行列式<strong>第j行第i列</strong>的代数余子式</li>
</ul>
<h2 id="数字型行列式计算"><a href="#数字型行列式计算" class="headerlink" title="数字型行列式计算"></a>数字型行列式计算</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul>
<li>不断把某行的k倍加到另一行，进行化简</li>
<li>按行或列展开，进行降阶</li>
</ul>
<h3 id="行列式拓展"><a href="#行列式拓展" class="headerlink" title="行列式拓展"></a>行列式拓展</h3><ul>
<li>$\left | \begin{matrix} a_{11}&amp;a_{12}&amp;\cdots&amp;a_{1n}\\ a_{21} &amp;a_{22} &amp;\cdots &amp;a_{2n} \\ \vdots &amp;\vdots&amp; \  &amp;\vdots\\ a_{n1}&amp;a_{n2}&amp;\cdots&amp;a_{nn} \end{matrix} \right |=\left | \begin{matrix} 1&amp; 1 &amp; 1&amp; \cdots&amp; 1 \\ 0&amp; a_{11}&amp;a_{12}&amp;\cdots&amp;a_{1n}\\ 0&amp;a_{21} &amp;a_{22} &amp;\cdots &amp;a_{2n} \\0&amp; \vdots &amp;\vdots&amp; \  &amp;\vdots\\ 0&amp;a_{n1}&amp;a_{n2}&amp;\cdots&amp;a_{nn} \end{matrix} \right |$</li>
</ul>
<h3 id="转化为求特征值问题"><a href="#转化为求特征值问题" class="headerlink" title="转化为求特征值问题"></a>转化为求特征值问题</h3><ul>
<li>详见第二章矩阵笔记的矩阵加法分解部分</li>
</ul>
<h2 id="三对角型行列式"><a href="#三对角型行列式" class="headerlink" title="三对角型行列式"></a>三对角型行列式</h2><ul>
<li>求解$D_n=\left | \begin{matrix} a&amp; b&amp; \ &amp; \  &amp;\  \\ c&amp; a&amp; b&amp; \ &amp; \  \\ \ &amp; c&amp; a&amp; \ddots&amp;\  \\ \ &amp; \  &amp; \ddots&amp; \ddots&amp;b  \\ \ &amp; \ &amp; \ &amp; c &amp;a \end{matrix} \right |$</li>
<li>核心思路<ul>
<li>把$D_n$展开</li>
<li>算出递推式：$D_n=aD_{n-1}-bcD_{n-2}$</li>
<li>算出$D_1$和$D_2$</li>
<li>如果题目是计算，则用数列知识继续算</li>
<li>如果题目是证明，考虑数学归纳法比较方便</li>
</ul>
</li>
</ul>
<h2 id="抽象型行列式计算"><a href="#抽象型行列式计算" class="headerlink" title="抽象型行列式计算"></a>抽象型行列式计算</h2><p>主要是利用一些行列式性质来算，比如</p>
<ul>
<li>$|k \pmb{A}|=k^n|\pmb{A}|$</li>
<li>$|\pmb{A}^T|=|\pmb{A}|$</li>
<li>$|\pmb{A}\pmb{B}|=|\pmb{A}||\pmb{B}|$</li>
<li>$|\pmb{A}^\star|=|\pmb{A}|^{n-1}$</li>
<li>$|\pmb{A}^{-1}|=|\pmb{A}|^{-1}$</li>
<li>$|\pmb{A}|=\prod\limits_{i=1}^n\lambda_i$</li>
<li>$|\pmb{A}|\sim|\pmb{B}|\Rightarrow |\pmb{A}|=|\pmb{B}|$</li>
</ul>
<h2 id="判定行列式是否为零"><a href="#判定行列式是否为零" class="headerlink" title="判定行列式是否为零"></a>判定行列式是否为零</h2><p>下面条件是等价的</p>
<ul>
<li><strong>行列式</strong>：$|\pmb{A}|=0$（可用各种性质直接计算）</li>
<li><strong>矩阵</strong>：$\pmb{A}$不可逆</li>
<li><strong>秩</strong>：$r(\pmb{A})&lt;n$</li>
<li><strong>向量</strong>：$\pmb{A}$的各行（列）向量线性相关</li>
<li><strong>线性方程组</strong>：$\pmb{Ax}=\pmb{0}$有非零解</li>
<li><strong>特征值</strong>：存在$\lambda_i=0$</li>
</ul>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-矩阵</title>
    <url>/2021/11/12/linearAlgebra2/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h2><h3 id="伴随矩阵的求法"><a href="#伴随矩阵的求法" class="headerlink" title="伴随矩阵的求法"></a>伴随矩阵的求法</h3><ul>
<li>定义法<ul>
<li>伴随矩阵的第$i$行第$j$列的值是原矩阵第$j$行第$i$列的代数余子式</li>
<li>注意这里有一个转置操作</li>
</ul>
</li>
<li>性质法<ul>
<li>$\pmb{A}\pmb{A}^\star=|\pmb{A}|\pmb{E}$</li>
<li>注意这种方法求伴随矩阵要求$\pmb{A}$可逆，此时$\pmb{A}^\star=|\pmb{A}|\pmb{A}^{-1}$</li>
</ul>
</li>
</ul>
<h3 id="伴随矩阵相关证明"><a href="#伴随矩阵相关证明" class="headerlink" title="伴随矩阵相关证明"></a>伴随矩阵相关证明</h3><ul>
<li>思路<ul>
<li>一般会用到伴随矩阵的性质$\pmb{A}\pmb{A}^\star=\pmb{A}^\star\pmb{A}=|\pmb{A}|\pmb{E}$出发</li>
<li>结合矩阵运算法则</li>
<li>一般会用到表达式中其他操作的定义</li>
</ul>
</li>
<li>举例：证明$(\pmb{A}^\star)^{-1}=(\pmb{A^{-1}})^\star$<ul>
<li>即证明$\pmb{A}^\star(\pmb{A^{-1}})^\star=\pmb{E}$（可逆操作的定义）</li>
<li>即证明$\pmb{A}\pmb{A}^\star(\pmb{A^{-1}})^\star\pmb{A}^{-1}=\pmb{E}$（矩阵基本左乘右乘法则）</li>
<li>即证明$(|\pmb{A}|\pmb{E})(|\pmb{A}|^{-1}\pmb{E})=|\pmb{A}\pmb{A}^{-1}|\pmb{E}=\pmb{E}$（伴随矩阵的性质、行列式运算法则）</li>
</ul>
</li>
</ul>
<h2 id="初等变换"><a href="#初等变换" class="headerlink" title="初等变换"></a>初等变换</h2><ul>
<li>初等变换<ul>
<li>倍乘变换</li>
<li>互换变换</li>
<li>倍加变换</li>
</ul>
</li>
<li>初等矩阵：对单位矩阵初等变换<ul>
<li>倍乘矩阵</li>
<li>互换矩阵</li>
<li>倍加矩阵</li>
</ul>
</li>
<li>常用性质<ul>
<li>性质1：左（右）乘初等矩阵$\Leftrightarrow$作对应的初等行（列）变换，不改变矩阵的型和秩</li>
<li>性质2：可逆矩阵可以表示为有限个初等矩阵的乘积，即可以通过初等行变换转换为单位矩阵<ul>
<li>后面矩阵初等变换分解的一个推论</li>
</ul>
</li>
<li>性质3：两个矩阵是等价矩阵（关系符号是$\cong$）$\Leftrightarrow$两个矩阵可以通过有限次初等变换相互转换$\Leftrightarrow$两个矩阵同型且秩相同<ul>
<li>第一个到第二个：等价矩阵的定义</li>
<li>第二个到第三个：初等变换不改变矩阵的型和秩</li>
<li>第三个到第二个：先用矩阵的初等变换分解，再利用左右乘初等矩阵等价于作相应初等变换</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="可逆矩阵"><a href="#可逆矩阵" class="headerlink" title="可逆矩阵"></a>可逆矩阵</h2><h3 id="判断矩阵是否可逆"><a href="#判断矩阵是否可逆" class="headerlink" title="判断矩阵是否可逆"></a>判断矩阵是否可逆</h3><p><em>该问题是行列式一章中，判断行列式是否为0的镜像问题</em><br>下面条件是等价的</p>
<ul>
<li><strong>行列式</strong>：$|\pmb{A}|\neq 0$</li>
<li><strong>矩阵</strong>：$\pmb{A}$可逆，即存在$\pmb{B}$，使得$\pmb{A}\pmb{B}=\pmb{E}$</li>
<li><strong>秩</strong>：$r(\pmb{A})=n$</li>
<li><strong>向量</strong>：$\pmb{A}$的各行（列）向量线性无关</li>
<li><strong>线性方程组</strong>：$\pmb{Ax}=\pmb{0}$有唯一零解（根据线性方程组解的结构也可以说$\pmb{Ax}=\pmb{b}$有唯一解）</li>
<li><strong>特征值</strong>：所有特征值$\lambda_i\neq 0$</li>
</ul>
<h3 id="求逆矩阵基本思路"><a href="#求逆矩阵基本思路" class="headerlink" title="求逆矩阵基本思路"></a>求逆矩阵基本思路</h3><ul>
<li>利用伴随矩阵的性质<ul>
<li>$\pmb{A}\pmb{A}^\star=|\pmb{A}|\pmb{E}\Rightarrow \pmb{A}^{-1}=\frac{\pmb{A}^\star}{|\pmb{A}|}$</li>
</ul>
</li>
<li>初等变换法<ul>
<li>$(\pmb{A},\pmb{E})$经过初等变换$(\pmb{E},\pmb{A}^{-1})$</li>
</ul>
</li>
<li>可逆矩阵定义法<ul>
<li>存在$\pmb{B}$，使得$\pmb{A}\pmb{B}=\pmb{E}$</li>
</ul>
</li>
<li>已知$\pmb{A}^n=\pmb{O}$<ul>
<li>根据$\pmb{E}=\pmb{E}^n-\pmb{A}^n=(\pmb{E}-\pmb{A})(\pmb{E}+\pmb{A}+\cdots+\pmb{A}^{n-1})$和可逆矩阵定义，可以得到$\pmb{E}-\pmb{A}$的逆矩阵</li>
</ul>
</li>
</ul>
<h2 id="秩的相关结论和证明"><a href="#秩的相关结论和证明" class="headerlink" title="秩的相关结论和证明"></a>秩的相关结论和证明</h2><p><em>本节利用线性方程组或向量组来证明结论，理解本节有利于思考其他的和秩有关的证明题</em></p>
<ul>
<li>结论1：$\pmb{A}$有$n$列，$\pmb{B}$有$n$行，$\pmb{A}\pmb{B}=0\Rightarrow r(\pmb{A})+r(\pmb{B})\leq n$，从线性方程组角度证明：<ul>
<li>根据$\pmb{B}$的每一列都是齐线性方程组$\pmb{A}\pmb{x}=\pmb{0}$的解向量</li>
<li>线性无关的解向量个数为$n-r(\pmb{A})\Rightarrow r(\pmb{B})\leq n-r(\pmb{A})$</li>
</ul>
</li>
<li>结论2：$r(\pmb{A}^T\pmb{A})=r(\pmb{A})$，从线性方程组角度证明：<ul>
<li>$\pmb{A}\pmb{x}=\pmb{0}$的解向量是$\pmb{A}^T\pmb{A}\pmb{x}=\pmb{0}$的解向量<ul>
<li>因为$\pmb{A}^T\pmb{A}\pmb{x}=\pmb{A}^T\pmb{0}=\pmb{0}$</li>
</ul>
</li>
<li>$\pmb{A}^T\pmb{A}\pmb{x}=\pmb{0}$的解向量是$\pmb{A}\pmb{x}=\pmb{0}$的解向量<ul>
<li>因为$\pmb{x}^T\pmb{A}^T\pmb{A}\pmb{x}=(\pmb{Ax})^T(\pmb{Ax})=0\Rightarrow \pmb{Ax}=\pmb{0}$</li>
</ul>
</li>
</ul>
</li>
<li>结论3：$r(\pmb{A}+\pmb{B})\leq r(\pmb{A})+r(\pmb{B})$，从列向量组角度证明：<ul>
<li>$\pmb{A}$的所有列向量和$\pmb{B}$的所有列向量组构成的列向量组秩$r$不超过$r(\pmb{A})+r(\pmb{B})$</li>
<li>$\pmb{A}+\pmb{B}$的列向量都是$\pmb{A}$的列向量和$\pmb{B}$的列向量的线性组合，则$r(\pmb{A}+\pmb{B})\leq r(\pmb{A})+r(\pmb{B})$</li>
</ul>
</li>
<li>结论4：$r(\pmb{A}\pmb{B})\leq \min\{r(\pmb{A}),r(\pmb{B})\}$，从线性方程组角度证明：<ul>
<li>$\pmb{B}\pmb{x}=\pmb{0}$的解向量是$\pmb{A}\pmb{B}\pmb{x}=\pmb{0}$的解向量<ul>
<li>因此$r(\pmb{A}\pmb{B})\leq r(\pmb{B})$</li>
</ul>
</li>
<li>$r(\pmb{A}\pmb{B})=r(\pmb{B}^T\pmb{A}^T)\leq \pmb{A}^T=\pmb{A}$<ul>
<li>因此$r(\pmb{A}\pmb{B})\leq r(\pmb{A})$</li>
</ul>
</li>
</ul>
</li>
<li>结论5：$r(\pmb{A})=n\Rightarrow r(\pmb{A}^\star)=n$，根据伴随矩阵性质以及结论4证明<ul>
<li>$n= r(\pmb{A})\geq r(\pmb{A}\pmb{A}^\star)=r(|\pmb{A}|\pmb{E})=n$</li>
</ul>
</li>
<li>结论6：$r(\pmb{A})=n-1\Rightarrow r(\pmb{A}^\star)=1$，根据伴随矩阵定义、性质以及结论1证明<ul>
<li>$r(\pmb{A}\pmb{A}^\star)=r(|\pmb{A}|\pmb{E})=0\Rightarrow r(\pmb{A}^\star)\leq n-r(\pmb{A})=1$</li>
<li>$r(\pmb{A})$有$n-1$阶子式行列式非零，则$r(\pmb{A})^\star\geq 1$</li>
</ul>
</li>
<li>结论7：$r(\pmb{A})&lt;n-1\Rightarrow r(\pmb{A}^\star)=0$，根据伴随矩阵定义证明<ul>
<li>$r(\pmb{A})$所有$n-1$阶子式行列式为零，则$r(\pmb{A})^\star=0$</li>
</ul>
</li>
</ul>
<h2 id="矩阵的分解"><a href="#矩阵的分解" class="headerlink" title="矩阵的分解"></a>矩阵的分解</h2><h3 id="矩阵的向量乘法分解"><a href="#矩阵的向量乘法分解" class="headerlink" title="矩阵的向量乘法分解"></a>矩阵的向量乘法分解</h3><p><em>把矩阵分解为向量矩阵的乘积</em></p>
<ul>
<li>设$r(\pmb{A})=1$，则$\pmb{A}=\left [ \begin{matrix} a_1b_1&amp;a_1b_2&amp;\cdots&amp;a_1b_n\\ a_2b_1 &amp;a_2b_2 &amp;\cdots &amp;a_2b_n \\ \vdots &amp;\vdots&amp; \  &amp;\vdots\\ a_nb_1&amp;a_nb_2&amp;\cdots&amp;a_nb_n \end{matrix} \right ]$可以分解为两个向量矩阵的乘积$\pmb{\alpha}\pmb{\beta}^T=\left [ \begin{matrix} a_1\\ a_2 \\ \vdots \\ a_n\end{matrix} \right ]\left [ \begin{matrix} b_1&amp;b_2&amp;\cdots&amp;b_n\end{matrix} \right ]$</li>
<li>作用1：矩阵的迹$tr(\pmb{A})=\pmb{\alpha}^T\pmb{\beta}=\pmb{\beta}^T\pmb{\alpha}=\left [ \begin{matrix} b_1&amp;b_2&amp;\cdots&amp;b_n\end{matrix} \right ]\left [ \begin{matrix} a_1\\ a_2 \\ \vdots \\ a_n\end{matrix} \right ]$</li>
<li>作用2：$\pmb{A}^n=(\pmb{\alpha}\pmb{\beta}^T)^n=\pmb{\alpha}(\pmb{\beta}^T\pmb{\alpha})^{n-1}\pmb{\beta}=tr(\pmb{A})^{n-1}\pmb{A}$</li>
</ul>
<h3 id="矩阵的加法分解"><a href="#矩阵的加法分解" class="headerlink" title="矩阵的加法分解"></a>矩阵的加法分解</h3><ul>
<li>分解操作为：$\pmb{A}=\pmb{B}+\pmb{C}$</li>
<li>常见的用法<ul>
<li>求$\pmb{A}$的高次幂：$\pmb{A}^n=(\pmb{B}+\pmb{E})^n$，结合二项式定理计算</li>
<li>把行列式计算问题转化为求特征值问题：$|\pmb{A}|=|\lambda\pmb{E}-\pmb{B}|=\prod\limits_{i=1}^n(\lambda-\lambda_i)$<ul>
<li>$\lambda$是已知量，在$\pmb{A}$被分解后即可确定</li>
<li>$\lambda_i$是$\pmb{B}$的特征值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="矩阵的初等变换分解"><a href="#矩阵的初等变换分解" class="headerlink" title="矩阵的初等变换分解"></a>矩阵的初等变换分解</h3><ul>
<li>已知$m\times n$矩阵$\pmb{A}$的秩为$r$，则<ul>
<li>$\pmb{A}$的等价标准形是$\pmb{\Lambda}=\left [ \begin{matrix}\pmb{E}_r&amp; \pmb{O}_{r\times (n-r)}\\\pmb{O}_{(m-r)\times r} &amp; \pmb{O}_{(m-r)\times (n-r)}  \end{matrix} \right ]$</li>
<li>存在可逆矩阵$\pmb{P}$和$\pmb{Q}$，使得$\pmb{A}=\pmb{P}\pmb{\Lambda}\pmb{Q}$</li>
</ul>
</li>
</ul>
<h3 id="矩阵的相似对角化分解"><a href="#矩阵的相似对角化分解" class="headerlink" title="矩阵的相似对角化分解"></a>矩阵的相似对角化分解</h3><ul>
<li>根据特征值的定义<ul>
<li>$\pmb{A}\pmb{\alpha}_i=\lambda_i \pmb{\alpha}_i$</li>
<li>$\pmb{A}$的特征向量为$\pmb{\alpha}_1,\pmb{\alpha}_2,\cdots,\pmb{\alpha}_n$</li>
<li>特征矩阵$\pmb{P}=\left [ \begin{matrix}\pmb{\alpha}_1,\pmb{\alpha}_2,\cdots,\pmb{\alpha}_n \end{matrix} \right ]$</li>
</ul>
</li>
<li>$\pmb{A}\pmb{P}=\left [ \begin{matrix}\pmb{A}\pmb{\alpha}_1,\pmb{A}\pmb{\alpha}_2,\cdots,\pmb{A}\pmb{\alpha}_n \end{matrix} \right ]=\left [ \begin{matrix}\pmb{\alpha}_1,\pmb{\alpha}_2,\cdots,\pmb{\alpha}_n \end{matrix} \right ]diag\{\lambda_1,\lambda_2,\cdots,\lambda_n\}$</li>
<li>$\pmb{A}\pmb{P}=\pmb{P}diag\{\lambda_1,\lambda_2,\cdots,\lambda_n\}$</li>
<li>当$\pmb{P}$可逆时，$\pmb{A}=\pmb{P}diag\{\lambda_1,\lambda_2,\cdots,\lambda_n\}\pmb{P}^{-1}$</li>
</ul>
<h3 id="矩阵的分块分解"><a href="#矩阵的分块分解" class="headerlink" title="矩阵的分块分解"></a>矩阵的分块分解</h3><ul>
<li>含义：把矩阵分块为行向量或列向量</li>
<li>应用：主要和其他问题结合使用，详见后面的“矩阵乘法分解”、“矩阵乘法等式转化”</li>
</ul>
<h3 id="矩阵的矩阵乘法分解"><a href="#矩阵的矩阵乘法分解" class="headerlink" title="矩阵的矩阵乘法分解"></a>矩阵的矩阵乘法分解</h3><ul>
<li>含义：矩阵以行（列）向量分块分解的形式给出，可以将其分解为两个矩阵的乘积</li>
<li>方法：比如矩阵$\pmb{A}$以列向量分块分解形式给出<ul>
<li>$\pmb{A}$的列向量的极大无关组按列排成矩阵$\pmb{B}$</li>
<li>因为极大无关组可以表示原向量组，因此$\pmb{A}$可以分解为$\pmb{B}$和一个矩阵的乘积</li>
</ul>
</li>
<li>举例：$\left [ \begin{matrix}\pmb{\alpha}_1,\pmb{\alpha}_2-\pmb{\alpha}_1,2\pmb{\alpha}_3 \end{matrix} \right]=\left [ \begin{matrix}\pmb{\alpha}_1,\pmb{\alpha}_2,\pmb{\alpha}_3 \end{matrix} \right]\left [ \begin{matrix}1&amp;-1&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp; 2 \end{matrix} \right]$</li>
</ul>
<h2 id="矩阵的乘法"><a href="#矩阵的乘法" class="headerlink" title="矩阵的乘法"></a>矩阵的乘法</h2><h3 id="对角矩阵的乘法"><a href="#对角矩阵的乘法" class="headerlink" title="对角矩阵的乘法"></a>对角矩阵的乘法</h3><ul>
<li>$\left [ \begin{matrix} a_1&amp;\ &amp;\ &amp;\ \\ \ &amp;a_2\ &amp;\ \\ \ &amp;\ &amp; \ddots &amp;\ \\ \ &amp;\ &amp;\ &amp;a_n \end{matrix} \right ]\left [ \begin{matrix} b_1&amp;\ &amp;\ &amp;\ \\ \ &amp;b_2\ &amp;\ \\ \ &amp;\ &amp; \ddots &amp;\ \\ \ &amp;\ &amp;\ &amp;b_n \end{matrix} \right ]=\left [ \begin{matrix} a_1b_1&amp;\ &amp;\ &amp;\ \\ \ &amp;a_2b_2\ &amp;\ \\ \ &amp;\ &amp; \ddots &amp;\ \\ \ &amp;\ &amp;\ &amp;a_nb_n \end{matrix} \right ]$</li>
<li>推广1：对角矩阵的高次幂运算</li>
<li>推广2：对角矩阵的逆矩阵求解</li>
<li>推广3：分块对角矩阵的乘法、幂运算</li>
</ul>
<h3 id="求矩阵的高次幂"><a href="#求矩阵的高次幂" class="headerlink" title="求矩阵的高次幂"></a>求矩阵的高次幂</h3><ul>
<li>向量乘法分解法<ul>
<li>前面矩阵向量乘法分解小节提到过</li>
<li>当$r(\pmb{A})=1$，$\pmb{A}^n=tr(\pmb{A})^{n-1}\pmb{A}$</li>
</ul>
</li>
<li>加法分解法<ul>
<li>前面矩阵加法分解小节提到过</li>
<li>$\pmb{A}^n=(\pmb{B}+\pmb{E})^n$</li>
<li>需要再使用<strong>二项式定理</strong>展开</li>
</ul>
</li>
<li>对角分块矩阵法<ul>
<li>前面对角矩阵乘法小节提到过</li>
<li>$\left [ \begin{matrix} \pmb{A_1}&amp;\ &amp;\ &amp;\ \\ \ &amp;\pmb{A_2}\ &amp;\ \\ \ &amp;\ &amp; \ddots &amp;\ \\ \ &amp;\ &amp;\ &amp;\pmb{A_n} \end{matrix} \right ]^n=\left [ \begin{matrix} \pmb{A_1}^n&amp;\ &amp;\ &amp;\ \\ \ &amp;\pmb{A_2}^n\ &amp;\ \\ \ &amp;\ &amp; \ddots &amp;\ \\ \ &amp;\ &amp;\ &amp;\pmb{A_n}^n \end{matrix} \right ]$</li>
</ul>
</li>
<li>相似对角化分解法<ul>
<li>前面相似对角分解小节提到过</li>
<li>当矩阵有n个线性无关的特征向量，把矩阵相似对角化后再计算高次幂</li>
</ul>
</li>
<li>规律归纳法<ul>
<li>当矩阵秩不高的时候，尝试计算几次幂，找规律</li>
<li>如果需要严格证明，则使用数学归纳法</li>
</ul>
</li>
</ul>
<h3 id="矩阵乘法的转化"><a href="#矩阵乘法的转化" class="headerlink" title="矩阵乘法的转化"></a>矩阵乘法的转化</h3><p><em>使用前面所说的矩阵的分块分解法，把矩阵乘法等式条件，转化为等价的条件形式，方便处理</em> </p>
<h4 id="转化为线性方程组条件"><a href="#转化为线性方程组条件" class="headerlink" title="转化为线性方程组条件"></a>转化为线性方程组条件</h4><ul>
<li>矩阵乘法等式：$\pmb{A}\pmb{B}=\pmb{0}$</li>
<li>转化方法<ul>
<li>把$\pmb{A}$和$\pmb{0}$分块为行向量，$\pmb{A}$的每一行都是齐次线性方程组$\pmb{x}^{T}\pmb{B}=\pmb{0}^{T}$的解</li>
<li>或把$\pmb{B}$和$\pmb{0}$分块为列向量，$\pmb{B}$的每一列都是齐次线性方程组$\pmb{A}\pmb{x}=\pmb{0}$的解</li>
</ul>
</li>
</ul>
<h4 id="转化为向量组线性表示条件"><a href="#转化为向量组线性表示条件" class="headerlink" title="转化为向量组线性表示条件"></a>转化为向量组线性表示条件</h4><ul>
<li>矩阵乘法等式：$\pmb{A}\pmb{B}=\pmb{C}$</li>
<li>转化方法<ul>
<li>把$\pmb{A}$和$\pmb{C}$分块为列向量，$\pmb{C}$的列向量都可以由$\pmb{A}$的列向量线性表示<ul>
<li>可以结合前面的<strong>矩阵的矩阵乘法分解</strong>小节的例子进行思考</li>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1,\pmb{\alpha}_2-\pmb{\alpha}_1,2\pmb{\alpha}_3 \end{matrix} \right]=\left [ \begin{matrix}\pmb{\alpha}_1,\pmb{\alpha}_2,\pmb{\alpha}_3 \end{matrix} \right]\left [ \begin{matrix}1&amp;-1&amp;0\\ 0&amp;1&amp;0\\ 0&amp;0&amp; 2 \end{matrix} \right]$</li>
</ul>
</li>
<li>或把$\pmb{B}$和$\pmb{C}$分块为行向量，$\pmb{C}$的行向量都可以由$\pmb{B}$的行向量线性表示</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-向量</title>
    <url>/2021/11/17/linearAlgebra3/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="向量的表示"><a href="#向量的表示" class="headerlink" title="向量的表示"></a>向量的表示</h2><ul>
<li>一般默认是列向量，比如$\pmb{\alpha}=(a_1,a_2,\cdots,a_n)^T$</li>
<li>行向量需要转置列向量，比如$\pmb{\alpha}^{T}=(a_1,a_2,\cdots,a_n)$</li>
<li>在计算时，对向量的行、列判断要清晰</li>
</ul>
<h2 id="线性相关性"><a href="#线性相关性" class="headerlink" title="线性相关性"></a>线性相关性</h2><ul>
<li>线性相关的等价条件<ul>
<li>存在不全为$0$的数$k_1,\cdots,k_n$，使得$k_1\pmb{\alpha}_1+\cdots+k_n\pmb{\alpha}_n=\pmb{0}$</li>
<li>存在不全为$0$的数$k_1,\cdots,k_n$，使得$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}k_1\\k_2\\\vdots\\k_n \end{matrix} \right ]=\pmb{0}$</li>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]$的秩小于$n$（根据齐次线性方程组知识）</li>
<li>第一章行列式为$0$的等价条件都适合此处</li>
</ul>
</li>
<li>线性无关的等价条件<ul>
<li>不存在不全为$0$的数$k_1,\cdots,k_n$，使得$k_1\pmb{\alpha}_1+\cdots+k_n\pmb{\alpha}_n=\pmb{0}$</li>
<li>不存在不全为$0$的数$k_1,\cdots,k_n$，使得$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}k_1\\k_2\\\vdots\\k_n \end{matrix} \right ]=\pmb{0}$</li>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]$的秩等于$n$（根据齐次线性方程组知识）</li>
<li>第二章可逆矩阵的等价条件都适合此处</li>
</ul>
</li>
</ul>
<h2 id="线性表出"><a href="#线性表出" class="headerlink" title="线性表出"></a>线性表出</h2><ul>
<li>一个向量$\pmb{\beta}$可以用一个向量组$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$线性表出的等价条件<ul>
<li>存在实数$k_1,\cdots,k_n$，使得$k_1\pmb{\alpha}_1+\cdots+k_n\pmb{\alpha}_n=\pmb{\beta}$</li>
<li>存在实数$k_1,\cdots,k_n$，使得$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}k_1\\k_2\\\vdots\\k_n \end{matrix} \right ]=\pmb{\beta}$</li>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]$和$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n &amp; \pmb{\beta}\end{matrix} \right ]$的秩相同（根据非齐次线性方程组知识）</li>
</ul>
</li>
<li>一个向量$\pmb{\beta}$不可以用一个向量组$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$线性表出的等价条件<ul>
<li>不存在实数$k_1,\cdots,k_n$，使得$k_1\pmb{\alpha}_1+\cdots+k_n\pmb{\alpha}_n=\pmb{\beta}$</li>
<li>不存在实数$k_1,\cdots,k_n$，使得$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}k_1\\k_2\\\vdots\\k_n \end{matrix} \right ]=\pmb{\beta}$</li>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]$和$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \pmb{\alpha}_2&amp; \cdots &amp;\pmb{\alpha}_n &amp; \pmb{\beta}\end{matrix} \right ]$的秩不相同（根据非齐次线性方程组知识）</li>
</ul>
</li>
<li>一个向量组$\pmb{\beta}_1, \cdots ,\pmb{\beta}_n$可以用一个向量组$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$线性表出的等价条件<ul>
<li>$\pmb{\beta}_1 , \cdots ,\pmb{\beta}_n$的每个向量都能用$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$线性表示</li>
<li>存在实数$k_{11},\cdots,k_{nn}$，使得$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}k_{11}&amp;k_{12}&amp;\cdots&amp;k_{1n}\\k_{21}&amp;k_{22}&amp;\cdots&amp;k_{2n}\\ \vdots&amp;\vdots&amp;\ &amp;\vdots\\k_{n1}&amp;k_{n2}&amp;\cdots&amp;k_{nn} \end{matrix} \right ]=\left [ \begin{matrix}\pmb{\beta}_1 &amp; \cdots &amp;\pmb{\beta}_n \end{matrix} \right ]$</li>
<li>$r(\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ])=r(\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n &amp; \pmb{\beta}_1 &amp;  \cdots &amp;\pmb{\beta}_n\end{matrix} \right ])$（根据非齐次线性方程组知识）</li>
</ul>
</li>
<li>一个向量组$\pmb{\beta}_1, \cdots ,\pmb{\beta}_n$不可以用一个向量组$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$线性表出的等价条件<ul>
<li>不存在实数$k_{11},\cdots,k_{nn}$，使$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}k_{11}&amp;k_{12}&amp;\cdots&amp;k_{1n}\\k_{21}&amp;k_{22}&amp;\cdots&amp;k_{2n}\\ \vdots&amp;\vdots&amp;\ &amp;\vdots\\k_{n1}&amp;k_{n2}&amp;\cdots&amp;k_{nn} \end{matrix} \right ]=\left [ \begin{matrix}\pmb{\beta}_1 &amp; \cdots &amp;\pmb{\beta}_n \end{matrix} \right ]$</li>
<li>$r(\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ])\neq r(\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n &amp; \pmb{\beta}_1 &amp;  \cdots &amp;\pmb{\beta}_n\end{matrix} \right ])$（根据非齐次线性方程组知识）</li>
</ul>
</li>
</ul>
<h2 id="向量组等价"><a href="#向量组等价" class="headerlink" title="向量组等价"></a>向量组等价</h2><h3 id="向量组等价的判断"><a href="#向量组等价的判断" class="headerlink" title="向量组等价的判断"></a>向量组等价的判断</h3><ul>
<li>两个向量组等价的充要条件<ul>
<li>两个向量组相互可以线性表示对方</li>
<li>$r(\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ])=r(\left [ \begin{matrix}\pmb{\beta}_1 &amp; \cdots &amp;\pmb{\beta}_n \end{matrix} \right ])= r(\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n &amp; \pmb{\beta}_1 &amp;  \cdots &amp;\pmb{\beta}_n\end{matrix} \right ])$（线性表出小节的推论）</li>
</ul>
</li>
</ul>
<h3 id="和矩阵等价的关系"><a href="#和矩阵等价的关系" class="headerlink" title="和矩阵等价的关系"></a>和矩阵等价的关系</h3><p>本节探讨向量组等价和矩阵等价两个条件之间的关系（结论：互相不为对方的必要条件）</p>
<ul>
<li>向量组等价的定义：两个向量组相互可以线性表示</li>
<li>矩阵等价的等价条件：两个矩阵同型且秩相同（详见第二章初等变换部分性质3）</li>
<li>两个向量组等价，可以说明两个向量组秩相同，即由两向量组所拼成的两个矩阵的秩相同，但不一定同型（向量组的向量数不一定相同），所以，矩阵不一定等价</li>
<li>若两个矩阵等价，则对应行（列）向量组的向量个数相同，且秩相同，但两个向量组之间不一定可以线性表出。简单的例子：xy平面的10个向量，yz平面的10个向量，这两个向量组的向量个数都是10，且秩都是2，但是两个向量组之间不可以线性表出</li>
</ul>
<h2 id="极大线性无关组"><a href="#极大线性无关组" class="headerlink" title="极大线性无关组"></a>极大线性无关组</h2><ul>
<li>求法<ul>
<li>对列向量组作初等行变换，化成行阶梯型矩阵</li>
<li>因为初等行变换不改变（任意几列的列向量组成的）方程组的解，所以也不改变列向量的线性相关性</li>
<li>根据行阶梯型矩阵的各列向量的线性相关性，得到原向量组的极大线性无关组</li>
</ul>
</li>
<li>重要结论：极大线性无关组的向量个数 = 向量组的秩 = 矩阵的秩</li>
</ul>
<h2 id="理解线性无关向量组的正交化"><a href="#理解线性无关向量组的正交化" class="headerlink" title="理解线性无关向量组的正交化"></a>理解线性无关向量组的正交化</h2><ul>
<li>向量个数为n的m维向量组线性无关，意思是向量组恰好张成了m维线性空间的n维子空间，可以表示这个n维子空间的任何向量</li>
<li>但是这个n个向量不一定两两垂直，正交化的步骤就是计算垂直分量的步骤</li>
<li>设n个向量为$\pmb{\alpha}_1,\pmb{\alpha}_2,\cdots,\pmb{\alpha}_n$，正交化步骤如下<ul>
<li>$\pmb{\beta}_1=\pmb{\alpha}_1$：第一个向量直接照搬，作为第一个维度</li>
<li>$\pmb{\beta}_2=\pmb{\alpha}_2-\frac{(\pmb{\alpha}_2,\pmb{\beta}_1)}{(\pmb{\beta}_1,\pmb{\beta}_1)}\pmb{\beta}_1$：$\pmb{\alpha}_2$减去其在$\pmb{\beta}_1$维度上的分量</li>
<li>$\pmb{\beta}_3=\pmb{\alpha}_3-\frac{(\pmb{\alpha}_3,\pmb{\beta}_1)}{(\pmb{\beta}_1,\pmb{\beta}_1)}\pmb{\beta}_1-\frac{(\pmb{\alpha}_3,\pmb{\beta}_2)}{(\pmb{\beta}_2,\pmb{\beta}_2)}\pmb{\beta}_2$：$\pmb{\alpha}_3$减去其在$\pmb{\beta}_1$和$\pmb{\beta}_2$维度上的分量</li>
<li>$\pmb{\beta}_n=\pmb{\alpha}_n-\frac{(\pmb{\alpha}_n,\pmb{\beta}_1)}{(\pmb{\beta}_1,\pmb{\beta}_1)}\pmb{\beta}_1-\cdots-\frac{(\pmb{\alpha}_n,\pmb{\beta}_{n-1})}{(\pmb{\beta}_{n-1},\pmb{\beta}_{n-1})}\pmb{\beta}_{n-1}$：$\pmb{\alpha}_n$减去其在$\pmb{\beta}_1$一直到$\pmb{\beta}_{n-1}$维度上的分量</li>
</ul>
</li>
<li>正交化后如果再单位化，即得到正交规范向量组</li>
</ul>
<h2 id="正交矩阵的理解"><a href="#正交矩阵的理解" class="headerlink" title="正交矩阵的理解"></a>正交矩阵的理解</h2><ul>
<li>由正交规范向量组构成的矩阵是正交矩阵</li>
<li>不同行（列）的内积为0（因为正交化），同一行（列）的内积是1（因为单位化）<ul>
<li>因此正交矩阵满足$\pmb{A}\pmb{A}^T=\pmb{A}^T\pmb{A}=\pmb{E}$</li>
</ul>
</li>
</ul>
<h2 id="基变换"><a href="#基变换" class="headerlink" title="基变换"></a>基变换</h2><ul>
<li>从基$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$到基$\pmb{\beta}_1,\cdots,\pmb{\beta}_n$<ul>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\pmb{C}=\left [ \begin{matrix}\pmb{\beta}_1 &amp; \cdots &amp;\pmb{\beta}_n \end{matrix} \right ]$</li>
<li>$\pmb{C}=\left [ \begin{matrix}c_{11}&amp;c_{12}&amp;\cdots&amp;c_{1n}\\c_{21}&amp;c_{22}&amp;\cdots&amp;c_{2n}\\ \vdots&amp;\vdots&amp;\ &amp;\vdots\\c_{n1}&amp;c_{n2}&amp;\cdots&amp;c_{nn} \end{matrix} \right ]$是过渡矩阵</li>
</ul>
</li>
</ul>
<h2 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h2><ul>
<li>从基$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$的坐标$\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]$到自然基$\left [ \begin{matrix}1\\0\\ \vdots\\ 0 \end{matrix} \right ],\left [ \begin{matrix}0\\1\\ \vdots\\ 0 \end{matrix} \right ],\cdots,\left [ \begin{matrix}0\\0\\ \vdots\\ 1 \end{matrix} \right ]$的坐标$\left [ \begin{matrix}z_1\\z_2\\ \vdots\\ z_n \end{matrix} \right ]$<ul>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]=\left [ \begin{matrix}1&amp;0&amp;\cdots&amp;0\\0&amp;1&amp;\cdots&amp;0\\ \vdots&amp;\vdots&amp;\ &amp;\vdots\\0&amp;0&amp;\cdots&amp;1 \end{matrix} \right ]\left [ \begin{matrix}z_1\\z_2\\ \vdots\\ z_n \end{matrix} \right ]=\left [ \begin{matrix}z_1\\z_2\\ \vdots\\ z_n \end{matrix} \right ]$</li>
</ul>
</li>
<li>从基$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$的坐标$\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]$到基$\pmb{\beta}_1,\cdots,\pmb{\beta}_n$的坐标$\left [ \begin{matrix}y_1\\y_2\\ \vdots\\ y_n \end{matrix} \right ]$<ul>
<li>$\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]=\left [ \begin{matrix}\pmb{\beta}_1 &amp; \cdots &amp;\pmb{\beta}_n \end{matrix} \right ]\left [ \begin{matrix}y_1\\y_2\\ \vdots\\ y_n \end{matrix} \right ]=\left [ \begin{matrix}z_1\\z_2\\ \vdots\\ z_n \end{matrix} \right ]$</li>
</ul>
</li>
</ul>
<h2 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h2><ul>
<li>基为$\pmb{\alpha}_1,\cdots,\pmb{\alpha}_n$的坐标系到基为$\pmb{\beta}_1,\cdots,\pmb{\beta}_n$的坐标系的线性变换<ul>
<li>直观含义：线性变换是对坐标向量的映射变换<ul>
<li>$\left [ \begin{matrix}y_1\\y_2\\ \vdots\\ y_n \end{matrix} \right ]=\left [ \begin{matrix}\pmb{\beta}_1 &amp; \cdots &amp;\pmb{\beta}_n \end{matrix} \right ]^{-1}\left [ \begin{matrix}\pmb{\alpha}_1 &amp; \cdots &amp;\pmb{\alpha}_n \end{matrix} \right ]\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]=\pmb{C}^{-1}\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]=\pmb{T}\left [ \begin{matrix}x_1\\x_2\\ \vdots\\ x_n \end{matrix} \right ]$</li>
</ul>
</li>
<li>重要性质：$\pmb{T}=\pmb{C}^{-1}$<ul>
<li>坐标系变化的方向和坐标变化的方向相反</li>
<li>比如坐标系左移，相当于坐标右移</li>
</ul>
</li>
<li>本质内涵：线性变换表面是对坐标的变换，本质是<strong>对坐标系的变换</strong><ul>
<li>任何向量在变换前后处于不同的坐标系，表达形式不同，但还是原本的向量</li>
<li>向量在原坐标系的表示看作自变量，在新坐标系的表示看作因变量，线性变换看作映射</li>
</ul>
</li>
<li>严格定义：线性变换$\pmb{T}$使得$\pmb{T}(a\pmb{X}+b\pmb{Y})=a\pmb{T}(\pmb{X})+b\pmb{T}(\pmb{Y})$恒成立<ul>
<li>人话解读：原坐标系中满足合成关系的三个向量$\pmb{X},\pmb{Y},\pmb{a\pmb{X}+b\pmb{Y}}$在线性变换后的坐标系中还满足相同比例的合成关系</li>
<li>超出了线代的基本范畴，理解即可</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-线性方程组</title>
    <url>/2021/11/20/linearAlgebra4/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="克拉姆法则"><a href="#克拉姆法则" class="headerlink" title="克拉姆法则"></a>克拉姆法则</h2><ul>
<li>克拉姆法则<ul>
<li>当且仅当$\vert\pmb{A}\vert\neq 0$，方程$\pmb{A}\pmb{x}=\pmb{b}$的唯一解是$x_i=\frac{\vert\pmb{A}_i\vert}{\vert\pmb{A}\vert},i=1,2,\cdots,n$</li>
<li>其中$\vert\pmb{A}_i\vert$的第$i$列是右端向量$\pmb{b}$，其他列同$\pmb{A}$</li>
</ul>
</li>
<li>$\vert\pmb{A}\vert\neq 0$则方程有唯一解的原理<ul>
<li>$\pmb{x}=\pmb{A}^{-1}\pmb{b}=\frac{\pmb{A}^{\star}\pmb{b}}{|\pmb{A}|}$</li>
<li>$x_i=\frac{\left [ \begin{matrix}A_{1i}&amp; A_{2i}&amp; \cdots&amp; A_{ni} \end{matrix} \right ]\pmb{b}}{|\pmb{A}|}=\frac{\vert\pmb{A}_i\vert}{\vert\pmb{A}\vert}$</li>
<li>由此直接把唯一解算出来了</li>
</ul>
</li>
<li>$\vert\pmb{A}\vert= 0$则方程无解或无穷解的原理<ul>
<li>把不可逆矩阵$\pmb{A}$可看作不可逆线性变换，理解成单射（没有逆映射）</li>
<li>没有逆映射有两种原因<ul>
<li>新坐标系中的向量$\pmb{b}$无法映射到原坐标系的向量（对应方程组无解情况）</li>
<li>新坐标系中的向量$\pmb{b}$映射到原坐标系的多个向量（对应方程组无穷解情况）</li>
</ul>
</li>
</ul>
</li>
<li>线性方程组的主要运算在于求逆矩阵<ul>
<li>因为求逆矩阵时，伴随矩阵法比初等变换法复杂得多，很少使用</li>
<li>所以解线性方程组时，克拉姆法则比高斯消元法复杂得多，很少使用</li>
</ul>
</li>
</ul>
<h2 id="齐次线性方程组"><a href="#齐次线性方程组" class="headerlink" title="齐次线性方程组"></a>齐次线性方程组</h2><ul>
<li>形式:$\pmb{A}_{m\times n}\pmb{x}=\pmb{0}$</li>
<li>有解条件：一定有零解</li>
<li>基础解系<ul>
<li>所有解向量的极大线性无关组</li>
<li>课本的表述为线性无关，且可以线性表出所有解向量的向量组</li>
<li>一定是$n$维非零向量</li>
</ul>
</li>
<li>基础解系向量个数<ul>
<li>$n-r(\pmb{A})$</li>
<li>从向量空间角度理解<ul>
<li>基础解系，就是找到所有的线性无关的非零列向量，和$\pmb{A}$的行向量正交</li>
<li>本质是，在$n$维度向量空间中，正交于$r(\pmb{A})$维子空间（由$\pmb{A}$行向量张成）的非零且线性无关的向量有$n-r(\pmb{A})$个</li>
<li>例如三维空间中，和某个二维平面垂直的线性无关非零向量，最多找到一个</li>
</ul>
</li>
</ul>
</li>
<li>通解：由基础解系线性表出即可</li>
<li>通解求法<ul>
<li>初等行变换把$\pmb{A}$变成行阶梯型矩阵<ul>
<li>接下来只需要解同解方程组</li>
<li>本质就是高斯消元法</li>
</ul>
</li>
<li>$r$个独立变量和$n-r$个自由变量<ul>
<li>每次只选一个自由变量取$1$，其他取$0$，算出独立变量，得到一个解向量</li>
<li>选$n-r$次自由变量，得到基础解系</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="非齐次线性方程组"><a href="#非齐次线性方程组" class="headerlink" title="非齐次线性方程组"></a>非齐次线性方程组</h2><ul>
<li>形式:$\pmb{A}_{m\times n}\pmb{x}=\pmb{b}$</li>
<li>有解等价条件：$r(\pmb{A})=r(\pmb{A},b)$</li>
<li>解的性质：两个解的差值是对应齐次线性方程组的解</li>
<li>通解结构：找到一个特解，再加上对应齐次线性方程组的通解</li>
<li>通解求法<ul>
<li>初等行变换把$\pmb{A}$变成行阶梯型矩阵<ul>
<li>接下来只需要解同解方程组</li>
</ul>
</li>
<li>$r$个独立变量和$n-r$个自由变量<ul>
<li>自由变量取$0$，算出一个特解</li>
<li>每个自由变量分别取$1$，算出对应齐次线性方程组基础解系</li>
</ul>
</li>
<li>利用非齐次线性方程组的通解结构即可</li>
</ul>
</li>
</ul>
<h2 id="由基础解系求方程组"><a href="#由基础解系求方程组" class="headerlink" title="由基础解系求方程组"></a>由基础解系求方程组</h2><ul>
<li>已知$m$个方程$n$个未知量的齐次线性方程组的基础解系为$\pmb{\xi}_1,\pmb{\xi}_2,\cdots,\pmb{\xi}_k$</li>
<li>即$\pmb{A}_{m\times n}\left [ \begin{matrix}\pmb{\xi}_1&amp;\pmb{\xi}_2&amp;\cdots&amp;\pmb{\xi}_k \end{matrix} \right ]=\pmb{O}_{m\times k}$</li>
<li>即$\left [ \begin{matrix}\pmb{\xi}_1^T\\ \pmb{\xi}_2^T\\ \vdots \pmb{\xi}_k^T \end{matrix} \right ]\pmb{A}^T_{n\times m}=\pmb{O}_{k\times m}$</li>
<li>新方程解出来的基础解系的向量个数为$n-k=n-(n-r(\pmb{A}))=r(\pmb{A})$<ul>
<li>可以根据该基础解系确定原方程的系数矩阵行向量</li>
</ul>
</li>
</ul>
<h2 id="两个方程组的公共解"><a href="#两个方程组的公共解" class="headerlink" title="两个方程组的公共解"></a>两个方程组的公共解</h2><ul>
<li>法一：直接解联立方程组</li>
<li>法二：先解一个方程组，再代入另一个方程组</li>
<li>法三：分别解两个方程组得到各自的通解，令两个通解相等，解关于通解的参数的方程组</li>
</ul>
<h2 id="同解方程组"><a href="#同解方程组" class="headerlink" title="同解方程组"></a>同解方程组</h2><ul>
<li>定义法（推荐使用）：证明一个方程组的解也是另一个方程组的解（两个方向都要证明）</li>
<li>初等行变换：只经过初等行变换（不改变方程的解），可以将两个方程组的（系数矩阵和右端向量的）增广矩阵相互转换，则说明是同解方程组</li>
<li>线性表示法：两个方程组的增广矩阵的行向量相互可以线性表出</li>
</ul>
<h2 id="解线性方程组应用于可逆矩阵"><a href="#解线性方程组应用于可逆矩阵" class="headerlink" title="解线性方程组应用于可逆矩阵"></a>解线性方程组应用于可逆矩阵</h2><p>补充一个技巧：计算$\pmb{A}^{-1}\pmb{B}$可以规约为解方程$\pmb{A}\pmb{X}=\pmb{B}$</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-特征值和特征向量</title>
    <url>/2021/11/20/linearAlgebra5/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h2><h3 id="定义和理解"><a href="#定义和理解" class="headerlink" title="定义和理解"></a>定义和理解</h3><ul>
<li>定义：$\pmb{A}\pmb{\alpha}=\lambda\pmb{\alpha}$且$\pmb{\alpha}\neq 0$<ul>
<li>$\lambda$为$\pmb{A}$的特征值</li>
<li>$\pmb{\alpha}$为$\pmb{A}$的特征向量</li>
</ul>
</li>
<li>向量空间角度理解<ul>
<li>把矩阵看作线性变换，特征向量经过该变换后发生了伸缩</li>
</ul>
</li>
<li>线性方程组角度<ul>
<li>相等于$(\lambda\pmb{E}-\pmb{A})\pmb{\alpha}=\pmb{0}$且$\pmb{\alpha}\neq 0$</li>
</ul>
</li>
</ul>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>特征方程<ul>
<li>$\vert\lambda\pmb{E}-\pmb{A}\vert=0$</li>
</ul>
</li>
<li>特征多项式<ul>
<li>$\vert\lambda\pmb{E}-\pmb{A}\vert=\prod(\lambda-\lambda_i)$</li>
<li>$\lambda_i$是特征值</li>
</ul>
</li>
<li>特征矩阵<ul>
<li>$\lambda\pmb{E}-\pmb{A}$</li>
</ul>
</li>
</ul>
<h3 id="两个性质"><a href="#两个性质" class="headerlink" title="两个性质"></a>两个性质</h3><ul>
<li>特征值的和 = 矩阵的迹</li>
<li>特征值的积 = 矩阵的行列式</li>
</ul>
<h3 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h3><ul>
<li>具体矩阵：先利用特征多项式等于0解出特征值，再用特征方程解特征向量</li>
<li>抽象矩阵：使用定义求解<ul>
<li>结论：$\pmb{A}$的特征值是$\lambda$，则$f(\pmb{A})$的特征值一般是$f(\lambda)$，特征向量一般不变</li>
<li>补充说明<ul>
<li>具体计算需要按定义，该结论仅供验证结果</li>
<li>如果$f$是多项式函数，该结论是正确的</li>
<li>该结论一般不显式的提问，而是作为中间处理的一步，因此需要有主动使用的意识</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="证明两个矩阵特征值相等"><a href="#证明两个矩阵特征值相等" class="headerlink" title="证明两个矩阵特征值相等"></a>证明两个矩阵特征值相等</h3><p>思路包括</p>
<ul>
<li>证明特征多项式相等<ul>
<li>最常用的方法，等价条件</li>
</ul>
</li>
<li>证明两个矩阵相似<ul>
<li>是特征值相等的充分条件</li>
</ul>
</li>
<li>按特征值定义证明<ul>
<li>构造特征向量是一个难点</li>
</ul>
</li>
</ul>
<h2 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h2><ul>
<li>定义：$\pmb{A}\sim \pmb{B}$即存在可逆矩阵$\pmb{P}$，使得$\pmb{A}\pmb{P}=\pmb{P}\pmb{B}$<ul>
<li>相似变换指的是$\pmb{B}=\pmb{P}^{-1}\pmb{A}\pmb{P}$，$\pmb{P}$是可逆矩阵</li>
</ul>
</li>
<li>必要条件：相似矩阵的特征值、特征多项式、秩相同</li>
<li>相似关系是等价关系，有自反性、对称性、传递性</li>
</ul>
<h2 id="相似对角化"><a href="#相似对角化" class="headerlink" title="相似对角化"></a>相似对角化</h2><ul>
<li>相似对角化方法：详见第二章，矩阵的相似对角化分解</li>
<li>对角化后的矩阵是原矩阵的相似标准形</li>
<li>重要结论<ul>
<li>不同特征值对应特征向量线性无关<ul>
<li>向量线性无关的定义 + 特征向量的定义即可证明</li>
</ul>
</li>
<li>任一特征值的线性无关的特征向量个数<strong>小于等于</strong>该特征值的重数<ul>
<li>证明麻烦，建议记住</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="实对称矩阵的对角化"><a href="#实对称矩阵的对角化" class="headerlink" title="实对称矩阵的对角化"></a>实对称矩阵的对角化</h2><ul>
<li>重要结论<ul>
<li>实对称矩阵一定可以相似对角化<ul>
<li>说明存在可逆矩阵$\pmb{P}$使得$\pmb{A}\pmb{P}=\pmb{P}\pmb{\Lambda}$</li>
</ul>
</li>
<li>实对称矩阵不同特征值对应特征向量正交<ul>
<li>说明存在正交矩阵$\pmb{Q}$使得$\pmb{A}\pmb{Q}=\pmb{Q}\pmb{\Lambda}$</li>
<li>即实对称矩阵一定可以正交相似对角化</li>
</ul>
</li>
</ul>
</li>
<li>对角化步骤：同一般矩阵，核心是求特征值和特征向量，详见第二章，矩阵的相似对角化分解</li>
<li>正交对角化步骤<ul>
<li>不同特征值的特征向量已经正交，只需要把同一个特征值的各特征向量正交化即可（正交化方法见第三章）</li>
<li>把所有特征向量单位化，此时所有特征向量是标准正交列向量组，按特征值对应顺序组成正交矩阵</li>
</ul>
</li>
</ul>
<h2 id="已知特征值特征向量反求矩阵"><a href="#已知特征值特征向量反求矩阵" class="headerlink" title="已知特征值特征向量反求矩阵"></a>已知特征值特征向量反求矩阵</h2><ul>
<li>利用相似对角化的结论$\pmb{A}\pmb{P}=\pmb{P}\pmb{\Lambda}$<ul>
<li>$\pmb{P}$可逆时，直接矩阵运算即可</li>
<li>$\pmb{P}$不可逆时，转置等式两侧，相当于计算多个非齐次线性方程组</li>
</ul>
</li>
<li>如果$\pmb{A}$是实对称矩阵，可以用正交矩阵来算，用转置运算代替较繁琐的求逆步骤</li>
</ul>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第六章-二次型</title>
    <url>/2021/11/21/linearAlgebra6/</url>
    <content><![CDATA[<ul>
<li>本知识总结不提供完整的理论体系汇总，旨在给出<em>概念的理解</em>以及<em>各类问题的思考框架</em>。</li>
<li>笔记为个人整理，禁止商业用途</li>
<li>如有疏漏，欢迎留言</li>
</ul>
<h2 id="二次型的矩阵表示"><a href="#二次型的矩阵表示" class="headerlink" title="二次型的矩阵表示"></a>二次型的矩阵表示</h2><ul>
<li>二次型指的是变量的二次齐次多项式$f(x_1,\cdots_,x_n)=\sum\limits_{i=1}^n\sum\limits_{j=1}^na_{ij}x_ix_j$</li>
<li>$\sum\limits_{i=1}^n\sum\limits_{j=1}^na_{ij}x_ix_j=\left [ \begin{matrix} x_1&amp;x_2&amp;\cdots&amp;x_n \end{matrix} \right ]\left [ \begin{matrix} a_{11} &amp;a_{12}&amp; \cdots &amp; a_{1n}\\a_{21}&amp; a_{22}&amp; \cdots &amp; a_{2n}\\\vdots&amp;\vdots&amp;\ &amp; \vdots\\ a_{n1}&amp;a_{n2}&amp; \cdots&amp; a_{nn} \end{matrix} \right ]\left [ \begin{matrix} x_1\\x_2\\\cdots\\x_n \end{matrix} \right ]=\pmb{x}^T\pmb{A}\pmb{x}$</li>
<li>要求$\pmb{A}$是对称矩阵，此时二次型和矩阵一一对应</li>
</ul>
<h2 id="二次型化为标准形"><a href="#二次型化为标准形" class="headerlink" title="二次型化为标准形"></a>二次型化为标准形</h2><ul>
<li>标准形：只有平方项的二次型</li>
<li>规范性：在标准形基础上，平方项的系数只能是-1、0、1</li>
<li>线性变换：即第三章的坐标变换，$\pmb{x}=\pmb{P}\pmb{y}$<ul>
<li>当$\pmb{P}$是正交矩阵$\pmb{Q}$，则对应正交变换</li>
</ul>
</li>
<li>法一：通过正交变换$\pmb{x}=\pmb{Q}\pmb{y}$化为标准形<ul>
<li>$\pmb{x}^T\pmb{A}\pmb{x}=(\pmb{y}^T\pmb{Q}^T)\pmb{A}(\pmb{Q}\pmb{y})=\pmb{y}^T(\pmb{Q}^T\pmb{A}\pmb{Q})\pmb{y}=\pmb{y}^T\pmb{\Lambda}\pmb{y}$</li>
<li>用到了第五章正交相似对角化的内容</li>
<li>求解要点<ul>
<li>求特征值，算出$\pmb{\Lambda}$，从而得到标准形</li>
<li>求特征向量并正交单位化，给出线性变换$\pmb{y}=\pmb{Q}^{-1}\pmb{x}$</li>
</ul>
</li>
</ul>
</li>
<li>法二：通过配方法化为标准形<ul>
<li>有平方项则配方；无平方项则利用$x_i=y_i+y_j,x_j=y_i-y_j$得到平方项，即$a_{ij}x_ix_j=a_{ij}(y_i^2-y_j^2)$</li>
<li>要给出可逆线性变换和标准形的表示<ul>
<li>若配方后平方项个数不足原二次型的变量数，则需要补充平方项以保证线性变换可逆（补充方法不唯一，因为标准形也不唯一）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="合同矩阵与合同二次型"><a href="#合同矩阵与合同二次型" class="headerlink" title="合同矩阵与合同二次型"></a>合同矩阵与合同二次型</h2><ul>
<li>合同矩阵：$\pmb{A}\simeq\pmb{B}\Leftrightarrow$ 即存在可逆矩阵$\pmb{C}$，使得$\pmb{B}=\pmb{C}^T\pmb{A}\pmb{C}$<ul>
<li>合同关系是等价关系，自反性、对称性、传递性</li>
<li>合同变换：双向箭头的右侧部分</li>
</ul>
</li>
<li>合同二次型：对原二次型进行<strong>可逆线性变换</strong>$\pmb{x}=\pmb{C}\pmb{y}$，得到合同二次型<ul>
<li>$\pmb{x}^T\pmb{A}\pmb{x}=(\pmb{y}^T\pmb{C}^T)\pmb{A}(\pmb{C}\pmb{y})=\pmb{y}^T(\pmb{C}^T\pmb{A}\pmb{C})\pmb{y}=\pmb{y}^T\pmb{B}\pmb{y}$</li>
<li>相当于对二次型的矩阵表示进行合同变换</li>
</ul>
</li>
<li>惯性定理：二次型的标准形不唯一，但是其正惯性指数、负惯性指数是确定的<ul>
<li>正惯性指数：标准形正平方项个数</li>
<li>负惯性指数：标准形负平方项个数</li>
<li>二次型的秩：正负惯性指数的和<ul>
<li>重要定理：二次型的矩阵的合同变换不改变其正负惯性指数</li>
</ul>
</li>
</ul>
<ul>
<li>因为二次型可逆线性变换不改变其规范形   </li>
</ul>
</li>
</ul>
<h2 id="正定性的证明"><a href="#正定性的证明" class="headerlink" title="正定性的证明"></a>正定性的证明</h2><ul>
<li>正定二次型的证明：等价条件如下<ul>
<li>对任意$\pmb{x}\neq \pmb{0}$，有$\pmb{x}^T\pmb{A}\pmb{x}&gt;0$恒成立<ul>
<li>正定二次型的定义</li>
</ul>
</li>
<li>$\pmb{A}$顺序主子式大于0</li>
<li>$\pmb{A}$特征值都大于0</li>
<li>二次型正惯性指数等于变量个数</li>
<li>存在可逆矩阵$D$，使得$\pmb{A}=\pmb{D}^T\pmb{E}\pmb{D}=\pmb{D}^T\pmb{D}$<ul>
<li>因为规范形的平方项系数全为1，对应二次型的矩阵表示为$\pmb{E}$</li>
</ul>
</li>
</ul>
</li>
<li>正定矩阵：正定二次型的矩阵表示<ul>
<li>先证明是对称矩阵，再证明对应的二次型正定</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第一章-计算机网络概述</title>
    <url>/2021/11/21/network1/</url>
    <content><![CDATA[<h2 id="计算机网络基本概念"><a href="#计算机网络基本概念" class="headerlink" title="计算机网络基本概念"></a>计算机网络基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>三种观点定义网络</p>
<ul>
<li>广义观点<ul>
<li>定义：能实现远程信息处理甚至资源共享的系统</li>
<li>评价：资源共享能力弱，处于计算机网络发展低级阶段</li>
</ul>
</li>
<li>资源共享观点<ul>
<li>定义：以资源共享方式互联的自治计算机系统集合</li>
<li>评价：资源共享、由独立自治计算机组成、遵循网络协议，符合目前计算机的基本特征</li>
</ul>
</li>
<li>用户透明观点<ul>
<li>定义：存在一个网络操作系统管理资源，用户无需关心网络的存在、资源位置</li>
<li>评价：未来的网络发展目标</li>
</ul>
</li>
</ul>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>有三种组成的说法</p>
<ul>
<li>由边缘和核心组成<ul>
<li>边缘指的是用户主机（端系统）<ul>
<li>作用是通信和资源共享</li>
</ul>
</li>
<li>核心指的是大量的网络和路由器<ul>
<li>作用是提供连通和交换服务</li>
</ul>
</li>
</ul>
</li>
<li>由硬件、软件和协议组成<ul>
<li>硬件：主机、通信链路（比如双绞线和光纤）、交换设备（比如交换机和路由器）、通信处理机（比如网卡）</li>
<li>软件：如网络操作系统，邮件软件，FTP程序，聊天软件</li>
<li>协议：网络传输数据时的规范</li>
</ul>
</li>
<li>由通信子网和资源子网组成<ul>
<li>通信子网：包括传输介质、传输设备、协议</li>
<li>资源子网：包括资源共享设备和软件</li>
</ul>
</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>主要的功能有五个</p>
<ul>
<li>数据通信<ul>
<li>最基本和重要的功能</li>
</ul>
</li>
<li>资源共享<ul>
<li>软件、数据、硬件的共享</li>
</ul>
</li>
<li>分布式处理<ul>
<li>分解分配，解决复杂任务</li>
</ul>
</li>
<li>提高可靠性<ul>
<li>各计算机互为替代机</li>
</ul>
</li>
<li>负载均衡<ul>
<li>任务均衡的分配给各计算机</li>
</ul>
</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>按分布范围<ul>
<li>广域网WAN：长距离跨城市的范围</li>
<li>城域网MAN：覆盖城市的范围</li>
<li>局域网LAN：百到千米，比如教学楼</li>
<li>个人区域网PAN：约10米，比如手机热点</li>
</ul>
</li>
<li>按传输技术<ul>
<li>广播式网络<ul>
<li>举例：局域网、广域网的无线卫星通信</li>
</ul>
</li>
<li>点对点网络<ul>
<li>采用<strong>分组存储转发</strong>和<strong>路由选择机制</strong>（和广播式的重要区别）</li>
<li>举例：大部分的广域网</li>
</ul>
</li>
</ul>
</li>
<li>按拓扑结构<ul>
<li>总线结构：单根线串主机，局域网使用</li>
<li>星形结构：各主机直接连中央设备（交换机或路由器），局域网使用</li>
<li>环形结构：计算机串成环，局域网使用</li>
<li>网状结构：大部分结点都有多个边，广域网使用</li>
</ul>
</li>
<li>按使用者<ul>
<li>公用网：电信建造的大型网络，付费使用</li>
<li>专用网：部门内部自建的网络，不对外开放</li>
</ul>
</li>
<li>按交换技术<ul>
<li>电路交换网<ul>
<li>电路交换：源点和目标点建立专用通路，需要建立连接、传输、断开几个阶段</li>
<li>举例：传统的固定电话网络</li>
</ul>
</li>
<li>报文交换网（存储转发网）<ul>
<li>报文交换：数据整体打包为报文，加上源地址、目的地址等信息，存储转发到相邻结点</li>
<li>特点：报文长度不固定，缓冲难管理</li>
</ul>
</li>
<li>分组交换网（包交换网）<ul>
<li>分组交换：数据划分为多个等长的分组，各自加上源地址、目的地址等信息，存储转发到相邻结点</li>
<li>特点：分组长度固定，缓冲好管理</li>
<li>举例：目前主流的网络都是分组交换</li>
</ul>
</li>
</ul>
</li>
<li>按传输介质<ul>
<li>有线网：如双绞线网络、同心电缆网络</li>
<li>无线网：如蓝牙网、无线电网</li>
</ul>
</li>
</ul>
<h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul>
<li>带宽<ul>
<li>在通信领域指频带范围，单位Hz</li>
<li>在网络领域指最高数据传输速率，单位b/s</li>
</ul>
</li>
<li>时延<ul>
<li>发送时延（传输时延）<ul>
<li>从分组第一个比特开始传送，到最后一个比特发送完毕的时间</li>
<li>等于分组长度/信道带宽</li>
</ul>
</li>
<li>传播时延<ul>
<li>电磁波传播需要时间</li>
<li>等于信道长度/电磁波在信道上的速度</li>
</ul>
</li>
<li>处理时延<ul>
<li>存储转发时的处理耗时，默认情况忽略</li>
</ul>
</li>
<li>排队时延<ul>
<li>输入和输出路由器时，数据需要排队的时间，默认情况忽略</li>
</ul>
</li>
</ul>
</li>
<li>时延带宽积<ul>
<li>信道可容纳的比特数</li>
<li>等于信道的带宽 $\times$ 传播时延</li>
</ul>
</li>
<li>往返时延（RTT）<ul>
<li>包括发送方传播时延、中间结点的处理、排队时延、转发数据的发送时延</li>
<li>注意，不包括<strong>发送方传输时延</strong>和<strong>接收方确认</strong>的传输时延</li>
</ul>
</li>
<li>吞吐量<ul>
<li>单位时间通过某网络的实际数据量</li>
</ul>
</li>
<li>速率（数据传输率）<ul>
<li>信道中的实际数据传送速度，单位b/s</li>
</ul>
</li>
<li>信道利用率<ul>
<li>某信道被使用的时间占总时间的比例</li>
</ul>
</li>
</ul>
<h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><h4 id="有关概念"><a href="#有关概念" class="headerlink" title="有关概念"></a>有关概念</h4><ul>
<li>网络体系结构：各层和各层协议的集合<ul>
<li>网络分层不需要考虑具体的功能实现，这由设备厂家确定</li>
</ul>
</li>
<li>实体：可发送、接收信息的硬件或软件进程</li>
<li>对等层：不同机器的同一层</li>
<li>报文组成<ul>
<li>服务数据单元SDU：某层的原始数据</li>
<li>协议控制信息PCI：某层的控制信息</li>
<li>协议数据单元PDU：由该层的SDU和PCI打包而成，并作为下层的SDU<ul>
<li>n-PDU=n-SDU+n-PCI=(n-1)-SDU</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="层次结构含义"><a href="#层次结构含义" class="headerlink" title="层次结构含义"></a>层次结构含义</h4><ul>
<li>同主机：高层使用低层提供的服务，但注意只能调用相邻低层的接口</li>
<li>不同主机：对等层逻辑上直接通信，下层的服务是透明的</li>
</ul>
<h3 id="协议、接口、服务"><a href="#协议、接口、服务" class="headerlink" title="协议、接口、服务"></a>协议、接口、服务</h3><ul>
<li>协议：对等实体通信的规则<ul>
<li>包括语法格式、语义功能、同步时序</li>
</ul>
</li>
<li>接口：同主机的相邻层交换信息的连接点<ul>
<li>典型的接口比如服务访问点SAP，每层的SAP是相邻上层能直接访问服务的位置<ul>
<li>物理层SAP：网卡接口</li>
<li>数据链路层SAP：MAC地址</li>
<li>网络层SAP：IP地址</li>
<li>传输层SAP：端口号</li>
<li>应用层SAP：用户界面</li>
</ul>
</li>
</ul>
</li>
<li>服务：同主机的下层为相邻上层提供服务<ul>
<li>服务是垂直的，协议是水平的</li>
<li>OSI模型的服务原语（设A是用户主机，B是服务器主机）<ul>
<li>请求：A的高层发送给A的低层</li>
<li>指示：B的低层发送给B的高层</li>
<li>响应：B的高层发送给B的低层</li>
<li>证实：A的低层发送给A的高层</li>
</ul>
</li>
<li>分类<ul>
<li>面向连接服务和无连接服务（最大努力交付）：通信前是否需要建立连接</li>
<li>可靠服务和不可靠服务：是否通过检错、纠错、应答来保证数据正确</li>
<li>有应答服务和无应答服务：接收方是否应答</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ISO-OSI模型"><a href="#ISO-OSI模型" class="headerlink" title="ISO/OSI模型"></a>ISO/OSI模型</h3><ul>
<li>协议栈共7层，低3层是通信子网，高3层是资源子网</li>
<li>物理层<ul>
<li>传输单位：比特</li>
<li>功能：传输原始比特流</li>
<li>协议举例：EIA-232C、EIA/TIA RS-449、CCITT的X.21</li>
</ul>
</li>
<li>数据链路层<ul>
<li>传输单位：帧</li>
<li>功能：提供点到点的通信（主机之间）<ul>
<li>成帧、差错控制、流量控制、传输管理</li>
</ul>
</li>
<li>协议举例：SDLC、HDLC、PPP、STP、帧中继</li>
</ul>
</li>
<li>网络层<ul>
<li>传输单位：数据报或分组（包）</li>
<li>功能：分组路由、流量控制、拥塞控制、差错控制、网络互联</li>
<li>协议举例：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF</li>
</ul>
</li>
<li>传输层<ul>
<li>传输单位：报文段TCP或用户数据报UDP</li>
<li>功能：提供端到端的可靠通信服务（跨主机的进程之间）<ul>
<li>数据传输和管理、流量控制、差错控制</li>
</ul>
</li>
<li>协议举例：TCP、UDP</li>
</ul>
</li>
<li>会话层<ul>
<li>功能：建立同步，管理各主机的会话进程，设置校验同步点以在通信失效时恢复通信</li>
</ul>
</li>
<li>表示层<ul>
<li>功能：数据压缩、加密、解密等</li>
</ul>
</li>
<li>应用层<ul>
<li>传输单位：报文</li>
<li>功能：用户和网络的界面，应用多种多样</li>
<li>协议：文件传送FTP、电子邮件SMTP、万维网HTTP、域名解析DNS</li>
</ul>
</li>
</ul>
<h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3><ul>
<li>协议栈共4层，国际广泛使用的标准</li>
<li>网络接口层：类似于OSI的物理层和数据链路层</li>
<li>网际层：类似于OSI的网络层<ul>
<li>协议举例：IPV4和IPV6</li>
</ul>
</li>
<li>传输层：类似于OSI的传输层</li>
<li>应用层：类似于OSI的会话层、表示层、应用层</li>
<li>与OSI模型的区别<ul>
<li>OSI的网络层支持无连接<strong>或</strong>连接通信，TCP/IP的网际层只支持无连接通信<ul>
<li>网络层无法同时支持无连接和连接的通信（数据报方式和虚电路方式二选一）</li>
</ul>
</li>
<li>OSI的传输层只有面向连接的通信，TCP/IP的传输层支持无连接<strong>和</strong>连接通信</li>
</ul>
</li>
</ul>
<h3 id="折中模型"><a href="#折中模型" class="headerlink" title="折中模型"></a>折中模型</h3><ul>
<li>协议栈5层，学习网络时常用的模型</li>
<li>物理层、数据链路层、网络层、传输层、应用层</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-物理层</title>
    <url>/2021/11/23/network2/</url>
    <content><![CDATA[<h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>数据：信息的实体</li>
<li>信号：数据的电气表现、存在形式<ul>
<li>模拟信号：连续的信号</li>
<li>数字信号：离散的信号</li>
</ul>
</li>
<li>码元：用固定时长（即码元宽度）的信号波形表示一个k进制数<ul>
<li>码元宽度：固定时长</li>
<li>数字脉冲：信号波形</li>
</ul>
</li>
<li>信源：产生和发送数据的源头<ul>
<li>数据经过变换器变成信号，传给信道（详见编码和调制小节）</li>
</ul>
</li>
<li>信道：信号的传输媒介<ul>
<li>噪声源会对信号产生干扰</li>
<li>按信号类型分类：模拟信道、数字信道</li>
<li>按传输介质分类：无线信道和有线信道</li>
</ul>
</li>
<li>信宿：接收数据的终点<ul>
<li>信号经过反变换器变为数据，传给信宿</li>
</ul>
</li>
<li>基带传输：把数据以原始频带（基本频带）编码为基带信号，在数字信道上传输</li>
<li>频带传输：把基带信号调制为模拟信号，在模拟信道上传输</li>
<li>宽带传输：在频带传输基础上使用多个信道，每个信道同时频带传输，链路容量大，</li>
<li>通信方式<ul>
<li>单向通信：只有一个方向的通信</li>
<li>半双工通信：同一时间只有一个方向的通信，需要两个信道</li>
<li>全双工通信：同一时间可以有两个方向的通信，需要两个信道</li>
</ul>
</li>
<li>速率：单位时间内传输的数据量<ul>
<li>码元传输速率（波特率、调制速率）：单位时间传输码元的个数（脉冲数）<ul>
<li>单位是波特（Baud）</li>
<li>与进制有关</li>
</ul>
</li>
<li>信息传输速率（比特率）：单位时间传输比特的个数<ul>
<li>单位是b/s</li>
</ul>
</li>
</ul>
</li>
<li>带宽 <ul>
<li>在通信领域指频带范围，单位Hz</li>
<li>在网络领域指最高数据传输速率，单位b/s</li>
</ul>
</li>
</ul>
<h3 id="奈奎斯特定理"><a href="#奈奎斯特定理" class="headerlink" title="奈奎斯特定理"></a>奈奎斯特定理</h3><ul>
<li>条件：理想低通信道，即无噪声且带宽有限，带宽设为$W$</li>
<li>结论：极限波特率为$2W$，单位Baud</li>
</ul>
<h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><ul>
<li>条件：高斯噪声且带宽有限的信道，带宽设为$W$，信号平均功率为$S$,噪声平均功率$N$</li>
<li>结论：极限数据传输速率$Wlog_2(1+\frac{S}{N})$，单位b/s<ul>
<li>信噪比：$10lg(\frac{S}{N})$，单位dB</li>
</ul>
</li>
</ul>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>即数据转换为数字信号</p>
<ul>
<li>数字数据到数字信号<ul>
<li>归零编码RZ：高电平为1（或0），低电平为0（或1）<ul>
<li>时钟周期中间均跳到低电平（即归零）以传送时钟同步信号</li>
</ul>
</li>
<li>非归零编码NRZ：高电平为1（或0），低电平为0（或1）<ul>
<li>时钟周期内电平不变，无法同步</li>
</ul>
</li>
<li>反向非归零编码NRZI：信号不变为1，信号翻转为0<ul>
<li>可传送时钟信号以同步</li>
</ul>
</li>
<li>曼彻斯特编码：上半周期高电平下半周期低电平为1（或0），上半周期低电平上半周期低电平为1（或0）<ul>
<li>跳变作为同步时钟信号</li>
<li>频带宽度是原始基带宽度的二倍，数据传输率是调制速率的一半</li>
<li>以太网的编码方式</li>
</ul>
</li>
<li>差分曼彻斯特编码：本周期上半部分和前一个周期下半部分相同则为1，否则为0<ul>
<li>周期中间一定跳转，实现同步</li>
<li>周期之间的跳转决定编码</li>
</ul>
</li>
<li>4B/5B编码<ul>
<li>用5位编码4位，多出的16种编码作为控制码</li>
</ul>
</li>
</ul>
</li>
<li>模拟数据到数字信号：一般的方法是脉冲编码调制PCM，采样、量化、编码<ul>
<li>采样定理（奈奎斯特定理）：采样频率不小于最大频率的两倍，才能保证采样后的数字信号完整保留原模拟信号的信息</li>
<li>采样：模拟信号周期性取样，变成离散信号</li>
<li>量化：把取样的电平映射到确定的整数</li>
<li>编码：把量化的结果转化为二进制编码</li>
</ul>
</li>
</ul>
<h3 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h3><p>即数据转换为模拟信号</p>
<ul>
<li>数字数据到模拟信号：变换器调制，反变换器解调，调制方法如下<ul>
<li>幅移键控nASK：改变载波的振幅表示0到n<ul>
<li>容易实现、不抗干扰</li>
</ul>
</li>
<li>频移键控nFSK：改变载波的频率表示0到n<ul>
<li>容易实现、抗干扰</li>
</ul>
</li>
<li>相移键控nPSK：改变载波的相位表示0到n<ul>
<li>绝对调相：不同相位对应不同值</li>
<li>相对调相：相邻码元的不同相位变换对应不同值</li>
</ul>
</li>
<li>正交振幅调制QAM：改变载波的频率和相位表示数字信号<ul>
<li>设$m$个频率，$n$个相位，则每个波特为$log_2\ (mn)$ b\s</li>
</ul>
</li>
</ul>
</li>
<li>模拟数据到模拟信号<ul>
<li>提高信号的频率，使用频分复用FDM技术</li>
<li>比如声音模拟信号转换为载波模拟信号进行传输</li>
</ul>
</li>
</ul>
<h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><ul>
<li>阶段<ul>
<li>连接建立<ul>
<li>建立的是专用的<strong>物理通信路径</strong></li>
</ul>
</li>
<li>数据传输</li>
<li>连接释放</li>
</ul>
</li>
<li>优点<ul>
<li>通信时延小</li>
<li>有序传输且没有冲突</li>
<li>适用于模拟信号、数字信号</li>
<li>控制简单</li>
</ul>
</li>
<li>缺点<ul>
<li>连接建立时间长</li>
<li>线路独占，信道利用率低</li>
<li>不能差错控制</li>
</ul>
</li>
</ul>
<h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><ul>
<li>报文作为交换单位，包括目的地址、源地址，采用<strong>存储转发机制</strong></li>
<li>优点<ul>
<li>不用建立连接</li>
<li>动态分配线路，利用率高</li>
<li>提供多目标服务</li>
</ul>
</li>
<li>缺点<ul>
<li>有转发时延</li>
<li>报文可能很大，故网络结点需要较大缓存</li>
</ul>
</li>
</ul>
<h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p><em>网络层的交换技术</em></p>
<ul>
<li>大的数据划分为等长度分组，加上源地址、目的地址等信息，采用<strong>存储转发机制</strong></li>
<li>优点<ul>
<li>不用建立连接</li>
<li>线路利用率高</li>
<li>简化网络结点的缓冲存储管理</li>
<li>流水线方式快速传输</li>
<li>出错时重发数据量小</li>
</ul>
</li>
<li>缺点<ul>
<li>有转发时延，不过比报文交换短</li>
<li>需要传输额外信息</li>
<li>分组可能失序、丢失、重复，需要进行编号管理</li>
</ul>
</li>
</ul>
<h3 id="数据报和虚电路"><a href="#数据报和虚电路" class="headerlink" title="数据报和虚电路"></a>数据报和虚电路</h3><p><em>分组交换根据提供的服务，进一步分为面向连接的虚电路方式，和无连接的数据报方式</em></p>
<h4 id="数据报"><a href="#数据报" class="headerlink" title="数据报"></a>数据报</h4><ul>
<li>不需要连接</li>
<li>分组包含目的地址</li>
<li>分组独立选择转发路径</li>
<li>数据不一定按序到达</li>
<li>网络尽最大努力交付，可靠性由用户保证</li>
<li>故障节点导致分组丢失，但可以选择其他路径正常工作</li>
<li>无差错控制和流量控制</li>
</ul>
<h4 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h4><ul>
<li>需要连接</li>
<li>建立阶段需要使用目的地址，此后使用的是长度较短的虚电路号（对应某个链路）</li>
<li>同一个虚电路的分组转发的路径相同</li>
<li>数据按序到达</li>
<li>可靠性由网络保证</li>
<li>故障节点导致经过的虚电路不能工作</li>
<li>可以有差错控制、流量控制</li>
</ul>
<h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><p><em>又叫传输媒体，工作于第1层的物理层之下，称为第0层</em></p>
<h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><ul>
<li>结构：两根绝缘铜线绞合</li>
<li>屏蔽双绞线STP：双绞线的外面再加一层金属屏蔽层</li>
<li>非屏蔽双绞线UTP：无屏蔽层的双绞线</li>
<li>特点<ul>
<li>价格便宜</li>
<li>数千米到数十千米范围</li>
<li>距离太远时，衰减的模拟信号需要放大器放大，失真的数字信号需要中继器整形</li>
</ul>
</li>
</ul>
<h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><ul>
<li>结构：从内到外为内导体、绝缘层、网状屏蔽层、绝缘塑料外套</li>
<li>基带同轴电缆：50欧姆，传送基带信号</li>
<li>宽带同轴电缆：75欧姆，传送宽带信号</li>
<li>特点<ul>
<li>价格比双绞线贵</li>
<li>传输距离远，速率快</li>
<li>抗干扰能力强</li>
</ul>
</li>
</ul>
<h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h3><ul>
<li>结构：从内到外为纤芯（高折射率）、包层（低折射率）</li>
<li>原理<ul>
<li>有光脉冲表示1，无光脉冲表示0</li>
<li>利用高折射率到低折射率介质的全反射</li>
</ul>
</li>
<li>多模光纤：不同角度入射的多个光线在光纤中传输<ul>
<li>光源为发光二极管，容易失真</li>
<li>适合近距离传输</li>
</ul>
</li>
<li>单模光纤：光纤直径只有一个光波长时，光线直线传播，不反射<ul>
<li>光源为半导体激光器，成本高，衰减小</li>
<li>适合远距离传输</li>
</ul>
</li>
<li>特点<ul>
<li>传输损耗小、远距离经济</li>
<li>抗电磁性好</li>
<li>保密性好</li>
<li>体积小，质量轻</li>
</ul>
</li>
</ul>
<h3 id="无线传输介质"><a href="#无线传输介质" class="headerlink" title="无线传输介质"></a>无线传输介质</h3><h4 id="无线电波"><a href="#无线电波" class="headerlink" title="无线电波"></a>无线电波</h4><ul>
<li>穿透性强，传输距离远</li>
<li>应用：手机通信、无线局域网WLAN</li>
</ul>
<h4 id="视线介质"><a href="#视线介质" class="headerlink" title="视线介质"></a>视线介质</h4><ul>
<li>包括微波、红外线、激光，直线传播</li>
<li>应用：三个地球同步卫星作为微波信号的中继，覆盖整个地球表面</li>
<li>特点：通信容量大、距离远、覆盖广；保密性差，传播时延长</li>
</ul>
<h3 id="物理层接口的特性"><a href="#物理层接口的特性" class="headerlink" title="物理层接口的特性"></a>物理层接口的特性</h3><ul>
<li>机械特性：接口的形状尺寸、引脚数和排列、固定和锁定装置</li>
<li>电气特性：接口电缆各线的电压范围</li>
<li>功能特性：各线的电压表示的意义</li>
<li>过程特性（规程特征）：不同功能的事件出现顺序</li>
<li>物理层接口标准举例：EIA RS-232-C、ADSL、SONET/SDH</li>
</ul>
<h2 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h2><h3 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h3><ul>
<li>转发器包括<ul>
<li>中继器：整形并放大失真的数字信号<ul>
<li>放大原理：信号再生</li>
</ul>
</li>
<li>放大器：放大衰减的模拟信号<ul>
<li>放大原理：信号放大</li>
</ul>
</li>
</ul>
</li>
<li>没有存储转发功能<ul>
<li>因此两侧的网段协议相同，数据传输速率相同</li>
</ul>
</li>
<li>5-4-3规则：5段通信介质由4个中继器串联，只有3段可以接入计算机</li>
</ul>
<h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><ul>
<li>即Hub，本质是多端口中继器</li>
<li>原理：从一个端口输入数据，经过整形和放大，从其他所有端口输出<ul>
<li>显然是半双工工作方式<ul>
<li>同一时钟周期只能传输一组数据，因此连接的各计算机平分带宽</li>
</ul>
</li>
<li>连接的网络一般为星形</li>
<li>集线器连接的各工作站集合在一个冲突域和广播域中<ul>
<li>冲突域：存在冲突问题（由网络第二层解决）的主机范围</li>
<li>广播域：存在广播问题（由网络的第三层解决）的主机范围</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-传输层</title>
    <url>/2021/12/01/network5/</url>
    <content><![CDATA[<h2 id="提供的服务"><a href="#提供的服务" class="headerlink" title="提供的服务"></a>提供的服务</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>提供应用进程之间的逻辑通信<ul>
<li>即端到端的水平方向通信，屏蔽传输层以下的实现细节</li>
</ul>
</li>
<li>复用和分用<ul>
<li>复用<ul>
<li>不同进程能使用同一传输层协议</li>
</ul>
</li>
<li>分用<ul>
<li>接收的数据能正确交付到目的进程</li>
</ul>
</li>
</ul>
</li>
<li>差错检测<ul>
<li>比网络层的差错检测更强，首部和数据部分都检查</li>
</ul>
</li>
<li>可同时提供面向连接和无连接的服务<ul>
<li>网络层同时最多只能提供一个</li>
</ul>
</li>
</ul>
<h3 id="寻址和端口"><a href="#寻址和端口" class="headerlink" title="寻址和端口"></a>寻址和端口</h3><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul>
<li>定义：传输层的服务访问点（TSAP）</li>
<li>性质：软件端口<ul>
<li>硬件端口是接口中的CPU可访问寄存器</li>
</ul>
</li>
<li>作用：使得传输层能和端口号标识的应用进程交换数据</li>
</ul>
<h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><ul>
<li>定义：标识应用进程的16比特，范围0-65535</li>
<li>分类<ul>
<li>服务器端口号<ul>
<li>熟知端口号：0-1023，由IANA（互联网地址指派机构）分配给被熟知的应用服务进程</li>
<li>登记端口号：1024-49151，非熟知的应用服务进程在INAA处登记</li>
</ul>
</li>
<li>客户端口号（短暂端口号、临时端口号）<ul>
<li>49152-65536，客户进程运行时选择，通信结束后丢弃</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><p>即Socket</p>
<ul>
<li>定义<ul>
<li>Socket=（IP地址：端口号）</li>
</ul>
</li>
<li>作用<ul>
<li>唯一的标识网络中一个主机的一个应用</li>
</ul>
</li>
</ul>
<h3 id="无连接服务和面向连接服务"><a href="#无连接服务和面向连接服务" class="headerlink" title="无连接服务和面向连接服务"></a>无连接服务和面向连接服务</h3><ul>
<li>无连接服务<ul>
<li>基本概念：通信不需要建立连接，直接发送信息，尽力而为传送</li>
<li>常用协议：TCP/IP模型的UDP</li>
</ul>
</li>
<li>面向连接服务<ul>
<li>基本概念：通信前建立连接，通信时监管连接状态，通信后释放连接</li>
<li>常用协议：TCP/IP模型的TCP</li>
</ul>
</li>
</ul>
<h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h3><ul>
<li>FTP（文件传输协议）<ul>
<li>端口号：20/21</li>
<li>传输层协议：TCP</li>
</ul>
</li>
<li>TELNET（远程登陆）<ul>
<li>端口号：23</li>
<li>传输层协议：TCP</li>
</ul>
</li>
<li>SMTP（简单邮件传输协议）<ul>
<li>端口号：25</li>
<li>传输层协议：TCP</li>
</ul>
</li>
<li>DNS（域名系统）<ul>
<li>端口号：53</li>
<li>传输层协议：UDP</li>
</ul>
</li>
<li>TFTP（小文件传输协议）<ul>
<li>端口号：69</li>
<li>传输层协议：UDP</li>
</ul>
</li>
<li>HTTP（超文本传输协议）<ul>
<li>端口号：80</li>
<li>传输层协议：TCP</li>
</ul>
</li>
<li>POP3（邮局协议版本3）<ul>
<li>端口号：110</li>
<li>传输层协议：TCP</li>
</ul>
</li>
<li>SNMP（简单网络管理协议）<ul>
<li>端口号：161</li>
<li>传输层协议：UDP</li>
</ul>
</li>
<li>RTP（实时传输协议）<ul>
<li>端口号：5004/5005</li>
<li>传输层协议：UDP</li>
</ul>
</li>
</ul>
<h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><h3 id="UDP概述"><a href="#UDP概述" class="headerlink" title="UDP概述"></a>UDP概述</h3><ul>
<li>功能（不提供可靠服务，应用层自行实现可靠性）<ul>
<li>复用分用</li>
<li>差错检测</li>
</ul>
</li>
<li>优点<ul>
<li>不用建立连接<ul>
<li>没有建立连接时延</li>
</ul>
</li>
<li>不用维护连接<ul>
<li>可支持更多客户机</li>
</ul>
</li>
<li>首部短<ul>
<li>只有8字节</li>
</ul>
</li>
<li>无拥塞控制<ul>
<li>适合<strong>允许数据较少丢失</strong>但<strong>不允许较大时延</strong>的应用</li>
</ul>
</li>
<li>支持一对一、一对多、多对一、多对多的通信<ul>
<li>显然支持全双工</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="UDP数据报"><a href="#UDP数据报" class="headerlink" title="UDP数据报"></a>UDP数据报</h3><ul>
<li>结构<ul>
<li>UDP首部（8字节）<ul>
<li>源端口（2字节）：若不需要对方回信则默认为全0</li>
<li>目的端口（2字节）：分用时若找不到目的端口则丢弃报文，发送ICMP端口不可达</li>
<li>长度（2字节）：UDP数据报的长度，单位字节，至少是8</li>
<li>校验和（2字节）：不需要校验UDP数据报则设置为全0</li>
</ul>
</li>
<li>用户数据（即应用层报文）</li>
</ul>
</li>
</ul>
<h3 id="功能的实现"><a href="#功能的实现" class="headerlink" title="功能的实现"></a>功能的实现</h3><ul>
<li>封装（复用）<ul>
<li>应用层报文（不进行分割）加上首部得到UDP数据报</li>
</ul>
</li>
<li>拆分（分用）<ul>
<li>UDP数据报去掉首部得到应用层的报文 </li>
<li>如果首部的目的端口正确，则向上提交报文<ul>
<li>否则丢弃报文，并给发送方回应ICMP端口不可达</li>
</ul>
</li>
</ul>
</li>
<li>校验（差错检测）<ul>
<li>检测源IP地址、目的IP地址</li>
<li>检测首部</li>
<li>检测用户数据</li>
</ul>
</li>
</ul>
<h3 id="UDP校验"><a href="#UDP校验" class="headerlink" title="UDP校验"></a>UDP校验</h3><ul>
<li>发送方<ul>
<li>校验和设置为全0</li>
<li><strong>首部前</strong>临时添加伪首部（12字节）<ul>
<li>源IP（4字节）</li>
<li>目的IP（4字节）</li>
<li>零填充（1字节）：全0</li>
<li>协议字段（1字节）：设为17</li>
<li>UDP数据报长度（首部和数据部分）（2字节）</li>
</ul>
</li>
<li><strong>数据部分后</strong>临时添加0填充，使得数据部分为偶数字节</li>
<li>以16位的字为单位，每个单位看作反码编码的数，按反码求和<ul>
<li>反码加法采用<strong>循环进位</strong>，把进位与结果相加</li>
<li>$6+(-4)=0110+1011=1\ 0001=0010=2$</li>
<li>$(-7)+(-7)+(-7)+(-7)=1000+\cdots+1000=10\ 0000=0010$</li>
</ul>
</li>
<li>求和结果按位取反，回填到校验和中<ul>
<li>原理：设求和结果<strong>真值</strong>为A，则校验和<strong>真值</strong>为-A，接收方的校验结果<strong>真值</strong>为-0（全1）</li>
<li>特殊处理：当求和结果为全1，不用取反成全0，直接回填即可</li>
<li>特殊处理的原理：当求和结果真值为-0，校验和真值为-0而不是+0</li>
<li>特殊处理的必要性：校验和为全0的情况，已被用来表示<strong>不采用校验和</strong></li>
<li>特殊处理的正确性：全1和全1的反码加法结果就是全1，不影响接收方的差错校验</li>
</ul>
</li>
<li>删去伪首部和0填充，发送UDP数据报</li>
</ul>
</li>
<li>接收方<ul>
<li>首部前临时添加伪首部</li>
<li>数据部分后临时添加0填充，使得数据部分为偶数字节</li>
<li>以16位的字为单位，按反码求和<ul>
<li>求和结果为全1才说明无差错</li>
</ul>
</li>
<li>若无差错，则删去伪首部和0填充，并拆分UDP数据报<ul>
<li>否则丢弃该UDP数据报</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><h3 id="TCP功能"><a href="#TCP功能" class="headerlink" title="TCP功能"></a>TCP功能</h3><ul>
<li>提供点对点的面向连接的服务</li>
<li>提供可靠交付<ul>
<li>数据不丢失、不重复、不失序、无差错</li>
</ul>
</li>
<li>提供全双工通信<ul>
<li>发送方进程把数据发送到发送缓存<ul>
<li>数据收到确认后再移出缓存</li>
</ul>
</li>
<li>接收方进程把数据从接收缓存取出<ul>
<li>失序的数据可提前进入缓存</li>
</ul>
</li>
</ul>
</li>
<li>提供面向字节流的管道<ul>
<li>保证双方的字节序列相同</li>
<li>不保证数据块个数相同，因为用户数据可能被分割</li>
</ul>
</li>
</ul>
<h3 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h3><ul>
<li>首部（20+4N字节）<ul>
<li>源端口（2字节）：实现复用</li>
<li>目的端口（2字节）：实现分用</li>
<li>序号seq（4字节）：用户数据部分第一个字节的在整个字节流的序号</li>
<li>确认号ack（4字节）：期待对方发送的下一个报文段的第一个字节的序号</li>
<li>数据偏移（4位）：即首部长度，以4字节为单位，首部最长60字节</li>
<li>保留（6位）：暂时没用，置为0</li>
<li>标志字段（6位）<ul>
<li>紧急位URG：表示是否有紧急数据（一定从用户数据的第一字节开始）</li>
<li>确认位ACK：表示确认号是否有效，TCP连接建立后必须置为1</li>
<li>推送位PSH：表示是否尽快交付给进程，而不用等接收缓存满</li>
<li>复位位RST：表示出现严重差错，连接必须释放、重新建立</li>
<li>同步位SYN：SYN为1，ACK为0表示<strong>连接请求</strong>，SYN为1，ACK为1表示<strong>连接接受</strong></li>
<li>终止位FIN：表示数据发送完毕，要求释放连接</li>
</ul>
</li>
<li>窗口（2字节）：本报文段发送方的接收窗口大小（接收缓存的字节余量）<ul>
<li><strong>本报文段接收方发送窗口</strong>不能大于窗口字段值（流量控制）</li>
</ul>
</li>
<li>校验和（2字节）：使用同UDP，唯一区别是伪首部的协议字段从17改成6</li>
<li>紧急指针（2字节）：表示紧急数据的字节数，紧急位为1时使用</li>
<li>选项<ul>
<li>最大报文段长度MSS：表示本报文段发送方能处理的<strong>最大用户数据字节数</strong>，默认536字节</li>
<li>窗口扩大：用于扩大窗口字段</li>
<li>时间戳：既能计算$RTT$，又能处理序号在高速传输时因超过$2^{32}$而重复的情况</li>
<li>选择确认SACK：包含本报文段发送方缺少的数据的边界，本报文段接收方只需重传这些数据即可</li>
</ul>
</li>
<li>填充字段：使首部是4字节的整数倍</li>
</ul>
</li>
<li>用户数据（即应用层报文）</li>
</ul>
<h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p><em>连接采取客户/服务器方式，连接的两端即两个套接字</em></p>
<ul>
<li>连接建立<ul>
<li>第一次握手<ul>
<li>服务器的进程处于收听状态（LISTEN）</li>
<li>客户机向服务器发送<strong>连接请求报文段</strong>（SYN=1,ACK=0,seq=x），该报文段<strong>不携带数据但消耗一个序号</strong></li>
<li>客户进程进入同步已发送状态（SYN-SENT）</li>
</ul>
</li>
<li>第二次握手<ul>
<li>服务器收到后，如果同意，发送<strong>连接确认报文段</strong>（SYN=1,ACK=1,ack=x+1,seq=y），该报文段<strong>不携带数据但消耗一个序号</strong></li>
<li>服务器为连接分配缓存和变量</li>
<li>服务器进程进入同步已收到状态（SYN-RCVD）</li>
</ul>
</li>
<li>第三次握手<ul>
<li>客户机收到后，发送<strong>确认报文段</strong>（ACK=1,seq=x+1,ack=y+1），该报文段<strong>可以携带数据</strong></li>
<li>客户机分配缓存和变量</li>
<li>客户进程进入连接已建立状态（ESTABLISHED）</li>
</ul>
</li>
</ul>
</li>
<li>数据传送<ul>
<li>全双工通信</li>
</ul>
</li>
<li>连接释放<ul>
<li>第一次握手<ul>
<li>客户机发送<strong>连接释放报文段</strong>（FIN=1,seq=u），该报文段<strong>不携带数据但消耗一个序号</strong></li>
<li>客户机停止发数据，只能收数据（全双工变单向）</li>
<li>客户进程进入终止等待1状态（FIN-WAIT-1）</li>
</ul>
</li>
<li>第二次握手 <ul>
<li>服务器收到后，发送<strong>确认报文段</strong>（ACK=1,seq=v,ack=u+1）</li>
<li>服务器进入关闭等待状态（CLOSE-WAIT），服务器停止收数据，只能发数据（TCP连接半关闭）</li>
<li>客户机收到后，客户进程进入终止等待2状态（FIN-WAIT-2）</li>
</ul>
</li>
<li>第三次握手<ul>
<li>服务器若没有要发送的数据，则发送<strong>连接释放报文段</strong>（FIN=1,ACK=1,seq=w,ack=u+1）</li>
<li>服务器进程进入最后确认状态（LAST-ACK）</li>
</ul>
</li>
<li>第四次握手<ul>
<li>客户机收到后，发送确认报文段（ACK=1,seq=u+1,ack=w+1）</li>
<li>客户进程进入时间等待状态（TIME-WAIT）。</li>
<li>服务器收到确认报文段，进入连接关闭状态（CLOSED）</li>
<li>经过2MSL（2倍最大报文段寿命）的等待时间，客户进程进入连接关闭状态（CLOSED）</li>
</ul>
</li>
</ul>
</li>
<li>补充<ul>
<li>连接建立的第三次握手的必要性：考虑超时的连接请求突然到达服务器的情况（举例如下）<ul>
<li>A向B的第一次握手，连接请求超时，A重传连接请求</li>
<li>A和B两次握手，传输数据，完成后断开</li>
<li>A超时的连接请求到达B，B误以为连接建立</li>
</ul>
</li>
<li>连接释放的第四次握手以及期间让客户机等待2MSL的必要性<ul>
<li>考虑超时的连接请求突然到达服务器的情况（同连接建立第三次握手的必要性）</li>
<li>考虑确认报文段丢失，服务器重传连接释放报文段的情况</li>
</ul>
</li>
<li>连接建立中，易受到<strong>SYN泛洪攻击</strong>的原因<ul>
<li>根本原因：第二次握手服务器分配资源，第三次握手客户机分配资源</li>
<li>直接原因：客户机发送大量SYN连接请求，服务器分配太多资源导致崩溃</li>
</ul>
</li>
<li>连接建立中，初始序号随即设置而不固定的原因<ul>
<li>防止新连接和旧连接的报文段序号冲突，因此新连接和近期旧连接的初始序号不同</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p><em>可靠传输，即保证数据不丢失、不重复、不失序、无差错</em></p>
<ul>
<li>确认机制<ul>
<li>使用首部的确认号字段，保证数据不重复（默认累计确认）</li>
</ul>
</li>
<li>重传机制<ul>
<li>下面两种情况进行重传，保证数据不丢失</li>
<li>超时<ul>
<li>发送报文段后开启计时器</li>
<li>超时重传时间$RTO$略大于加权平均往返时间$RTT_s=(1-\alpha) RTT_s+\alpha RTT$</li>
<li>$RTT$为最近一次发送到接收的间隔（不考虑重传间隔，因为重传确认和原确认难区分）</li>
<li>权值$\alpha\in [0,1)$</li>
</ul>
</li>
<li>冗余确认（冗余ACK）<ul>
<li>发送方收到三个冗余确认时（报文段确认号相同），则认为从该确认号开始的报文段丢失，进行<strong>快速重传</strong>（即没有超时也立刻重传）</li>
</ul>
</li>
</ul>
</li>
<li>序号机制<ul>
<li>使用首部的序号字段，保证数据不失序</li>
</ul>
</li>
<li>校验机制<ul>
<li>使用首部的校验和字段，保证数据无差错</li>
</ul>
</li>
</ul>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><ul>
<li>和数据链路层流量控制的相同之处<ul>
<li>流量控制目的：匹配发送方和接收方的速率</li>
<li>流量控制原理：基于滑动窗口机制</li>
</ul>
</li>
<li>和数据链路层流量控制的不同之处<ul>
<li>TCP是端到端的流量控制，数据链路层是点到点的流量控制</li>
<li>TCP的滑动窗口能动态调整<ul>
<li>接收方根据自己接收缓存的字节余量（接收窗口$rwnd$），发送确认时设置窗口字段，动态调节发送方发送窗口大小</li>
</ul>
</li>
<li>TCP采取累计确认，但提供选择确认选项SACK<ul>
<li>是GBN和SR的混合体</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><h4 id="拥塞窗口"><a href="#拥塞窗口" class="headerlink" title="拥塞窗口"></a>拥塞窗口</h4><ul>
<li>拥塞窗口$cwnd$<ul>
<li>对网络拥塞程度进行估计而设置的窗口（单位字节）</li>
<li>己方的发送窗口的上限为$\min\{cwnd,rwnd\}$<ul>
<li>$cwnd$是己方的拥塞窗口，通过后面的拥塞控制算法获得</li>
<li>$rwnd$是对方的接收窗口，通过对方发送的报文段的窗口字段获得</li>
</ul>
</li>
</ul>
</li>
<li>拥塞控制算法包括<ul>
<li>慢开始</li>
<li>拥塞避免</li>
<li>快重传</li>
<li>快恢复</li>
</ul>
</li>
<li>接下来<strong>描述拥塞控制算法</strong>时，把己方最大报文段长度MSS作为己方拥塞窗口的单位<ul>
<li>该做法只为了表述方便，实际上拥塞窗口的单位是字节</li>
</ul>
</li>
</ul>
<h4 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h4><ul>
<li>慢开始<ul>
<li>刚建立连接，开始发送报文段时，$cwnd=1$</li>
<li>每收到一个新报文段的确认，$cwnd=cwnd+1$<ul>
<li>冗余的确认不算</li>
<li>累计的一个新确认算作多个新确认</li>
</ul>
</li>
<li>大约每经过一个$RTT$，$cwnd=\min\{2cwnd,ssthresh\}$<ul>
<li>大约每经过一个$RTT$，$cwnd$会翻倍</li>
<li>翻倍时不能跳过慢开始阈值$ssthresh$</li>
</ul>
</li>
<li>拥塞窗口到达$ssthresh$后改用拥塞避免算法<ul>
<li>$cwnd&lt;ssthresh$，使用慢开始</li>
<li>$cwnd=ssthresh$，默认改用拥塞避免，也可使用慢开始</li>
<li>$cwnd&gt;ssthresh$，使用拥塞避免</li>
</ul>
</li>
</ul>
</li>
<li>拥塞避免<ul>
<li>每经过一个$RTT$，$cwnd=cwnd+1$<ul>
<li>拥塞窗口从指数增长变成线性增长，以避免拥塞</li>
</ul>
</li>
</ul>
</li>
<li>确认超时<ul>
<li>慢开始或拥塞避免阶段若出现确认超时，则认为网络出现拥塞<ul>
<li>$ssthresh=\min\{\frac{cwnd}{2},2\}$</li>
<li>$cwnd=1$</li>
</ul>
</li>
<li>回到慢开始阶段</li>
</ul>
</li>
</ul>
<h4 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h4><p><em>本节在慢开始和拥塞避免的基础上改进</em></p>
<ul>
<li>快重传<ul>
<li>收到三个冗余确认时（报文段确认号相同），则认为从该确认号开始的报文段丢失，进行快速重传（即没有超时也立刻重传）</li>
<li>冗余的确认表明网络略微拥塞导致丢包，但不是严重拥塞，否则无法收到确认<ul>
<li>转入快恢复处理</li>
</ul>
</li>
</ul>
</li>
<li>快恢复<ul>
<li>$ssthresh=\min\{\frac{cwnd}{2},2\}$</li>
<li>$cwnd=ssthresh$</li>
<li>转入拥塞避免阶段，拥塞窗口线性增加</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第六章-应用层</title>
    <url>/2021/12/03/network6/</url>
    <content><![CDATA[<h2 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h2><h3 id="客户-服务器模型"><a href="#客户-服务器模型" class="headerlink" title="客户/服务器模型"></a>客户/服务器模型</h3><ul>
<li>即Cient/Server模型、C/S模型<ul>
<li>服务器是服务提供方，要一直保持运行状态</li>
<li>客户是服务请求方，要实现知道服务器的地址 </li>
</ul>
</li>
<li>工作流程<ul>
<li>服务器处于接收请求状态</li>
<li>客户机发出服务请求，等待结果</li>
<li>服务器收到后，分析请求、处理、把结果发给客户机</li>
</ul>
</li>
<li>特征<ul>
<li>非对称<ul>
<li>占少数的服务器集中管理整个网络</li>
<li>占多数的客户机的权限由服务器管理限制</li>
</ul>
</li>
<li>客户机之间不能通信</li>
<li>服务器支持的客户机数有限</li>
</ul>
</li>
<li>应用举例<ul>
<li>FTP</li>
<li>TELNET</li>
<li>SMTP</li>
<li>DNS</li>
<li>WWW（Web）</li>
</ul>
</li>
</ul>
<h3 id="对等模型"><a href="#对等模型" class="headerlink" title="对等模型"></a>对等模型</h3><ul>
<li>即P2P模型<ul>
<li>P2P网络是由对等结点组成的逻辑网络</li>
</ul>
</li>
<li>特征<ul>
<li>各计算机地位对称，既是客户，又是服务器<ul>
<li>获取服务的同时需要提供服务，也算缺点</li>
</ul>
</li>
<li>任意一对计算机（对等方）直接相互通信</li>
<li>网络单结点失效不影响其他结点</li>
</ul>
</li>
<li>应用举例<ul>
<li>PPlive</li>
<li>Bittorrent</li>
<li>电驴</li>
</ul>
</li>
</ul>
<h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><h3 id="层次域名空间"><a href="#层次域名空间" class="headerlink" title="层次域名空间"></a>层次域名空间</h3><ul>
<li>域名：网络设备的一种具有层次结构的命名<ul>
<li>比如www.google.com是谷歌搜索服务器的域名</li>
<li>“.com”顶级域名、”.google”二级域名、”www”三级域名</li>
</ul>
</li>
<li>概念介绍<ul>
<li>域名<ul>
<li>多个标号的序列，标号间”.”隔开</li>
<li>每个标号对应一个子域名，且从左到右域名级别递增，最右边是顶级域名</li>
<li>不超过255各字符</li>
</ul>
</li>
<li>标号<ul>
<li>由字母、数字、”-“组成</li>
<li>不区分大小写</li>
<li>不超过63个字符</li>
</ul>
</li>
<li>顶级域名<ul>
<li>国家顶级域名：”.cn”是中国、”.us”是美国</li>
<li>通用顶级域名：”.com”是公司、”.org”是非营利组织</li>
<li>基础结构域名：”.arpa”反向域名解析（唯一的基础结构域名）</li>
</ul>
</li>
<li>层次域名空间<ul>
<li>各个域的关系可以用树状层次结构表示</li>
<li>各个域的管理组织不同，子域由子组织管理</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><ul>
<li>域名服务器：采用<strong>C/S模型</strong>的分布式数据库系统，<strong>提供从域名到IP地址的解析</strong><ul>
<li>若不能进行解析，则给用户提供寻找其他域名服务器的信息</li>
</ul>
</li>
<li>区：一个域名服务器的管辖范围</li>
<li>域名系统（DNS）：以层次方式组织大量域名服务器，提供域名解析服务</li>
<li>域名服务器按层次的分类<ul>
<li>根域名服务器<ul>
<li>13个相互冗余的根域名服务器组成服务器集群，管理所有顶级域名服务器的IP地址</li>
<li>提供下一步要查询的顶级域名服务器的IP地址</li>
</ul>
</li>
<li>顶级域名服务器<ul>
<li>管理该域名服务器所注册的所有二级域名</li>
<li>提供最终结果的IP地址或下一步要查询的域名服务器的IP地址</li>
</ul>
</li>
<li>授权域名服务器（又叫权限域名服务器，<strong>可以涉及多个层次</strong>）<ul>
<li>管理在服务器注册的所有主机（一台主机一般在多个服务器注册）</li>
<li>提供从主机名到主机IP地址的转换</li>
</ul>
</li>
<li>本地域名服务器<ul>
<li>每个因特网服务提供者（ISP）可以拥有一个本地域名服务器</li>
<li>处理本地主机的DNS查询请求</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><ul>
<li>正向解析：域名映射到IP地址</li>
<li>反向解析：IP地址映射到域名</li>
<li>DNS请求报文：由用户机的DNS客户端构造，装入UDP，发往服务器，请求域名解析服务</li>
<li>域名解析方式<ul>
<li>注：<ul>
<li>为描述简洁，域名服务器简写，比如“根域名服务器”简写为“根”</li>
<li>低层服务器看作是高层服务器的用户机</li>
</ul>
</li>
<li>递归查询（负载较大，很少使用）<ul>
<li>主机、本地、根、顶级、权限、顶级、根、本地、主机</li>
</ul>
</li>
<li>递归与迭代相结合的查询（常用）<ul>
<li>完整的递归迭代查询：主机、<strong>本地</strong>、根、<strong>本地</strong>、顶级、<strong>本地</strong>、权限、<strong>本地</strong>、主机</li>
<li>不完整的递归迭代查询：前三个<strong>本地</strong>的任意一个，若已经查到了域名的IP地址，可以提前结束迭代，返回主机</li>
<li>退化为递归查询：主机、本地、主机</li>
</ul>
</li>
</ul>
</li>
<li>高速缓存<ul>
<li>DNS服务器获得DNS查询结果后，除了将其发送给用户机，还要将其保存到高速缓存<ul>
<li>方便之后相同的域名查询</li>
<li>高速缓存内容不永久保存，定期丢弃</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="文本传输协议FTP"><a href="#文本传输协议FTP" class="headerlink" title="文本传输协议FTP"></a>文本传输协议FTP</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul>
<li>功能<ul>
<li>以用户登陆方式，获得远程FTP服务器的文件的管理权限<ul>
<li>上传和下载</li>
</ul>
</li>
<li>以匿名方式（非用户登陆方式）提供公用文件的共享</li>
<li>提供不同种主机间的文件传输</li>
</ul>
</li>
<li>服务器的进程组成<ul>
<li>一个主进程（端口号21）<ul>
<li>接收新请求</li>
</ul>
</li>
<li>若干从属进程<ul>
<li>处理单个请求</li>
</ul>
</li>
</ul>
</li>
<li>从属进程类型<ul>
<li>控制进程（端口号21）</li>
<li>数据传送进程（默认情况端口号20）</li>
</ul>
</li>
<li>工作步骤<ul>
<li>主进程等待客户连接请求</li>
<li>主进程收到客户连接请求，启动控制进程，建立<strong>控制连接</strong><ul>
<li>会话结束后终止控制进程</li>
</ul>
</li>
<li>控制进程收到客户数据传输请求，启动数据传送进程，建立<strong>数据连接</strong><ul>
<li>传送完后终止数据传送进程 </li>
</ul>
</li>
<li>会话结束后，继续等待其他客户请求</li>
</ul>
</li>
</ul>
<h3 id="控制连接和数据连接"><a href="#控制连接和数据连接" class="headerlink" title="控制连接和数据连接"></a>控制连接和数据连接</h3><ul>
<li>控制连接<ul>
<li>两端进程：控制进程</li>
<li>服务器端口号：21</li>
<li>用户端口号：用户随机分配</li>
<li>功能：以ASCII格式传送控制信息，如数据连接请求、数据传送请求、中止传输命令等</li>
<li>带外传送：指控制连接和数据连接分离的传送方式</li>
</ul>
</li>
<li>数据连接<ul>
<li>两端进程：数据传送进程</li>
<li>服务器端口号<ul>
<li>主动模式：20</li>
<li>被动模式：服务器随机分配 </li>
</ul>
</li>
<li>用户端口号：用户随机分配</li>
<li>功能：完成客户端和服务器端的文件数据传送</li>
<li>传送模式：默认为主动模式<ul>
<li>主动模式PORT：客户发送PORT命令和客户端口号，再由服务器发起连接</li>
<li>被动模式PASV：客户发送PASV命令获取服务器端口号，再由客户机发起连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="文件修改方式"><a href="#文件修改方式" class="headerlink" title="文件修改方式"></a>文件修改方式</h3><ul>
<li>传统的FTP<ul>
<li>在本地复制远程文件的整个副本，修改后传回服务器，很耗时</li>
</ul>
</li>
<li>网络文件系统NFS<ul>
<li>在本地复制远程文件的特定片段，修改后传回服务器，速度快</li>
</ul>
</li>
</ul>
<h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="电子邮件系统的组成结构"><a href="#电子邮件系统的组成结构" class="headerlink" title="电子邮件系统的组成结构"></a>电子邮件系统的组成结构</h3><ul>
<li>用户代理<ul>
<li>用户和电子邮件系统的接口（即邮件客户端软件）</li>
<li>提供邮件撰写、显示、处理、通信的功能</li>
</ul>
</li>
<li>邮件服务器<ul>
<li>功能是发送和接收邮件</li>
<li>结构包括邮件缓存和用户邮箱</li>
<li>举例：qq邮件服务器、189邮件服务器等</li>
</ul>
</li>
<li>电子邮件的协议<ul>
<li>发送协议（SMTP协议）<ul>
<li>发送方用户代理（客户）数据<strong>推</strong>到发送方邮件服务器（服务器）的<strong>邮件缓存</strong></li>
<li>发送方邮件服务器（客户）发送数据到接收方邮件服务器（服务器）的<strong>用户邮箱</strong></li>
</ul>
</li>
<li>接收协议（POP3协议或IMAP协议）<ul>
<li>接收方邮件服务器（服务器）数据<strong>拉</strong>到接收方用户代理（客户）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="电子邮件格式"><a href="#电子邮件格式" class="headerlink" title="电子邮件格式"></a>电子邮件格式</h3><ul>
<li>信封<ul>
<li>自动填写</li>
</ul>
</li>
<li>内容<ul>
<li>首部<ul>
<li>From（自动填写）：[发送方用户邮箱名]@[发送方邮件服务器的域名]</li>
<li>To（用户必填）：[接收方用户邮箱名]@[接收方邮件服务器的域名]</li>
<li>Subject（用户选填）：[邮件的主题]</li>
</ul>
</li>
<li>主体<ul>
<li>用户撰写的邮件内容（ASCII码）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>即多用途网际邮件扩充</p>
<ul>
<li>功能<ul>
<li>使得SMTP除了支持ASCII码，还支持其他编码以及二进制文件的发送</li>
</ul>
</li>
<li>实现<ul>
<li>不改变SMTP</li>
<li>新定义了首部字段、主体结构、传送非ASCII码的规则</li>
</ul>
</li>
</ul>
<h3 id="SMTP与POP3"><a href="#SMTP与POP3" class="headerlink" title="SMTP与POP3"></a>SMTP与POP3</h3><ul>
<li>SMTP<ul>
<li>连接建立<ul>
<li>发送方邮件服务器定期扫描缓存</li>
<li>缓存发现邮件，则在端口25和接收方服务器建立TCP连接</li>
<li>接收方回复220 Service ready</li>
<li>发送方发出HELO，带有发送方主机名</li>
</ul>
</li>
<li>邮件传送<ul>
<li>发送方发出的MAIL，带有发件人地址</li>
<li>接收方回复250 OK</li>
<li>发送方发出若干RCPT，确认接收方是否做好准备</li>
<li>接收方回复250 OK或No such user here</li>
<li>发送方发出DATA，传输邮件内容</li>
<li>接收方回复354 Start mail input；end with <CRLF>.<CRLF></CRLF></CRLF></li>
<li>发送方发出<CRLF>.<CRLF>，表示邮件内容结束</CRLF></CRLF></li>
</ul>
</li>
<li>连接释放<ul>
<li>发送方发出QUIT</li>
<li>接收方回复221</li>
<li>进行TCP的连接释放</li>
</ul>
</li>
</ul>
</li>
<li>POP3<ul>
<li>端口号110，基于TCP</li>
<li>工作方式（由POP3客户决定）<ul>
<li>下载并保留：下载后邮件保留在邮箱</li>
<li>下载并删除：下载后邮件删除</li>
</ul>
</li>
<li>传输方式<ul>
<li>明文传输</li>
</ul>
</li>
</ul>
</li>
<li>IMAP<ul>
<li>比POP3复杂，但都是用于邮件接收</li>
</ul>
</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>在万维网的邮件系统中使用HTTP协议</p>
<ul>
<li>用户代理（浏览器）和邮件服务器以HTTP发送和接收邮件</li>
</ul>
<h2 id="WWW"><a href="#WWW" class="headerlink" title="WWW"></a>WWW</h2><h3 id="WWW的概念和组成结构"><a href="#WWW的概念和组成结构" class="headerlink" title="WWW的概念和组成结构"></a>WWW的概念和组成结构</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>万维网（WWW）：联机分布式的信息储藏所<ul>
<li>万维网由大量网络站点互联</li>
<li>每个站点包含若干文档（页面、资源）</li>
</ul>
</li>
<li>超链接（链接）：从一个文档访问另一个文档的方法</li>
<li>超文本：包含链接的文档（纯文本）</li>
<li>超媒体：包含链接的文档（除了文本，还包含图像、声音、视频等媒体）</li>
<li>互联网、因特网、万维网的关系<ul>
<li>互联网：多个计算机网络按协议连接的大型网络</li>
<li>因特网：实际已有的最大的互联网，包括网络站点、电子邮件、新闻组等</li>
<li>万维网：因特网的主要部分</li>
</ul>
</li>
</ul>
<h4 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h4><ul>
<li>统一资源定位符（URL）：唯一的标识万维网的文档<ul>
<li>例如：”<a href="http://www.tsinghua.edu.cn:80/zjqh/xxgk1.htm">http://www.tsinghua.edu.cn:80/zjqh/xxgk1.htm</a>“</li>
<li>结构：[传送协议]://[服务器主机域名]：[端口]/[路径]</li>
<li>注：传送协议一般是http或fps，端口一般省略</li>
</ul>
</li>
<li>超文本传输协议（HTTP）：基于TCP的应用层协议，在浏览器客户端和Web服务器之间传送超文本</li>
<li>超文本标记语言（HTML）：对页面进行描述的语言</li>
</ul>
<h3 id="HTTP-1"><a href="#HTTP-1" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h4><ul>
<li>浏览器分析URL，得到URL的四个成分，传送协议是http</li>
<li>浏览器请求DNS解析URL中的服务器主机域名，得到服务器IP地址</li>
<li>浏览器与服务器的端口80建立TCP连接</li>
<li>浏览器发出HTTP请求，GET/[路径]</li>
<li>服务器发出HTTP响应，回复路径对应的文档</li>
<li>释放TCP</li>
<li>浏览器解释文档，并显示给用户</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>HTTP是无连接的<ul>
<li>传送数据前不需要建立HTTP连接</li>
</ul>
</li>
<li>HTTP是无状态的<ul>
<li>服务器不跟踪用户活动</li>
<li>可以用Cookie加数据库跟踪用户活动<ul>
<li>Cookie在服务器生成，在浏览器储存</li>
</ul>
</li>
</ul>
</li>
<li>可以非持久连接和持久连接<ul>
<li>非持久连接：服务器发送响应后释放TCP<ul>
<li>比如前面的操作过程</li>
</ul>
</li>
<li>持久连接：服务器发送响应后保持TCP<ul>
<li>非流水线方式（HTTP/1.0）：浏览器收到响应才能发出下一个请求</li>
<li>流水线方式（HTTP/1.1）：可以连续发送请求给浏览器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h4><p><em>注：每个字段都是ASCII码</em></p>
<ul>
<li>请求报文<ul>
<li>请求行：[方法][空格][URL][空格][HTTP版本][CRLF]<ul>
<li>GET方法：请求服务器响应并返回实体</li>
<li>HEAD方法：请求服务器响应，不返回实体</li>
<li>POST方法：给服务器发送注释</li>
<li>CONNECT方法：用于代理服务器</li>
<li>PUT方法：在URL处存储一个文档</li>
<li>DELETE方法：删除URL对应文档</li>
<li>CRLF：回车换行</li>
</ul>
</li>
<li>首部：包含若干首部行，每个首部行结构为[字段名][:][空格][值][CRLF]<ul>
<li>Host字段：服务器主机域名</li>
<li>Connection字段：close或open，表示是否持久连接</li>
<li>User-Agent：浏览器名称和版本</li>
<li>Accept-Language：比如cn表示请求服务器优先响应中文文档</li>
</ul>
</li>
<li>[CRLF]</li>
<li>实体主体：通常不用</li>
</ul>
</li>
<li>响应报文<ul>
<li>状态行：[版本][空格][状态码][空格][短语][CRLF]<ul>
<li>状态码（3位5类）：通知收到（1xx）、接受请求（2xx）、资源位置已转移（3xx）、客户差错（4xx）、服务器差错（5xx）</li>
<li>短语：对状态码简单解释</li>
</ul>
</li>
<li>首部：包含若干首部行<ul>
<li>首部行：[字段名][:][空格][值][CRLF]</li>
</ul>
</li>
<li>[CRLF]</li>
<li>实体主体：包含一个请求对象（如文本、一张图片），有时不用</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第一章-操作系统概述</title>
    <url>/2021/11/07/operatingSystem1/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>定义：操作系统是管理分配计算机系统软硬件资源，组织调度计算机工作，为用户和其他软件提供接口环境的程序集合</li>
<li>地位：操作系统是计算机系统最基本的系统软件</li>
</ul>
<h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ul>
<li>并发<ul>
<li>通过引入进程，使得计算机系统有处理和调度多个程序同时间间隔运行的能力</li>
<li>和并行有区别，并行指的是同时刻，并发指的是同间隔</li>
</ul>
</li>
<li>共享<ul>
<li>即资源共享，包括互斥共享方式、同时访问方式</li>
<li>互斥共享方式：对于临界资源（独占资源），一段时间只允许一个进程访问，如打印机和磁带</li>
<li>同时访问方式：一段时间内可以分时的共享某资源，宏观上是同时访问资源，如磁盘设备</li>
<li>并发和共享相互依存，是操作系统<strong>最基本的特征</strong></li>
</ul>
</li>
<li>虚拟<ul>
<li>虚拟技术把实体变成用户感觉的逻辑对应物</li>
<li>虚拟处理器技术（时分复用技术）：分时的使用一个实体CPU，逻辑上变成多个虚拟CPU供每个用户使用</li>
<li>虚拟存储器技术（空分复用技术）：通过外存实现内存容量的扩展，使得用户感觉到更大的（虚拟）内存容量</li>
<li>虚拟设备技术：把一台IO物理设备虚拟为多台逻辑IO设备，逻辑上变成多个虚拟IO设备供每个用户使用</li>
</ul>
</li>
<li>异步：指进程的执行断断续续，以不可预测速度推进，操作系统处于随机的环境中</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>资源的管理者<ul>
<li>处理机管理：进程的管理，如控制、同步、通信、死锁处理、调度等</li>
<li>存储器管理：内存分配和回收、地址映射、内存保护、内存扩充等</li>
<li>文件管理：操作系统的文件系统部分管理文件，比如文件存储空间的管理、目录管理、文件读写管理和保护等</li>
<li>设备管理：完成用户IO请求、方便用户使用、提供设备利用率，具体包括缓冲管理、设备分配、设备处理、虚拟设备等</li>
</ul>
</li>
<li>软硬件的接口<ul>
<li>命令接口<ul>
<li>联机命令接口：对应联机作业控制方式，控制台输入一行命令，执行一行命令，适合分时或实时系统</li>
<li>脱机命令接口：对应脱机作业控制方式，把一批命令写出说明书一起给系统，由命令解释程序执行，适合批处理系统</li>
</ul>
</li>
<li>程序接口<ul>
<li>由系统调用（广义指令）组成</li>
<li>编程人员通过系统调用请求操作系统提供服务</li>
</ul>
</li>
</ul>
</li>
<li>扩充机器<ul>
<li>又叫虚拟机</li>
<li>把裸机改造成功能更强的机器</li>
</ul>
</li>
</ul>
<h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><ul>
<li>手工操作阶段<ul>
<li>人工装入程序、运行、输出，无操作系统</li>
<li>用户独占全机器，资源利用率低</li>
<li>CPU等待手工操作，CPU利用不充分</li>
</ul>
</li>
<li>批处理阶段<ul>
<li>解决人机矛盾、CPU和IO设备速度不匹配矛盾</li>
<li>脱机技术，解决独占设备的问题</li>
<li>开始出现操作系统，采用多道程序设计技术形成多道批处理操作系统（需要管理资源）</li>
<li>单道批处理系统<ul>
<li>无需人工，成批按顺序对作业处理</li>
<li>内存只有一道作业，资源利用率受到限制</li>
</ul>
</li>
<li>多道批处理系统<ul>
<li>内存存放多道独立的程序</li>
<li>宏观并行，微观串行</li>
<li>资源利用率高、系统吞吐量大</li>
<li>不能人机交互</li>
</ul>
</li>
</ul>
</li>
<li>分时操作系统<ul>
<li>分时技术指按时间片轮流把处理器分配给各<strong>联机</strong>作业使用</li>
<li>多个用户宏观上<strong>同时</strong>且<strong>独立的</strong>和系统<strong>交互</strong>，系统响应<strong>及时</strong></li>
<li>特点：同时性、独立性、交互性、及时性</li>
</ul>
</li>
<li>实时操作系统<ul>
<li>可以在比时间片更短的时间内，完成紧急任务</li>
<li>硬实时操作系统：要求紧急任务绝对完成，如飞行器的飞行控制系统</li>
<li>软实时操作系统：偶尔可以没完成，不会有永久性破坏。如飞机订票系统、银行管理系统</li>
<li>特点：及时性、可靠性</li>
</ul>
</li>
<li>网络操作系统：实现各计算机的资源管理、资源共享和通信，集中控制</li>
<li>分布式操作系统<ul>
<li>分布式计算机系统<ul>
<li>通信方式交换信息</li>
<li>各计算机地位对称</li>
<li>资源全局共享</li>
<li>一个工作可以分布在几台计算机上<strong>协同</strong>完成（和网络操作系统的区别）</li>
</ul>
</li>
<li>管理分布式计算机系统的是分布式操作系统，在网络操作系统之上，分布式控制</li>
</ul>
</li>
<li>个人计算机操作系统<ul>
<li>比如Windows、Linux、Macintosh</li>
<li>最广泛的操作系统</li>
</ul>
</li>
</ul>
<h2 id="程序运行环境"><a href="#程序运行环境" class="headerlink" title="程序运行环境"></a>程序运行环境</h2><h3 id="CPU运行模式"><a href="#CPU运行模式" class="headerlink" title="CPU运行模式"></a>CPU运行模式</h3><ul>
<li>原语：操作系统最底层的不可分割的原子操作，操作时间短、调用频繁</li>
<li>特权指令<ul>
<li>只有操作系统才能执行的指令</li>
<li>包括系统调用指令、时钟操作指令、中断操作指令、原语指令</li>
</ul>
</li>
<li>内核模式：运行内核程序（管理程序），执行特权指令</li>
<li>用户模式：运行用户程序，执行非特权指令</li>
</ul>
<h3 id="中断和异常的处理"><a href="#中断和异常的处理" class="headerlink" title="中断和异常的处理"></a>中断和异常的处理</h3><ul>
<li>详见计算机组成原理第五章的异常和中断机制</li>
</ul>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ul>
<li>指用户请求操作系统的服务，由操作系统代为执行资源有关的操作（必然用到特权指令）</li>
<li>系统调用会导致用户态进入内核态，需要在用户态执行访管指令（不是特权指令）</li>
<li>系统调用分为<ul>
<li>设备管理类</li>
<li>文件管理类</li>
<li>进程控制类</li>
<li>进程通信类</li>
<li>内存管理类</li>
</ul>
</li>
</ul>
<h3 id="程序的链接和装入"><a href="#程序的链接和装入" class="headerlink" title="程序的链接和装入"></a>程序的链接和装入</h3><ul>
<li>链接：编译后的一组目标模块和库函数，经过链接器，链接一起形式装入模块</li>
<li>装入：装入程序把装入模块送入内存运行</li>
<li>链接方式<ul>
<li>静态链接：程序运行之前链接</li>
<li>装入时动态链接：程序装入内存时链接</li>
<li>运行时动态链接：程序运行时用到某模块再链接某模块</li>
</ul>
</li>
<li>装入方式<ul>
<li>绝对装入<ul>
<li>含义：按装入模块的地址，装入程序和数据至内存</li>
<li>特点：只适合单道程序环境</li>
</ul>
</li>
<li>可重定位装入（静态重定位）<ul>
<li>含义：装入模块的相对地址在装入时一次性变换为绝对地址</li>
</ul>
</li>
<li>动态运行时装入（动态重定位）<ul>
<li>含义：装入模块的相对地址在程序真正执行时变换为绝对地址</li>
<li>特点：程序可以在存储区中不连续、装入部分代码即可运行、运行期间动态申请分配空间、用户地址空间比存储空间大</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="进程的内存映像"><a href="#进程的内存映像" class="headerlink" title="进程的内存映像"></a>进程的内存映像</h3><ul>
<li>代码段：可读、可多个进程共享、大小指定不变</li>
<li>数据段：全局变量和静态变量、大小指定不变</li>
<li>进程控制块PCB：存放在系统区，控制和管理进程</li>
<li>堆：存放动态变量、大小动态变化</li>
<li>栈：存放局部变量、实现函数调用、大小动态变化</li>
<li>下图是一个进程的内存映像举例<ul>
<li>操作系统内核区存放内核代码、PCB等</li>
<li>共享库存放例如printf等库函数</li>
<li>.data是已初始化全局变量、静态变量</li>
<li>.bss是未初始化和所有初始化为0的全局变量和静态变量</li>
<li>.init是程序初始化函数</li>
<li>.text是用户程序代码</li>
<li>.rodata是只读数据</li>
</ul>
</li>
</ul>
<img src="/2021/11/07/operatingSystem1/mirror.jpg" class title="this is mirror">
<h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><ul>
<li>进程有独立的（虚拟）地址空间</li>
<li>进程运行时看到的都是虚拟地址</li>
<li>操作系统通过内存管理单元MMU把虚拟地址转化为物理地址</li>
</ul>
<h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h2><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><ul>
<li>最底层（层0）：硬件</li>
<li>最高层（层n）：用户接口</li>
<li>单向依赖：每层只能调用相邻底层的功能</li>
<li>优点<ul>
<li>调试实现方便：从低层开始调试验证，逐层向上</li>
<li>扩充和维护方便：增、改一个层次，只要不改接口，不影响其他层次</li>
</ul>
</li>
<li>缺点<ul>
<li>不灵活：层之间关系固定</li>
<li>效率差：执行一个功能要引入各个层之间的通信开销</li>
</ul>
</li>
</ul>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul>
<li>模块-接口设计法<ul>
<li>操作系统看作大模块</li>
<li>每个模块可以划分为多个子模块，需要规定子模块功能和模块间通信接口</li>
<li>划分模块需要考虑独立性<ul>
<li>模块内要独立性低，即内聚性高</li>
<li>模块间要独立性高，即耦合度低</li>
</ul>
</li>
</ul>
</li>
<li>优点<ul>
<li>提供设计的正确性、可理解性、可维护性</li>
<li>增强操作系统可适应性</li>
<li>加速开发</li>
</ul>
</li>
<li>缺点<ul>
<li>各模块之间的关系不全是单向依赖，调试顺序难确定</li>
<li>接口实际需求难以规定</li>
</ul>
</li>
</ul>
<h3 id="宏内核"><a href="#宏内核" class="headerlink" title="宏内核"></a>宏内核</h3><ul>
<li>系统主要功能模块都放到内核态。又叫大内核、单内核</li>
<li>优点：各模块共享信息，性能好</li>
<li>缺点：结构逐渐复杂，内核容易崩溃</li>
<li>目前主流的操作系统都是宏内核架构</li>
</ul>
<h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><ul>
<li>系统最基本功能模块（与CPU、IO硬件有关）放到微内核；大部分的其余模块（进程管理、存储管理、文件管理等服务器）放到用户态（服务器以进程形式实现）</li>
<li>优点<ul>
<li>设计简单：内核中功能少</li>
<li>拓展灵活：拓展时基本无需修改内核代码</li>
<li>安全可靠：一个模块崩溃不导致内核崩溃</li>
<li>可移植性好</li>
<li>分布式计算：用户和服务器间、服务器间采用通信采用消息传递机制，适合分布式系统和网络系统</li>
</ul>
</li>
<li>缺点：性能差，需要频繁在内核态和用户态间切换</li>
<li>可以把一些频繁使用的模块放回内核，是提高性能和简化内核的折中</li>
<li>在实时、工业、航空、军事领域流行，因为对可靠性有要求</li>
</ul>
<h3 id="外核"><a href="#外核" class="headerlink" title="外核"></a>外核</h3><ul>
<li>外核可以指一种操作系统结构设计，也可以指多道程序</li>
<li>多道程序是内核态唯一运行的程序，任务是给各个用户的虚拟机分配资源</li>
<li>一个用户一个虚拟机，每个虚拟机可以运行各自的操作系统，但只能使用分配给自己的资源</li>
<li>优点：减少映像层；把多道程序（内核态）和用户操作系统代码（用户态）分离</li>
</ul>
<h2 id="操作系统引导"><a href="#操作系统引导" class="headerlink" title="操作系统引导"></a>操作系统引导</h2><ul>
<li>概念铺垫<ul>
<li>引导：找到后续程序的位置，以执行</li>
<li>操作系统引导：计算机启动时，找到操作系统程序的硬盘位置，并加载到内存的过程</li>
<li>BOOT<ul>
<li>含义：计算机开机时的入口引导程序，存放在ROM中</li>
<li>功能：进行硬件初始化，包括引导BIOS</li>
</ul>
</li>
<li>BIOS<ul>
<li>含义：又叫基本输入输出系统，是固化在内存的程序，可以直接从其第一条指令开始执行</li>
<li>功能：硬件自检和引导MBR</li>
</ul>
</li>
<li>MBR<ul>
<li>含义：全称主引导记录，又叫主引导扇区（Boot Sector），是<strong>引导硬盘</strong>第一个扇区</li>
<li>功能：找到<strong>活动分区</strong>，即操作系统在硬盘的位置。MBR内有引导程序可引导PBR</li>
</ul>
</li>
<li>引导硬盘：即系统盘、启动盘，是存有操作系统的硬盘，第一个扇区是主引导扇区</li>
<li>活动分区：即计算机的启动分区，是硬盘中含有操作系统的分区</li>
<li>PBR<ul>
<li>含义：全称是分区引导记录，是活动分区第一个扇区</li>
<li>功能：寻找并激活启动管理器（活动分区中负责引导操作系统的程序）</li>
</ul>
</li>
<li>启动管理器：引导操作系统的程序</li>
</ul>
</li>
<li>关键步骤<ul>
<li>开机激活CPU来读取BOOT</li>
<li>BOOT把指令寄存器设置为BIOS的第一条指令</li>
<li>BIOS进行硬件自检，检查计算机硬件是否正常</li>
<li>BIOS加载MBR入内存<ul>
<li>根据硬盘启动顺序Boot Sequnece把第一个硬盘的第一个扇区加载入内存</li>
<li>根据特定标识判断，若这是非引导硬盘，则继续把下一个硬盘的第一个扇区加载入内存</li>
<li>循环上一步直至发现引导硬盘，如果找不到则会死机</li>
</ul>
</li>
<li>MBR的引导程序根据MBR的硬盘分区表的特定标识找到活动分区</li>
<li>MBR的引导程序把活动分区的PBR读入内存</li>
<li>PBR把启动管理器加载入内存</li>
<li>启动管理器把操作系统加载入内存，然后操作系统进行初始化</li>
</ul>
</li>
</ul>
<h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><ul>
<li>虚拟机通过虚拟机管理程序，为高层提供<strong>多台</strong>可以运行各自操作系统的虚拟机</li>
<li>第一类虚拟机<ul>
<li>虚拟机管理程序建立在裸机上一层，运行在内核态</li>
<li>虚拟机管理程序的上一层是有各自操作系统的各个虚拟机</li>
<li>这些操作系统运行在虚拟内核态（工作在用户态但自认为工作在内核态）</li>
</ul>
</li>
<li>第二类虚拟机<ul>
<li>虚拟机管理程序建立在<strong>宿主操作系统</strong>上，运行在用户态</li>
<li>虚拟机管理程序的上一层是有各自<strong>客户操作系统</strong>的各个虚拟机</li>
<li>客户操作系统安装在虚拟磁盘，对应宿主操作系统的一个文件</li>
<li>常见的第二类虚拟机管理程序有VMware Workstation</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-存储管理</title>
    <url>/2021/11/13/operatingSystem3/</url>
    <content><![CDATA[<h2 id="内存管理基础"><a href="#内存管理基础" class="headerlink" title="内存管理基础"></a>内存管理基础</h2><h3 id="内存管理基本概念"><a href="#内存管理基本概念" class="headerlink" title="内存管理基本概念"></a>内存管理基本概念</h3><p>内存管理的功能</p>
<ul>
<li>地址转换：内存管理提供从逻辑地址到物理地址的变换机制<ul>
<li>逻辑地址空间<ul>
<li>编译后的目标模块从0单元开始编址</li>
<li>各个模块按顺序链接后构成统一的从0单元开始的逻辑地址空间</li>
<li>用户可见</li>
</ul>
</li>
<li>物理地址空间<ul>
<li>主存中实际的物理地址</li>
<li>可执行代码装入内存时，要进行地址重定位，即把逻辑地址转换为物理地址</li>
</ul>
</li>
</ul>
</li>
<li>内存共享：允许多个进程访问内存同一个部分，比如同一个数据块</li>
<li>内存保护<ul>
<li>含义：内存分配前，保护操作系统不受用户影响、保护用户之间不相互影响</li>
<li>方法有两种<ul>
<li>在CPU中设置用户作业上下限寄存器，存放用户作业在主存中的上限、下限地址</li>
<li>把逻辑地址和界地址寄存器（限长寄存器）比较，判断是否越界；不越界的情况，把逻辑地址和重定位寄存器（基址寄存器）相加，得到物理地址</li>
</ul>
</li>
</ul>
</li>
<li>内存分配和回收<ul>
<li>由操作系统管理主存空间的分配和回收，程序员不需要考虑</li>
</ul>
</li>
<li>内存扩充：利用外存扩充内存的容量，有两种方法<ul>
<li>覆盖<ul>
<li>思想：把用户空间分成固定区、覆盖区，活跃内容放固定区，其他即将访问的内容放覆盖区，其他暂时不用的内容放外存（需要时从外存替换入覆盖区）</li>
<li>特点：内存容量可以小于单进程总信息量；内存容量需要大于单进程任何运行时刻需要的信息量；主要应用于单进程；属于被淘汰的历史技术</li>
</ul>
</li>
<li>交换<ul>
<li>思想：把等待态的进程换出到外存，把调度使用CPU的进程换入到内存（进程中级调度就是交换技术）</li>
<li>特点：交换时间希望短于进程执行时间；适合多进程或多作业情况；目前主流的技术</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h3><ul>
<li>连续分配管理方式指在内存中为进程分配连续的空间</li>
<li>外部碎片：没有分配给进程，且无法利用的空间</li>
<li>内部碎片：分配给进程，但无法利用的空间</li>
</ul>
<h4 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h4><ul>
<li>思想：内存直接分为系统区、用户区。无内存保护，因为内存中只有一道程序，空间不足采用覆盖技术，提高作业数采用交换技术</li>
<li>内存保护：界地址寄存器检查越界即可</li>
<li>优点：实现简单、无外部碎片</li>
<li>缺点：要求单用户任务、有内部碎片</li>
</ul>
<h4 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h4><ul>
<li>思想：把内存分为固定大小的多个分区，分区可以大小相等，也可以大小不等（多个小分区，少量大分区）</li>
<li>需要分区表，表项包括：分区号、起址、大小、分配状态</li>
<li>内存保护（两个方法）<ul>
<li>上下界寄存器检查越界</li>
<li>基地址寄存器和界地址寄存器进行地址转换</li>
</ul>
</li>
<li>优点：实现简单、无外部碎片；支持多道程序设计，但数量受限于分区个数</li>
<li>缺点：程序大于最大分区时需要使用覆盖技术；有内部碎片；无法内存共享</li>
</ul>
<h4 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h4><ul>
<li>思想：进程装入内存时动态建立分区，又叫可变分区分配</li>
<li>内存保护（两个方法）<ul>
<li>上下界寄存器检查越界</li>
<li>基地址寄存器和界地址寄存器进行地址转换</li>
</ul>
</li>
<li>优点：按需分配，因此无内部碎片；内存共享；程序数无限制</li>
<li>缺点：有外部碎片，但可以通过<strong>紧凑技术</strong>解决</li>
<li>常见的动态分区分配算法<ul>
<li>首次适应算法First Fit：从地址递增顺序查找第一个大小满足要求的空闲分区</li>
<li>最佳适应算法Best Fit：按容量递增顺序查找查找第一个大小满足要求的空闲分区</li>
<li>最坏适应算法Worst Fit（最大适应算法Largest Fit）：按容量递减顺序查找查找第一个大小满足要求的空闲分区</li>
<li>邻近适应算法Next Fit（循环首次适应算法）：从上次查找结束的位置开始（按地址递增顺序）查找第一个大小满足要求的空闲分区</li>
</ul>
</li>
</ul>
<h3 id="非连续分配管理方式"><a href="#非连续分配管理方式" class="headerlink" title="非连续分配管理方式"></a>非连续分配管理方式</h3><ul>
<li>本节主要从逻辑地址结构（维度）、表项结构、寻址过程三个方面思考</li>
<li>非连续和连续分配管理方式都是传统存储管理方式，目标是建立多个进程在内存中的位置映射，而并不引入虚拟存储管理，这种传统的存储管理的特点是<ul>
<li>一次性：作业一次性全部装入内存才开始运行<ul>
<li>作业过大则无法运行</li>
<li>不能支持很多作业同时运行</li>
</ul>
</li>
<li>驻留性：作业结束前不考虑替换出分配给作业的内存<ul>
<li>因为IO等待的进程占用了内存空间</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="基本页式管理"><a href="#基本页式管理" class="headerlink" title="基本页式管理"></a>基本页式管理</h4><ul>
<li>主要内容详见计算机组成原理第三章的页式虚拟存储器</li>
<li>补充内容1：页式管理的碎片情况<ul>
<li>页式管理按相等大小给存储划分，无外部碎片</li>
<li>页比连续分配方式的分区小得多，因此进程只有最后一个不完整的页申请内存才会有页内碎片（平均情况即半个页大小的内部碎片）</li>
</ul>
</li>
<li>补充内容2：页表项的大小<ul>
<li>以32位系统为例，页大小4KB，12位</li>
<li>因此页数量有20位，即页表项至少需要3个字节</li>
<li>linux中设置页表项4B，每一页可以装1K个页表项</li>
</ul>
</li>
</ul>
<h4 id="基本段式管理"><a href="#基本段式管理" class="headerlink" title="基本段式管理"></a>基本段式管理</h4><ul>
<li>主要内容详见计算机组成原理第三章的段式虚拟存储器</li>
<li>补充内容1：段式管理碎片情况：有外部碎片，无内部碎片</li>
<li>补充内容2：段式管理的共享和保护<ul>
<li>共享<ul>
<li>两个作业的段表的表项指向同一个共享段</li>
<li>只有不能修改的代码（即纯代码、可重入代码）和不能修改的数据才可以共享</li>
</ul>
</li>
<li>保护<ul>
<li>段表寄存器的段表长用于越界保护（这种保护方式页式管理也有）</li>
<li>段表项的段长用于越界保护（这种保护方式页式管理不需要，因为页内大小固定，即页长固定）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="基本段页式管理"><a href="#基本段页式管理" class="headerlink" title="基本段页式管理"></a>基本段页式管理</h4><ul>
<li>页式满足系统需要，段式满足用户需要（逻辑清晰、容易实现共享和动态链接），因此可以结合两者</li>
<li>需要三次访存，可以引入快表作为页表的Cache</li>
<li>主要内容详见计算机组成原理第三章的段页式虚拟存储器</li>
</ul>
<h2 id="虚拟内存管理"><a href="#虚拟内存管理" class="headerlink" title="虚拟内存管理"></a>虚拟内存管理</h2><h3 id="虚拟内存基本概念"><a href="#虚拟内存基本概念" class="headerlink" title="虚拟内存基本概念"></a>虚拟内存基本概念</h3><h4 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h4><p>详见计算机组成原理第三章高速缓存Cache部分的程序访问局部性原理</p>
<h4 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h4><ul>
<li>定义：由操作系统提供给用户的比实际内存大得多的存储器，大小不大于<ul>
<li>计算机地址位数对应的容量</li>
<li>内存和外存的容量和</li>
</ul>
</li>
<li>特征<ul>
<li>多次性：允许作业分多次调入内存</li>
<li>对换性：允许作业运行结束前替换出内存</li>
<li>虚拟性：内存容量逻辑上得到扩充</li>
</ul>
</li>
<li>实现方式<ul>
<li>请求页式存储管理</li>
<li>请求段式存储管理</li>
<li>请求段页式存储管理</li>
</ul>
</li>
<li>所需的硬件支持<ul>
<li>一定容量的外存：用于内存的扩充</li>
<li>页表或段表：主要的数据结构</li>
<li>中断机构：缺页缺段时产生中断</li>
<li>地址变换机构：把逻辑地址变成物理地址</li>
</ul>
</li>
</ul>
<h3 id="请求页管理"><a href="#请求页管理" class="headerlink" title="请求页管理"></a>请求页管理</h3><h4 id="页表项"><a href="#页表项" class="headerlink" title="页表项"></a>页表项</h4><ul>
<li>基本页式管理的页表项包括：页号、物理页号</li>
<li>请求页管理的页表项额外增加了：状态位、访问字段、修改位、外存地址（可参考计算机组成原理第三章的页式虚拟存储器）</li>
</ul>
<h4 id="缺页中断机构"><a href="#缺页中断机构" class="headerlink" title="缺页中断机构"></a>缺页中断机构</h4><ul>
<li>内部中断，在一条指令执行期间可能多次发生</li>
<li>过程：保护CPU环境、分析中断原因、转入缺页中断处理程序、恢复CPU环境</li>
<li>处理过程<ul>
<li>保存CPU现场</li>
<li>在外存中找到缺页</li>
<li>内存如果有空闲块，则分配，把调入页装入此块，修改相应页表项</li>
<li>内存如果没有空闲块，则替换某页，被淘汰的页如果修改位为1则结合回写策略写回外存</li>
<li>缺页进程唤醒、就绪</li>
</ul>
</li>
</ul>
<h4 id="地址变换机构"><a href="#地址变换机构" class="headerlink" title="地址变换机构"></a>地址变换机构</h4><ul>
<li>通常引入快表（Cache一般用相联存储器实现，按内容寻址）<ul>
<li>快表命中判定：要求标记位匹配且对应的页表项有效位为1，因此快表命中不用考虑缺页</li>
<li>在缺页处理完成时，不做说明，则认为快表项也得到更新</li>
</ul>
</li>
<li>详见计组第三章笔记</li>
</ul>
<h3 id="页框分配"><a href="#页框分配" class="headerlink" title="页框分配"></a>页框分配</h3><h4 id="驻留集"><a href="#驻留集" class="headerlink" title="驻留集"></a>驻留集</h4><ul>
<li>驻留集定义：给进程分配的物理块的集合</li>
<li>页面分配和置换策略<ul>
<li>固定分配、局部置换<ul>
<li>分配给进程的物理块固定不变</li>
<li>进程缺页时，对该进程的驻留集调用页置换算法</li>
</ul>
</li>
<li>可变分配、全局置换<ul>
<li>分配给进程的物理块可变</li>
<li>操作系统维护一个全局的空闲物理块队列，进程缺页时，则从队列中取空闲物理块分配给进程</li>
<li>进程缺页且无空闲物理块时，对整个内存的所有物理块调用页置换算法</li>
</ul>
</li>
<li>可变分配、局部置换<ul>
<li>进程缺页时，对该进程的驻留集调用页置换算法</li>
<li>如果频繁缺页，则增加物理块分配；如果缺页率低，则减少物理块分配</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="页面调入时机"><a href="#页面调入时机" class="headerlink" title="页面调入时机"></a>页面调入时机</h4><ul>
<li>预调页策略：根据局部性原理，预测之后访问的页，在进程首次调入时，由系统程序员指定一次调入多个页（运行前调入）</li>
<li>请求调页策略：在运行时缺页则调入对应的一个页（运行时调入）</li>
</ul>
<h4 id="从何处调入页面"><a href="#从何处调入页面" class="headerlink" title="从何处调入页面"></a>从何处调入页面</h4><ul>
<li>外存文件区：存放文件，离散分配，IO速度相对慢</li>
<li>外存对换区：存放对换页面，连续分配，IO速度相对快</li>
<li>三种情况<ul>
<li>对换区充足<ul>
<li>进程运行前把相关文件从文件区复制到对换区</li>
<li>之后全部从对换区调页（调入和换出）</li>
</ul>
</li>
<li>对换区紧缺<ul>
<li>不会被修改的文件从文件区调入，不需要换出</li>
<li>会被修改的文件从对换区调页（换出和调入）</li>
</ul>
</li>
<li>UNIX方式<ul>
<li>未运行的页面从文件区调入</li>
<li>运行过的页面从对换区调页（换出和调入）</li>
<li>共享文件若已在内存，无需重复调入</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="页置换算法"><a href="#页置换算法" class="headerlink" title="页置换算法"></a>页置换算法</h3><p>当内存无空闲空间时，页面置换算法有</p>
<ul>
<li>最佳置换算法OPT<ul>
<li>思想：选择最长时间不被访问的页面替换</li>
<li>特点：无法准确的预测最长时间，难以实现该算法，但可以作为其他算法的评价标准</li>
</ul>
</li>
<li>先进先出置换算法FIFO<ul>
<li>思想：选择最早调入的页面替换</li>
<li>特点：存在Belady异常，即增加进程分配的物理块数，缺页次数反而可能增加</li>
</ul>
</li>
<li>最近最久未使用置换算法LRU<ul>
<li>思想：选择最久没有使用的页面替换，需要用到页表项的访问字段，即距离上一次访问的时间</li>
<li>特点：性能接近OPT的堆栈类算法（OPT是向未来看，LRU是向过去看），但需要寄存器和栈的硬件支持</li>
</ul>
</li>
<li>时钟置换算法CLOCK（最近未用算法NRU）<ul>
<li>所有内存页面保存在环形链表中，由指针遍历</li>
<li>需要设置使用位，当页面被访问后，使用位设置为1</li>
<li>当指针指向空闲块，将其分配给进程，使用位设置为1，指针指向下一个位置</li>
<li>当指针指向非空闲块（说明无空闲的块）<ul>
<li>转第一圈，寻找第一个使用位为0的页，遇到的使用位是1的页面将其使用位设置为0</li>
<li>如果没找到，则第二圈的第一个页使用位肯定是0，用该内存块替换（要考虑写回），使用位设置为1，指针指向下一个位置</li>
</ul>
</li>
</ul>
</li>
<li>改进的时钟置换算法<ul>
<li>针对写回开销大的问题改进，增设一个修改位，使用位和修改位用二元组(x,y)表示</li>
<li>当指针指向非空闲块（说明无空闲的块）<ul>
<li>转第一圈，寻找第一个(0,0)页替换</li>
<li>如果第一圈没找到，则转第二圈，寻找第一个(0,1)的页替换，遇到的(1,x)设置为(0,x)</li>
<li>如果第二圈没找到，此时只有(0,x)，返回上面两步，一定能找到页面替换</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h3><ul>
<li>含义：把<strong>磁盘文件</strong>映射到虚拟地址空间中的<strong>内存映射文件</strong>（实际上虚拟存储器可以继续将其映射到内存的某位置）</li>
<li>原理<ul>
<li>磁盘文件最初访问按缺页处理调入内存</li>
<li>此后访问磁盘文件不需要读写磁盘，只需要访问内存中的内存映射文件即可</li>
<li>当进程退出或解除文件映射时，所有改动需要写回磁盘</li>
</ul>
</li>
<li>共享内存实现方式：如果多个进程映射了同一个文件，内存映射文件就是共享内存</li>
</ul>
<h3 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h3><ul>
<li>工作集定义<ul>
<li>进程一段时间内访问的页面集合</li>
</ul>
</li>
<li>工作集确定<ul>
<li>由<strong>时刻</strong>和<strong>工作窗口</strong>确定</li>
<li>定义中的<strong>一段时间</strong>指，从<strong>给定时刻</strong>到过去的一段时间间隔（间隔大小由<strong>工作窗口</strong>确定）</li>
</ul>
</li>
<li>工作集原理<ul>
<li>工作集可以理解是最近频繁使用的页面的集合</li>
<li>局部性越好的程序，工作集大小越小于工作窗口大小</li>
<li>驻留集大小要大于工作集，否则容易抖动（见后面一节）</li>
</ul>
</li>
</ul>
<h3 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h3><ul>
<li>又叫颠簸，指的是进程换页的时间多于执行的时间，是频繁的换页行为</li>
<li>原因：进程频繁访问的页面数目高于分配给进程的物理页框数</li>
<li>解决方法<ul>
<li>驻留集应大于工作集<ul>
<li>工作集的页面需要调入驻留集</li>
<li>工作集外的页面可以调出驻留集</li>
</ul>
</li>
<li>进程的调入调出<ul>
<li>若内存还有空闲，则可以再调一个进程进内存</li>
<li>若内存小于进程工作集之和，则需要调出一个进程出内存</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="虚拟存储器的性能影响因素和改进方式"><a href="#虚拟存储器的性能影响因素和改进方式" class="headerlink" title="虚拟存储器的性能影响因素和改进方式"></a>虚拟存储器的性能影响因素和改进方式</h3><p>虚拟存储器的性能影响因素主要是缺页率，缺页率的影响因素如下</p>
<ul>
<li>页面大小：越大缺页率低，但页表短、页内碎片大</li>
<li>驻留集大小：越大缺页率越低，但分配的内存块过多会浪费空间，缺页率降低不明显</li>
<li>页面置换算法：LRU、CLOCK算法缺页率低，这些把未来可能访问的页面尽量保留在内存</li>
<li>程序编址方法：局部化程度越高，缺页率越低（比如按行存储时应按行访问）</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-文件管理</title>
    <url>/2021/11/16/operatingSystem4/</url>
    <content><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>文件：以硬盘为载体存储在计算机中的信息集合，是用户输入输出的基本单位</li>
<li>文件系统：维护和管理文件，并向用户提供系统调用，如建立、打开、关闭、撤销、读写等</li>
<li>基本数据项：最小逻辑数据单元、原子数据，比如一个对象某个属性的一个值</li>
<li>组合数据项：多个基本数据项组成</li>
<li>记录：数据项的集合，描述一个对象的某个属性</li>
<li>文件的划分<ul>
<li>记录式：由相似的记录组成</li>
<li>流式：看作是字符流</li>
</ul>
</li>
<li>文件的属性</li>
</ul>
<h3 id="文件元数据"><a href="#文件元数据" class="headerlink" title="文件元数据"></a>文件元数据</h3><p>即文件的属性，包括</p>
<ul>
<li>名称</li>
<li>标识符：一般是数字，文件的唯一标签，用户不可见</li>
<li>类型</li>
<li>位置</li>
<li>大小：当前大小值或允许的最大值</li>
<li>保护</li>
<li>时间：创建的时间</li>
<li>日期：上次修改的日期</li>
<li>用户标识：上次访问的相关信息</li>
</ul>
<h3 id="索引节点"><a href="#索引节点" class="headerlink" title="索引节点"></a>索引节点</h3><ul>
<li>文件控制块FCB：存放控制文件的有关信息（文件元数据）的数据结构，每个文件唯一对应一个FCB</li>
<li>FCB内容<ul>
<li>基本信息：文件名、位置、逻辑结构、物理结构等</li>
<li>存取控制信息：存取权限等</li>
<li>使用信息：文件建立时间、修改日期</li>
</ul>
</li>
<li>文件目录：FCB的集合</li>
<li>文件目录项：即FCB</li>
<li>索引结点（inode）：因为文件检索只需要文件名，所以把FCB中的文件名信息和其他信息分开；其他信息打包成索引结点，存放在索引结点表中；文件目录项只存放文件名、索引结点编号（结点指针）</li>
<li>磁盘索引结点（磁盘inode）：包括标识符、类型、存取权限、地址、文件长度、链接次数、文件最近存取时间、索引结点最近修改时间</li>
<li>内存索引结点（活动inode）：在磁盘索引结点基础上，增加了<ul>
<li>编号：标识内存索引结点</li>
<li>状态：是否上锁或修改</li>
<li>进程访问次数</li>
<li>逻辑设备号</li>
<li>链接指针：包括指向空闲链表的指针和指向散列队列的指针</li>
</ul>
</li>
</ul>
<h3 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h3><ul>
<li>创建（create系统调用）<ul>
<li>输入文件名、文件路径、大小空间</li>
<li>在外存中找到存储空间</li>
<li>根据文件路径找到目录表，在目录表中创建目录项</li>
</ul>
</li>
<li>删除（delete系统调用）<ul>
<li>输入文件名、文件路径</li>
<li>根据文件路径找到目录表</li>
<li>根据文件名在目录表中找到目录项并删除</li>
<li>回收磁盘存储空间</li>
</ul>
</li>
<li>打开（open系统调用）<ul>
<li>输入文件名、文件路径、打开后的操作（读或写等模式）</li>
<li>根据文件路径找到目录表</li>
<li>根据文件名在目录表中找到目录项</li>
<li>根据目录项检查打开权限</li>
<li>把文件目录项（文件属性）从外存复制到内存的<strong>打开文件表</strong>中<ul>
<li>系统打开文件表：系统记录所有打开的文件，每一项为文件的FCB和进程数量</li>
<li>进程打开文件表：进程记录自己打开的文件，每一项为文件对应在系统打开文件表中的位置指针</li>
</ul>
</li>
<li>把系统打开文件表对应表项的索引指针（unix叫文件描述符，windows叫文件句柄）返回给用户</li>
</ul>
</li>
<li>关闭（close系统调用）<ul>
<li>输入文件名、文件路径</li>
<li>文件打开计数器（记录多少个进程打开此文件）减1，减到0说明此文件需要关闭</li>
<li>文件修改的部分写回外存</li>
<li>将打开文件表相应表项删除</li>
<li>回收分配给该文件的内存空间</li>
</ul>
</li>
<li>读（read系统调用）<ul>
<li>输入文件名（一般是打开文件表的索引）、读出数据大小、读出数据的位置</li>
<li>把文件中对应大小的数据读出到相应位置</li>
</ul>
</li>
<li>写（write系统调用）<ul>
<li>输入文件名（一般是打开文件表的索引）、写入数据大小、写入数据的位置</li>
<li>把相应位置对应大小的数据写入到文件中</li>
</ul>
</li>
<li>重定位：文件位置设为指定值</li>
<li>截断：文件长度设为0并释放文件存储空间，其他文件属性不变</li>
</ul>
<h3 id="文件的保护"><a href="#文件的保护" class="headerlink" title="文件的保护"></a>文件的保护</h3><h4 id="访问类型"><a href="#访问类型" class="headerlink" title="访问类型"></a>访问类型</h4><ul>
<li>读</li>
<li>写</li>
<li>执行</li>
<li>添加</li>
<li>删除</li>
<li>列表清单</li>
</ul>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><ul>
<li>访问控制表法<ul>
<li>每个文件设置一个访问控制列表ACL，规定每个用户名的允许访问类型</li>
<li>考虑表长无法预计，可以精简访问列表，文件创建时FCB中只记录文件主（文件的创建者）名、文件主所在组名（组用户和文件主权限相同）<ul>
<li>用户类型：文件创建者、组用户、其他用户</li>
<li>访问文件的用户类型：根据访问者是否在组中，确定访问权限为组用户或其他用户</li>
</ul>
</li>
</ul>
</li>
<li>口令法<ul>
<li>文件创建时在FCB中存入口令</li>
<li>访问文件需要提供口令</li>
<li>开销小，但口令直接保存在系统内（没有任何加密解密的过程），不够安全</li>
</ul>
</li>
<li>密码法<ul>
<li>文件创建时进行加密</li>
<li>访问文件需要使用密钥</li>
<li>安全，但加密解密需要一定开销</li>
</ul>
</li>
</ul>
<h3 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h3><ul>
<li>流式文件（无结构文件）<ul>
<li>以字节为单位，可以看成字符流</li>
<li>比如源文件、目标代码文件</li>
</ul>
</li>
<li>记录式文件（有结构文件）<ul>
<li>顺序文件<ul>
<li>文件记录定长，按顺序排列。</li>
<li>按时间顺序叫做串结构；按关键字顺序叫顺序结构</li>
<li>批量记录修改效率高；单个记录修改效率低</li>
</ul>
</li>
<li>索引文件<ul>
<li>每个文件需要一个索引表，该表本身为顺序文件</li>
<li>索引表的表项包括：索引号、长度、指针（指向逻辑文件索引号对应位置）</li>
</ul>
</li>
<li>索引顺序文件<ul>
<li>把文件所有记录分组，每组的第一个记录作为索引项建立索引表</li>
<li>索引表的表项为每组第一个记录的关键字和逻辑位置</li>
<li>查找时先查索引表确定组起始位置，组内顺序查找</li>
</ul>
</li>
<li>直接文件（散列文件）<ul>
<li>给定记录关键字直接确定其物理地址</li>
<li>注：这种也可以认为是物理结构，不同教材并不一致</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h3><ul>
<li>连续结构（顺序结构）<ul>
<li>连续分配方式，逻辑上连续的信息在物理上也连续</li>
<li>FCB中保存起始物理地址、物理块数</li>
<li>优点是可随机访问，只需要访问磁盘一次；缺点是文件连续存储，不容易动态扩充，有外部碎片</li>
</ul>
</li>
<li>链接结构（串联结构、连接结构）<ul>
<li>链接分配方式（属于离散分配方式），逻辑上连续的信息在物理上离散</li>
<li>隐式链接<ul>
<li>FCB保存文件首尾盘块的物理地址</li>
<li>文件中间盘块的后继地址用户不可见，用户只能顺序访问，需要多次访问磁盘</li>
<li>无外部碎片</li>
</ul>
</li>
<li>显式链接<ul>
<li>FCB保存文件首盘块的物理地址</li>
<li>整个磁盘只设置一张文件分配表FAT（操作系统可见），表项包括盘块号和后继地址</li>
<li>FAT表项的后继地址有额外的功能，比如为-1表示无后继处于文件尾；为-2说明磁盘块空闲</li>
<li>FAT在系统启动后读入内存，顺着链查找时不用访问磁盘，可以理解为支持随机访问，检索速度快</li>
<li>无外部碎片</li>
</ul>
</li>
</ul>
</li>
<li>索引结构<ul>
<li>索引分配方式（属于离散分配方式），逻辑上连续的信息在物理上离散</li>
<li>FCB保存文件的索引块的磁盘物理块号（块的第i行指向文件的第i个物理块的磁盘地址）</li>
<li>创建文件时，索引块指针全空；写入文件第i个块要修改文件的索引块的第i行地址</li>
<li>支持直接访问，但是需要先访问磁盘查索引块<ul>
<li>可以将索引块读入内存缓冲区，加快后续访问</li>
</ul>
</li>
<li>无外部碎片</li>
<li>索引块大小通常为一个磁盘块。因为其额外占了磁盘的连续存储空间，不能太大；为了支持大文件也不能太小。解决方法有<ul>
<li>链接索引：多个索引块链接成不连续的大索引表</li>
<li>多级索引：比如二级索引指，索引块指向二级索引块，二级索引块指向文件块</li>
<li>混合索引：以unix为例，在FCB（inode）中，保存了10个直接地址（文件物理块号）、1个一级间址（一级索引）、1个二级间址（二级索引）等，可以满足不同大小文件的需求</li>
</ul>
</li>
</ul>
</li>
<li>直接结构（散列结构）<ul>
<li>给定记录关键字直接确定其物理地址</li>
<li>注：这种也可以认为是逻辑结构，不同教材并不一致</li>
</ul>
</li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>文件：包括FCB和文件体</li>
<li>目录：FCB组成的集合，至少包含两个目录项，即当前目录项”.”和父目录项”..”</li>
<li>目录项：每个目录项都是FCB，用来描述文件或子目录</li>
</ul>
<h3 id="树形目录"><a href="#树形目录" class="headerlink" title="树形目录"></a>树形目录</h3><p>又叫多级目录结构</p>
<ul>
<li>文件路径：把从根目录到目标文件的通路上所有目录名和文件名用”/“链接成字符串</li>
<li>绝对路径：从根目录出发的路径，例如”/bin/ls”</li>
<li>相对路径：从当前目录（工作目录）出发的路径，例如”./ls”</li>
</ul>
<h3 id="目录的操作"><a href="#目录的操作" class="headerlink" title="目录的操作"></a>目录的操作</h3><ul>
<li>搜索：在目录中找到对应目录项</li>
<li>创建文件：创建后在目录中增加一个目录项</li>
<li>删除文件：删除后在目录中删除一个目录项</li>
<li>显示目录：显示目录的内容（所有文件及属性），比如linux的”ls”</li>
<li>修改目录：修改目录项（FCB）的属性</li>
</ul>
<h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4><ul>
<li>目录实现方式：<ul>
<li>unix方式</li>
<li>即目录项包括文件名、索引结点的指针</li>
<li>索引结点包含FCB除了文件名外的其他文件属性，如文件物理地址</li>
</ul>
</li>
<li>文件共享<ul>
<li>基于索引结点</li>
<li>不同用户目录的目录项的索引结点指针指向同一个文件的索引结点</li>
</ul>
</li>
<li>索引结点中还需要包含链接计数器count，记录被多少个索引结点指针指向<ul>
<li>文件创建时，count=1</li>
<li>用户删除文件时，count减1，减到0才真正删除文件</li>
</ul>
</li>
</ul>
<h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><ul>
<li>文件共享<ul>
<li>基于符号链接</li>
<li>创建LINK类型的文件（快捷方式文件），和希望共享的目标文件同名，文件内容是目标文件的路径（即符号链）</li>
<li>其他用户先通过目标文件路径，找到对应目录项的索引结点指针，再访问目标共享文件</li>
</ul>
</li>
<li>目标文件的拥有者删除目标文件，其他用户无法用软链接访问</li>
<li>缺点<ul>
<li>删除共享文件并重建一个同名同路径的文件，其他共享用户依然可以访问这个文件</li>
<li>需要根据路径多次查目录访问磁盘，速度比硬链接慢</li>
<li>LINK的索引结点要占一定磁盘空间</li>
</ul>
</li>
<li>优点：应用于网络共享，提供网络地址和文件路径即可</li>
</ul>
<h4 id="软硬链接共同点"><a href="#软硬链接共同点" class="headerlink" title="软硬链接共同点"></a>软硬链接共同点</h4><ul>
<li>共同的缺点：每个共享文件都有自己的文件名，遍历文件系统会多次访问共享文件</li>
<li>都是静态共享方法（动态共享指的是多个进程对同一个文件的共享）</li>
</ul>
<h3 id="目录查询"><a href="#目录查询" class="headerlink" title="目录查询"></a>目录查询</h3><p><em>不同于目录结构，本节关注的是，在当前路径下的目录中，查找目录项的方式</em></p>
<ul>
<li>线性表方式（线性查找）<ul>
<li>创建新文件先检查同名，然后表尾加入目录项</li>
<li>删除文件则按名搜索，释放空间</li>
<li>具体的存储结构可以是顺序结构或链式结构</li>
</ul>
</li>
<li>哈希表方式（哈希查找）<ul>
<li>优点是查找迅速，插入删除简单</li>
<li>缺点是哈希表长固定，哈希函数对表长的依赖性</li>
</ul>
</li>
</ul>
<p>注：目录查找时为了减少磁盘访问，可以先把当前目录复制到内存。</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件系统的全局结构"><a href="#文件系统的全局结构" class="headerlink" title="文件系统的全局结构"></a>文件系统的全局结构</h3><h4 id="外存中的结构"><a href="#外存中的结构" class="headerlink" title="外存中的结构"></a>外存中的结构</h4><ul>
<li>磁盘整体结构<ul>
<li>第一个扇区为MBR，其余为若干磁盘分区</li>
<li>MBR尾部是分区表，给出磁盘各个分区首尾地址</li>
</ul>
</li>
<li>磁盘各分区内结构<ul>
<li>引导块PBR：第一个扇区</li>
<li>超级块：存放文件系统关键参数</li>
<li>空闲空间管理块</li>
<li>索引节点表（inode表）</li>
<li>根目录</li>
<li>文件和目录</li>
</ul>
</li>
</ul>
<h4 id="内存中结构"><a href="#内存中结构" class="headerlink" title="内存中结构"></a>内存中结构</h4><ul>
<li>各资料中都未找到对应内容，<strong>待补充</strong></li>
<li>可能包括文件分配表、文件打开表等相关概念</li>
</ul>
<h3 id="文件系统层次结构"><a href="#文件系统层次结构" class="headerlink" title="文件系统层次结构"></a>文件系统层次结构</h3><ul>
<li>第0级：用户调用接口<ul>
<li>文件系统向用户提供和文件及目录有关的调用</li>
</ul>
</li>
<li>第1级：文件目录系统<ul>
<li>管理文件目录</li>
</ul>
</li>
<li>第2级：存取控制验证模块<ul>
<li>文件保护，验证访问控制权限</li>
</ul>
</li>
<li>第3级：逻辑文件系统和文件信息缓冲区<ul>
<li>获得文件逻辑地址（逻辑块号）</li>
</ul>
</li>
<li>第4级：物理文件系统<ul>
<li>获得文件物理地址</li>
</ul>
</li>
<li>辅助分配模块<ul>
<li>分配和回收外存空间</li>
</ul>
</li>
<li>设备管理程序模块<ul>
<li>进行设备管理，比如分配设备读写缓冲区、磁盘调度、启动设备、释放设备等</li>
</ul>
</li>
</ul>
<h3 id="外存空闲空间管理办法"><a href="#外存空闲空间管理办法" class="headerlink" title="外存空闲空间管理办法"></a>外存空闲空间管理办法</h3><ul>
<li>空闲表法<ul>
<li>操作系统把空闲盘区（即连续的空闲块）记录到空闲表中，表项为序号、空闲盘的第一个块号、空闲盘块数</li>
<li>类似于内存动态分配，可以采取首次适应策略、循环首次适应策略等</li>
<li>内存回收时考虑邻接区的合并</li>
</ul>
</li>
<li>空闲链表法<ul>
<li>空闲盘块链<ul>
<li>基本单位为一个磁盘块，盘块内尾部保存后继指针，串成链</li>
<li>操作系统保存链头指针、链尾指针</li>
<li>一个盘块的分配回收简单，分配从链头拿，回收放入链尾</li>
<li>一个文件分配空间需要多次操作</li>
</ul>
</li>
<li>空闲盘区链<ul>
<li>基本单位为一个盘区，盘区内尾部保存后继指针，串成链，盘区内还保存本区的盘块数</li>
<li>操作系统保存链头指针、链尾指针</li>
<li>分配时采用首次适应，没有足够大的盘块就分配若干小盘区</li>
<li>回收时放入链尾，需要考虑合并问题</li>
</ul>
</li>
</ul>
</li>
<li>位示图法<ul>
<li>比特位排成二维矩阵，每个比特对应一个磁盘块是否空闲</li>
<li>分配时按顺序在位示图中找0比特空闲块，根据位置确定磁盘块号，把比特位设置为1</li>
<li>回收时，根据磁盘号算出位示图的行列位置，比特位设置为0</li>
<li>注意矩阵的行列号与磁盘块号默认从1开始，也可能题目明确指出从0开始</li>
</ul>
</li>
<li>成组链接法<ul>
<li>操作系统将空闲盘块（可以不相邻）分组。</li>
<li>每组第一个盘块是一张索引栈，索引下一组的所有空闲块，且保存下一组的空闲块数</li>
<li>第一组只有一个盘块（索引栈），称为超级块，在文件操作前一般先读入主存</li>
<li>分配时<ul>
<li>如果超级块索引的第二组中，有至少2个空闲块，则按出栈顺序取1个空闲块</li>
<li>如果超级块索引的第二组中，只有一个索引栈空闲块，则把该块复制入超级块，并把该块分配出去，组数减1</li>
</ul>
</li>
<li>回收时<ul>
<li>如果超级块索引的第二组的空闲块数未达到超级块的最大容量，则回收块以入栈顺序由超级块索引，放入第二组</li>
<li>如果超级块索引的第二组的空闲块数达到了超级块的最大容量，则超级块复制入回收块，并把超级块索引向该回收块，此时第二组只包含一个空闲索引块（内容是原超级块），组数加1</li>
</ul>
</li>
<li>该方法解决了空闲表和空闲链表过长的问题，可以结合下图理解<img src="/2021/11/16/operatingSystem4/group.png" class title="this is group">
</li>
</ul>
</li>
</ul>
<h3 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h3><ul>
<li>虚拟文件系统（VFS）是用户进程和底层各文件系统（如网络文件系统、日志文件系统）之间的抽象层</li>
<li>VFS的作用是适配底层各文件系统，隐藏下层实现细节，为上层服务提供接口</li>
<li>VFS只存在于内存，在系统启动时建立，在系统关闭时消亡，是内核的软件层</li>
<li>下面是VFS的示意图<img src="/2021/11/16/operatingSystem4/VFS.png" class title="this is VFS">
</li>
</ul>
<h3 id="文件系统挂载"><a href="#文件系统挂载" class="headerlink" title="文件系统挂载"></a>文件系统挂载</h3><ul>
<li>文件系统挂载：把新的文件系统关联到当前根文件系统</li>
<li>mount（挂载命令）：在指定目录（挂载点）附加文件系统</li>
<li>挂载点<ul>
<li>是挂载文件系统的访问入口，必须已经存在</li>
<li>一般是不被进程使用的目录</li>
<li>挂载后的目录的原有文件临时隐藏</li>
</ul>
</li>
<li>unmount（卸载命令）：把文件系统和当前根文件系统移除关联</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-输入输出管理</title>
    <url>/2021/11/18/operatingSystem5/</url>
    <content><![CDATA[<h2 id="IO管理基础"><a href="#IO管理基础" class="headerlink" title="IO管理基础"></a>IO管理基础</h2><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><ul>
<li>详见计组第7章的基本概念、外部设备、IO接口</li>
<li>补充：IO设备的分类<ul>
<li>按功能分类<ul>
<li>人机交互设备：打印机、显示器、鼠标、键盘</li>
<li>存储设备：磁盘、磁带、光盘</li>
<li>网络通信设备：网络接口</li>
</ul>
</li>
<li>按传输速率分类<ul>
<li>低速设备：键盘、鼠标</li>
<li>中速设备：打印机</li>
<li>高速设备：磁盘、磁带、光盘</li>
</ul>
</li>
<li>按信息交换单元分类<ul>
<li>块设备：磁盘</li>
<li>字符设备：打印机、键盘</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="IO控制方式"><a href="#IO控制方式" class="headerlink" title="IO控制方式"></a>IO控制方式</h3><ul>
<li>详见计组第7章的IO方式</li>
</ul>
<h3 id="IO软件层次结构"><a href="#IO软件层次结构" class="headerlink" title="IO软件层次结构"></a>IO软件层次结构</h3><ul>
<li>用户层IO软件<ul>
<li>和用户交互的接口</li>
<li>通过系统调用获取操作系统IO服务</li>
</ul>
</li>
<li>设备独立软件<ul>
<li>执行设备的公有操作<ul>
<li>设备分配回收</li>
<li>逻辑设备映射到物理设备</li>
<li>设备保护</li>
<li>缓存管理</li>
<li>差错控制</li>
</ul>
</li>
<li>向用户层提供接口</li>
</ul>
</li>
<li>设备驱动程序<ul>
<li>实现系统对设备的操作指令，驱动设备工作的程序</li>
<li>每个设备一个驱动程序</li>
</ul>
</li>
<li>中断处理程序<ul>
<li>保存被中断进程现场</li>
<li>转入中断处理程序</li>
<li>处理完恢复被中断进程现场，返回被中断进程</li>
</ul>
</li>
<li>硬件<ul>
<li>包括IO接口（设备控制器、适配器）和设备本身</li>
</ul>
</li>
</ul>
<h3 id="输入输出应用程序接口"><a href="#输入输出应用程序接口" class="headerlink" title="输入输出应用程序接口"></a>输入输出应用程序接口</h3><h4 id="字符设备接口"><a href="#字符设备接口" class="headerlink" title="字符设备接口"></a>字符设备接口</h4><ul>
<li>字符设备<ul>
<li>以字符为单位传输数据</li>
<li>不可寻址、顺序存取、速度慢</li>
<li>一般为中断驱动方式，如键盘、打印机</li>
</ul>
</li>
<li>get操作：从缓冲区获得字符</li>
<li>put操作：输出字符到缓冲区</li>
<li>in-control指令：包含很多参数，每个参数表示一个具体设备的特定功能</li>
<li>打开和关闭操作：实现互斥</li>
</ul>
<h4 id="块设备接口"><a href="#块设备接口" class="headerlink" title="块设备接口"></a>块设备接口</h4><ul>
<li>块设备<ul>
<li>以数据块为单位传输数据</li>
<li>可寻址，速度快</li>
<li>一般为DMA方式</li>
</ul>
</li>
<li>接口隐藏了磁盘的二维结构，线性一维编址</li>
<li>将上层的设备打开、读写、关闭等抽象命令转换为设备可识别的具体操作</li>
<li>内存映射接口提供内存字符数组，以访问磁盘，不提供读写操作</li>
</ul>
<h4 id="网络设备接口"><a href="#网络设备接口" class="headerlink" title="网络设备接口"></a>网络设备接口</h4><ul>
<li>一般为网络套接字接口Socket</li>
<li>本地应用程序通过套接字接口的系统调用，创建本地套接字，连接远程应用程序创建的套接字，实现数据收发</li>
</ul>
<h4 id="阻塞和非阻塞IO"><a href="#阻塞和非阻塞IO" class="headerlink" title="阻塞和非阻塞IO"></a>阻塞和非阻塞IO</h4><ul>
<li>阻塞IO：用户调用IO操作，进程被阻塞，IO操作完成后唤醒进程</li>
<li>非阻塞IO：用户调用IO操作，进程不阻塞，IO调用返回错误返回值。轮询方式查询IO操作是否完成</li>
<li>目前大多数操作系统采用阻塞IO</li>
</ul>
<h3 id="IO调度"><a href="#IO调度" class="headerlink" title="IO调度"></a>IO调度</h3><ul>
<li>指的是确定IO请求的执行顺序，不一定按照系统调用顺序</li>
<li>目的是减少IO平均等待时间，完善整体性能</li>
<li>后面外存管理的磁盘调度算法就是一种IO调度</li>
</ul>
<h2 id="设备独立软件"><a href="#设备独立软件" class="headerlink" title="设备独立软件"></a>设备独立软件</h2><h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h3><h4 id="磁盘高速缓存"><a href="#磁盘高速缓存" class="headerlink" title="磁盘高速缓存"></a>磁盘高速缓存</h4><ul>
<li>本质是Disk Cache，磁盘内容的备份，逻辑上属于磁盘，物理上属于内存</li>
<li>两个实现方法<ul>
<li>在内存开辟大小固定的空间</li>
<li>利用内存空闲空间作为缓冲池</li>
</ul>
</li>
</ul>
<h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><ul>
<li>本质是Buffer，CPU可以直接和缓冲区快速交换信息，解决CPU和IO设备速度不匹配的问题，提高了并行性</li>
<li>两个实现方法<ul>
<li>硬件缓冲器：成本高，仅关键部位使用</li>
<li>采用内存缓冲区</li>
</ul>
</li>
<li>特点：为空时只能传入数据，直到充满；充满后只能传出数据，直到为空</li>
<li>缓冲技术分类（设T为输入缓冲时间，M为输出缓冲时间，C为处理器处理时间）<ul>
<li>单缓冲<ul>
<li>含义：一个单向的缓冲区</li>
<li>周期（定量计算）：max(C,T)+M（讨论T和C的大小）</li>
</ul>
</li>
<li>双缓冲<ul>
<li>含义：两个同向的缓冲区，一个缓冲区输入时，另一个缓冲区输出</li>
<li>周期（定量计算）：max(C+M,T)（讨论T和C+M的大小）</li>
</ul>
</li>
<li>循环缓冲<ul>
<li>含义：多个等大小的缓冲区首尾相连构成环，同时配备in指针、out指针</li>
<li>使用（定性机理）：输入时in指向第一个空缓冲区；输出时out指向第一个满缓冲区</li>
</ul>
</li>
<li>缓冲池<ul>
<li>含义：包含多个缓冲区，维护三个缓冲区队列和四个缓冲区</li>
<li>三个缓冲区队列：空缓冲区队列Q1；满数据输入缓冲区队列Q2（从设备到进程方向）；满数据输出缓冲区队列Q3（从进程到设备方向）</li>
<li>收容输入缓冲区B1：从设备接收数据</li>
<li>提取输入缓冲区B2：发送数据到进程</li>
<li>收容输出缓冲区B3：从进程接收数据</li>
<li>提取输出缓冲区B4：发送数据到设备</li>
<li>设备到进程（定性机理）：从Q1取缓冲区作为B1，装满后插入Q2；从Q2取缓冲区作为B2，用完后插入Q1</li>
<li>进程到设备（定性机理）：从Q1取缓冲区作为B3，装满后插入Q3；从Q3取缓冲区作为B4，用完后插入Q1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="高速缓存和缓冲区对比"><a href="#高速缓存和缓冲区对比" class="headerlink" title="高速缓存和缓冲区对比"></a>高速缓存和缓冲区对比</h4><ul>
<li>相同点<ul>
<li>都介于高速设备和低速设备之间</li>
</ul>
</li>
<li>不同点<ul>
<li>存放的数据：高速缓存存放的是低速设备的备份数据；存放的是高低速设备之间传输的数据</li>
<li>是否直接访问低速设备：高速缓存找不到数据时，直接访问低速设备；缓冲区则不会直接访问低速设备</li>
</ul>
</li>
</ul>
<h3 id="设备分配和回收"><a href="#设备分配和回收" class="headerlink" title="设备分配和回收"></a>设备分配和回收</h3><h4 id="设备固有属性"><a href="#设备固有属性" class="headerlink" title="设备固有属性"></a>设备固有属性</h4><ul>
<li>独占式设备<ul>
<li>设备释放前不允许其他进程使用</li>
<li>比如打印机</li>
</ul>
</li>
<li>分时式共享设备<ul>
<li>分时交替，提高利用率</li>
<li>比如磁盘IO操作，各进程分时共享</li>
</ul>
</li>
<li>虚拟性设备<ul>
<li>SPOOLing假脱机方式，在磁盘中开辟输入输出井来虚拟化低速外部设备，类似于Buffer</li>
<li>因为磁盘是高速外部设备，所以这是空间换时间的策略</li>
</ul>
</li>
</ul>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul>
<li>设备控制表DCT：和设备一一对应，表项为设备属性，包含指向COCT的指针</li>
<li>控制器控制表COCT：和控制器（IO接口）一一对应，包含指向CHCT的指针</li>
<li>通道控制表CHCT：对应多个COCT，因为通道对应多个设备控制器（IO接口）</li>
<li>系统设备表SDT：整个系统一张表，记录连接到系统的物理设备情况（设备类、设备标识、DCT、驱动程序入口等）</li>
</ul>
<h4 id="设备分配策略"><a href="#设备分配策略" class="headerlink" title="设备分配策略"></a>设备分配策略</h4><ul>
<li>分配原则：提高使用效率；避免死锁</li>
<li>分配方式<ul>
<li>静态分配<ul>
<li>作业执行前一次性分配设备，作业撤销前独占设备</li>
<li>无死锁但效率低</li>
<li>独占设备一般采用静态分配</li>
</ul>
</li>
<li>动态分配<ul>
<li>执行过程中确定设备分配，使用完立刻释放</li>
<li>效率高，但要考虑死锁</li>
<li>共享设备一般采用动态分配</li>
</ul>
</li>
</ul>
</li>
<li>分配算法：常用的是先请求先分配、优先级分配</li>
</ul>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>安全性指的是设备分配中防止死锁</p>
<ul>
<li>安全分配方式<ul>
<li>进程发出IO请求后被阻塞，不保持资源，IO操作完成唤醒进程</li>
<li>缺点：CPU和IO设备串行工作</li>
</ul>
</li>
<li>不安全分配方式<ul>
<li>进程发出IO请求后继续运行，仅当请求设备被其他进程占用，才阻塞当前进程。</li>
<li>缺点：可能产生死锁</li>
</ul>
</li>
</ul>
<h4 id="分配流程"><a href="#分配流程" class="headerlink" title="分配流程"></a>分配流程</h4><ul>
<li>分配设备<ul>
<li>进程请求IO</li>
<li>查SDT，找DCT</li>
<li>根据DCT判断设备是否繁忙<ul>
<li>繁忙则把进程PCB挂到设备队列</li>
</ul>
</li>
<li>判断安全性<ul>
<li>安全则分配设备</li>
<li>不安全则把PCB挂到设备队列</li>
</ul>
</li>
</ul>
</li>
<li>分配控制器<ul>
<li>在DCT中找到COCT</li>
<li>根据COCT判断控制器是否繁忙<ul>
<li>繁忙则把进程PCB挂到控制器队列</li>
<li>否则分配控制器</li>
</ul>
</li>
</ul>
</li>
<li>分配通道<ul>
<li>在COCT中找CHCT</li>
<li>根据CHCT判断通道是否繁忙<ul>
<li>繁忙则把进程PCB挂到通道队列</li>
<li>否则分配通道</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="设备独立性"><a href="#设备独立性" class="headerlink" title="设备独立性"></a>设备独立性</h4><p><em>之前的分配流程都是对具体的物理设备，未考虑设备独立性</em></p>
<p>设备独立性的实现如下</p>
<ul>
<li>应用程序使用<strong>逻辑设备名</strong>请求<strong>设备分配</strong>和<strong>IO操作</strong></li>
<li>设置逻辑设备表LUT（可以系统全局一张LUT；也可以每个用户一张LUT，存入进程PCB）<ul>
<li>请求设备分配：建立LUT表项，包括逻辑设备名、物理设备名、设备驱动程序入口地址，</li>
<li>请求IO操作：LUT表完成逻辑设备名到物理设备名的映射</li>
</ul>
</li>
</ul>
<h3 id="假脱机技术"><a href="#假脱机技术" class="headerlink" title="假脱机技术"></a>假脱机技术</h3><ul>
<li>又叫SPOOLing技术，把独占设备改造成共享设备，实现虚拟设备</li>
<li>输入设备数据路径<ul>
<li>数据经过内存的输入缓冲区，到磁盘的输入井</li>
<li>进程需要输入时，输入井的数据送入内存</li>
</ul>
</li>
<li>输出设备数据路径<ul>
<li>数据送到磁盘的输出井</li>
<li>设备空闲时，数据经过内存的输出缓冲区到输出设备</li>
</ul>
</li>
<li>实例：共享打印机<ul>
<li>用户进程请求打印</li>
<li>输出进程在输出井申请空间，传入数据</li>
<li>输出进程为用户进程申请并填写<strong>用户请求打印表</strong>，插入请求打印队列</li>
</ul>
</li>
</ul>
<h3 id="设备驱动程序接口"><a href="#设备驱动程序接口" class="headerlink" title="设备驱动程序接口"></a>设备驱动程序接口</h3><ul>
<li>不同设备的驱动程序与操作系统的接口相近<ul>
<li>方便设备驱动程序的添加和编写</li>
</ul>
</li>
<li>操作系统为每种设备类型（如磁盘类型）定义驱动程序支持的函数<ul>
<li>比如磁盘的读、写、格式化</li>
<li>驱动程序包含一个表格，包含支持的函数的指针</li>
<li>驱动程序装载时，操作系统记录表格的地址</li>
<li>操作系统调用函数时，通过表格间接调用</li>
</ul>
</li>
<li>设备作为命名对象出现在文件系统，文件保护规则也适用于IO设备</li>
</ul>
<h2 id="外存管理"><a href="#外存管理" class="headerlink" title="外存管理"></a>外存管理</h2><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><h4 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h4><ul>
<li>磁头：用于读数据，和磁道一样宽</li>
<li>磁道：磁盘上的同心圆，分为多个扇区</li>
<li>扇区：即一个盘块，通常为512B<ul>
<li>按角度划分，内道比外道密度大</li>
<li>磁盘存储能力受限于最内道的最大记录密度</li>
</ul>
</li>
<li>柱面：多个磁盘组成磁盘组时，各磁盘同一个磁道在一个柱面上</li>
<li>磁盘地址：柱面号、盘面号、扇区号（块号）</li>
<li>磁盘安装在磁盘驱动器内</li>
<li>按磁头是否固定于磁盘<ul>
<li>固定头磁盘</li>
<li>活动头磁盘</li>
</ul>
</li>
<li>按磁盘是否固定于驱动器<ul>
<li>固定盘磁盘</li>
<li>可换盘磁盘</li>
</ul>
</li>
</ul>
<h4 id="磁盘调度方法"><a href="#磁盘调度方法" class="headerlink" title="磁盘调度方法"></a>磁盘调度方法</h4><p>磁盘调度解决的是多个磁盘读写请求的服务顺序</p>
<ul>
<li>磁盘读写时间<ul>
<li>寻找（道）时间$T_s$<ul>
<li>启动磁臂时间$s$</li>
<li>跨过$n$条磁道时间$m\times n$</li>
<li>$T_s=s+m\times n$</li>
</ul>
</li>
<li>旋转延迟时间$T_r$<ul>
<li>转速$r$</li>
<li>一般取转半圈的时间$T_r=\frac{1}{2r}$</li>
</ul>
</li>
<li>传输时间$T_t$<ul>
<li>读写$b$字节，一个磁道$N$字节，转速$r$</li>
<li>$T_t=\frac{\frac{b}{N}}{r}=\frac{b}{rN}$</li>
</ul>
</li>
</ul>
</li>
<li>磁盘调度算法（主要考虑减少寻道时间）<ul>
<li>先来先服务算法FCFS<ul>
<li>最早请求的优先处理</li>
<li>公平简单；性能差</li>
</ul>
</li>
<li>最短寻道时间优先SSTF<ul>
<li>与当前磁头最近的磁道对应请求优先处理</li>
<li>比FCFS性能好；但有饥饿现象</li>
</ul>
</li>
<li>扫描算法SCAN（电梯调度算法）<ul>
<li>在当前磁头移动方向侧，最近的磁道对应请求优先处理</li>
<li>初始时需要告知磁头方向</li>
<li>性能好；但不利于某一端的访问</li>
</ul>
</li>
<li>循环扫描算法C-SCAN<ul>
<li>在SCAN基础上要求只能单向扫描，扫到磁盘端点则快速返回另一端</li>
<li>使得磁道两端的请求处理比较公平</li>
</ul>
</li>
<li>LOOK和C-LOOK<ul>
<li>一般默认SCAN和C-SCAN在变向时都需要扫描至磁盘端点，可以改进为只扫描到最靠近端点的请求</li>
<li>当然也可以默认SCAN和C-SCAN就是LOOK和C-LOOK</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>减少延迟时间<ul>
<li>同盘面不同扇区交替编号</li>
<li>不同盘面错位编号</li>
<li>比如盘面1编号：02413，盘面2编号：30241</li>
</ul>
</li>
</ul>
<h4 id="格式化和分区"><a href="#格式化和分区" class="headerlink" title="格式化和分区"></a>格式化和分区</h4><ul>
<li>低级格式化（物理分区）<ul>
<li>一个空白磁盘划分出柱面磁道，每个磁道划分成多个扇区</li>
<li>由硬盘生产商进行</li>
</ul>
</li>
<li>逻辑分区<ul>
<li>一个物理盘分成多个逻辑盘分区，比如分成C盘，D盘</li>
<li>每个分区由若干柱面组成</li>
</ul>
</li>
<li>高级格式化（逻辑格式化）<ul>
<li>简单来说：操作系统在硬盘上的初始化</li>
<li>具体来说：创建文件系统，把初始时的数据结构（比如空闲空间、已分配空间、空目录）存储到磁盘上</li>
</ul>
</li>
</ul>
<h4 id="逻辑地址到物理地址"><a href="#逻辑地址到物理地址" class="headerlink" title="逻辑地址到物理地址"></a>逻辑地址到物理地址</h4><ul>
<li>磁盘物理地址（从$1$开始）<ul>
<li>当前的柱面$C$号、磁头号$H$、扇区号$S$</li>
</ul>
</li>
<li>转换需知的一些量    <ul>
<li>起始扇区柱面号$C_1$、磁头号$H_1$、扇区号$S_1$</li>
<li>硬盘每个磁道的扇区数$N_S$、每个柱面的磁头（道）数$N_H$</li>
</ul>
</li>
<li>磁盘逻辑编址（从$0$开始）<ul>
<li>前面块设备接口小节提到过，逻辑上一维编址</li>
<li>先变扇区、再变磁头、最后变柱面（因为寻道需要移动机械臂，耗时最长）</li>
<li>物理到逻辑地址<ul>
<li>$LS=(C-C_1)(N_H\times N_S)+(H-H_1)N_S+(S-S_1)$</li>
</ul>
</li>
<li>逻辑到物理地址<ul>
<li>$C=C_1+(L_S\ div\ N_S)\ div\ N_H$</li>
<li>$H=H_1+(L_S\ div\ N_S)mod \ N_H$</li>
<li>$S=S_1+(L_S\ mod\ N_H)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><ul>
<li>主要内容见计组第三章，此处补充两点</li>
<li>读写性能特性<ul>
<li>不使用磁头，寻道时间几乎为0</li>
<li>采用闪存为存储介质，读取速度快</li>
<li>持续写入速度远快于机械硬盘</li>
</ul>
</li>
<li>磨损均衡<ul>
<li>是基于SSD主控芯片的内置平衡机制</li>
<li>作用是均衡SSD内部各个区块闪存颗粒的使用程度，延长整体使用寿命</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【工作日志】 2021年2月</title>
    <url>/2021/02/13/worklog-2021-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="93c99213ec1843ee53e1d904a909efc31e3d542fea0252beb06ff1ed48e83810"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作日志</category>
      </categories>
      <tags>
        <tag>Working Logs</tag>
      </tags>
  </entry>
  <entry>
    <title>【工作日志】 2021年3月</title>
    <url>/2021/03/01/worklog-2021-3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="1dae006bd06181dc5d9466026e9f09a87bf2a46a6c4117c738b19bfac6fa2263"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作日志</category>
      </categories>
      <tags>
        <tag>Working Logs</tag>
      </tags>
  </entry>
  <entry>
    <title>【工作日志】 2021年4月</title>
    <url>/2021/04/13/worklog-2021-4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="93954cd4c7b538d0ceb6d180698cec3154734004a4e17aae8b42fff4b61e6f7d">ad43cd26d5b7026203cb76ab857976b3fae4deb41e0851382517be9714c0e8521392d42cad98a47e6f5c1febf4a883a2f648d86f8214d91fe940fa523296df514dc0d75453bfabf8e415cba3dba8a900e7e0a86704b98df842ca8b5249c2d14727b6254db59ad77857ed7911a7f0adb014842b299e9b5a7a41680867a0f95c5ff61b7ac584def47523b722b397587439b755e3f918d012d05a8a1de5fe2376a0f272c7ec523553d35edd43ad06c177dfd5aab57d26c0c2c1d2ef4ce0c22dd38607bf8674d5e57a357e98629f155b34e52b8964a3be0c6b735f462e8af3992fb42baa6a47bde68a1f9bf09a98a377e00c19ffbeb8277b7c5000fe10851de963ee7d94a6e2940c2ef28a9c65cc2a778826d9926570ab3aefb635b92c1ac89dad2233c2689193f05606a5e4a8a8575324aee4635f6dbab72808838de1812455f7bfb1f61edfec2634a4b82fad752b2010f98dab99533d6c36b02f069d257bfe04247a97f1626d506881b63293c3e812a3292f6b0a3d49779598ac84c3a58b7f3fc41a45ae64502826a2f2f8b5a4a57e138b762ebf38bd07cece2fc006084096898a58a09481d32ea4185bb25e6a324971961c6f76c0fbd697d9cec6f6f55c836c05282ed25b8725faded144f50b8f5c2683a80d8ba2956729b04de50915070eadbfc68771c5a486bc9ad465f4e7e35583ac2601566b6b69b62a8eed4ee8a0935d1e685a57d6a40fbe168c2babd2096ac14c281cf2f203bda093547699255f4db10dce0bed7c84597e4d402dcfab16d9f23697b0c5b64a00941017ab0ca67c5b5fa18e82f508a4588341e8e88b40c2054cd2300fae1fa6fa464a6be37f5c3ed5ab605f303f5506fd598a4e4ae07553d5cefe54be8776609dca9c3bb58499cfd95c3ce84a8795734d672a826673c923c2e150e9769d622e9bb3656b70cab53f6b0547444ac6c3d738f8963f19f5410c490d973a3e55487f53ba2920b2fcdb5e8bb35c11bcab941a6206212a4b8711943b0d41baac3822e5f63294b6d349f7f150a5355f4edfe72d19fe7290d53bb4c4f6d74049646a4b91cec3ac243890c9efabd448d64fbb1d4084542c478c9fb59fc5a915d9d3286269b4f80562c6cec420b15c95fd085707d53cced1add754c4c8c2736c5ea1d929b4928fed2bfdfa263d65b8eb5e0a2503d3a9533b5a5027f76abfc3bc6e8c7e862027490fb8180816f02f9722495051dc5d6302ae2f2219c5ed8acb7e676f2e9a3586a3c09259133e9ec8212c258ce1160a0e4d96c14a82169dffe53d9cb1b9e4544fcf0507768b62b37a632b3ad01a8150bd2b8e8f212d00c2f941800721418efee93a98b266aeecef2b614b573eba493ebeeca5269d73929a82b04505a5ef49e58e87991ecfd91605d9cba3ae0638a1f85af8387361280649ce43d90bb9c35e30cd21fe7f5eb167c3b4ddb9ad86e4a25a54e934498c1630657e7eb17e0f7d9463eae4dda8a6be4906c8adf6f228bede9007b81ced38fd9e1742900d571314534db0ba6dc99947a8726681615ac737a812b7627256e74476e41957c55e5b424fb1b24b2ddac3a620c4059af25391a9710f58ecd8bca57aba72daffa4158ca96d636f9f660a2ac42c9b8f0275e084c474b778dbe18328ba5e25080a89218198218d39c170057e7246cbb3630c5227bedd6ffca881e8dfc7a12c7b8e82475e48a030b3cca973ad81711cc258592ca34534f42d7380343e83c975b3fe2eb8669e57fc1e0e7d09d009d88fca84b731c6fd408079cba6cf18dd7a71cc8007a51b5ac305413cff6be56276b77e61136aa9815b72e682be5600a35bfa927f3e695d0e28752f2d05c0359febdbc700c665e2cd78c42d9caac863f3b5fb7e8390e6c719f54e3802c417ced4f28d9eb7e827b2abd4b49f0004e5971c32c57afe35488d11d1d9c0ba70730a65600c5d38102360e07076f5cfbf25d30bf8fe3ca3aa906aae76f31fa5fcb8ef7fdc73ae4ebe10444ca9a2da8a5a0f1edf753a1775656fae8513b2d4b8f5cb7f3c938a89d0e45e28cc8a29eae8b62e9d38b09a751ce4ce35d2c3b98a969101d515b55d45291cadba32e7e722860c7277c5b8ed283839bf59fed352997645933ce5e96ff473fb36bdd2a9c9a34619255567e8c7d2028bf5b91c7e814db966a87934c9478e8968937efbcd22cb84694592324d57be7fb197f722b1f239b7af7cde6e8ff598b477d00e9852c0151031d367153863d5ee92bf54ab5f8af3aef4f773294da01400b4e54c2f1a5a1e5f0c8de201847f410f0f63519119cd68af3ebe9c96e39c9c83156164f6a277c7075feafd35f22302f3ecbdc6bd3e8f4a310414e801025d9b22bddd714b103fef2b58e8ce124f1df4cb6360e38bfeada175b23e40ed590f5ba7e115027b47258e33f155dfe726f7e53bfe94075a2b9e4fea7b91faa4bd10ea891ccb6075c88b7ac14e694bd73cb0f05e4ca8c9ebd6ce547d1b04386b4451d97fe5a97b30b4a96d3a7d03028ad77229596ed6955d80b3a054d6e143a7784a74c0ff0d3963753418db0765b08b3ac9a2971bd597af001e7161b47e7c2d85f54f5a146ccd391bd18ae23b5849e38ffb83d2bfabfce38d885e2f79fa12aa923bf302a26e4aed7262f0a9031ffa14156b39415d24190e020ebb1bebe800a3ef486cfddb87397d1d1430dc56ad79ad006da2412d42f1f7f8792c040c01e6cc0ada4b978eb988e1d2e96ede3fc2b5efec3f47f3131dc33c58cdcc2b4f44957c9bab63bcc97be3c260e951d6b1b355969768eb8ce8d30975c07cd696d663bf77ef76c0bd407e64d1c6c77e8e0164f64d3df4e9c53d06a02cedc3cbc7576d4b8565e34a47347ca78fc2836d99d7353290487a3e23c19dfe69973bb33ce73e92af4c3016f2b7cdd92fabef1b3548f53baa3d3d8f41f7adbcbac8c441bdf5b5af574f150f0a43cdc1646e2eeb7b294f4deea844a059f11d678fa3d686bf511c672ba5851e87942163ed973bca68b30514571c7a0e0866eb9d7e2d665209b1e24761b5c12334da4aa9cb4a8421dd83483e32f39d0e04262bdcdc42b7356372afcb0098a70ca070a451c57728e5450ed6579cbc90e6f182027ff0f656e265bd964a57ad72656981e69d942fbec5f4a966fe8232298887d8453baa485c94e6799427e5e9507d7c651f807ad4363bbfdbdf1ace42a7cc4e4259f961e1a112b596df9a40fd59627b8ec0f3ca6c26f46e0b8bef44e213161b18b0fc544a5d70f305c4e68cad5de60277660489b4101bf6eef123a4a235de07bb893f03279155cbd649b23d69baeb50a78694b3c8df0cdff45ff703a3c8356880e9307304266178494242dd0d836ed9889225a72542aee5983bf40b8a2fbb6733efe0ab1991f7bbeaf31ecb65554e8bdf242e3c1f1cc6578a7c5f4d29ba31914eb5ac8190945a283460ec65b0c945673c3b2de4bbb098604b474ffc77cd40e3a27bc28323e3183e7748c4a494ebb08aabe68a0a5d1613e652316202dd3ba95e6569f1850913a64d497d0037fbec6143b1acab4d43b963cb9ca5c46ea307cb61092e7053c5eeb4500a2e54a875902505e6d78ceb577834b9f52918a5c839235dc339116abc536bc3a221fb70b559c8e6f957889b1cb2b4a6b6819b376c6fb1d5a71f23250cc58c247f424901c315dce54ebdf27efa642aa4ac56eb4f1446d9b5ca07e4e9f2b936be64b8b66b9553750bcb6a784339c1c2898e7208a55ec34902dd189069187c4fd137c6e4771715a8dcb3f625330c2c343a60aeddaa52b056a688bf93a62b8643abfa0352dc6ff22ea6126508b867feb480119a551ed2a3d780e64c7b04034cfeb1336e7bfcb13f69e617ecc9ffef0097bd68e79d91905ff392da6452de099ce414f709381c21678e5a3481b1fd9bd90b62790d041145149eff4bbbd864e33cbfb3ddac722f2653a36c3474b1f17e2f8e6e7ae6e54b19f36fba8fc12a3f74161428b3c0c8e6caaf16fa4cd2baa1a171d0265f3705f5d237607415a85d015e667aa564c6f89a95e4e36170068b765af9a376e9f94daf3b3ec57c8ffa789d340a27a7fcdd93395ecf433b0ac32573e9481c4f9be0f164b924ecd79600b69e6af484ea0f968bbba0862f1be29f4f35f52ee230ffd8f3abef413fbee6da92c2c1284c4ab5f2034dac245b12bb1cc597ce82e63f32cf0615969f081f24d884b195413cc92e8c1226ff8e04b4710172f528c7e921d2966b28534aac8ed9cfeea9c987325eb1d95e87d7d1e2d3daf400e060473b0944f585c1ad18b02f132620ee93e8492b466dd82b6a52ecfc0d7da3eaab05bce01524d05145b6779899d49f8a9dcff0f17afec0f8ffb5c9abb969b776d4f7929e05527e235f3d3c1b7b5dca6ad8b891cac862f684906fb50c486d866448518099c0a8e604ee8f9487716c0d187441f00f5294a0a20c6421472452f4dd5a713246144f09688784c1065e280e2eb26485dcce9563f3dd274d011ee7b3006222448fdb96231417a5fa527d84bdad3219e099da3885008e86ba388dd22e7d3dc3a3f01ec4a726e5e5145e4ba685f9be71a9f91f3654c9d8d3e780f57d7355d597a7cd7edc977935c0277db4bf92405ec639d260c893d98baff0e239f922cad1f7aff1ce0c2e3a1b958a1c09fd45265d50b8eada6bd10c6338798ddf2f5a400c12664e37e5320d9463015c008d228577101ee9ae70536348d2384cd1512f862187295fed28a1805689849d0409f496e6415d332f688b180d46baf614c9c4e5d0fef47fc9bad65b70c16bce570c601848628e5754220ed0b5d6f747624ef5069ff573ea5ea88d10472a8562448899d4ce123e0e2aec7425d4c0b6b64e9a7d82c2f75f3fccdac9fb8057de447181884ca74deae6f5cfc11b460456ba85597c3b40cccd3f36300289ef491b167fd107f1fcf5e9247fa5a2897d554cfc46253d02549dab5d32af1f1c204c89495860443eccb75ca0d1603dc6b90e26afbb7821d9093b7511736ff2570b9ab4fff0af76336b0ab80b39e01aa90ee28d824ef66ae891be2f4e272f48ca3a799db4e65b6058757cbc8b6be996a0ba5838e1dd9493458d00eb18f23dcd081c2da990811a1febae0ecdacdc0b3dd0b89c5c248f922802f3999bcb0066cccbce61db14074c8e54ac39ce3bd158def751b25765586a45f7a0e53a09e43009a59ef42f123a644a035586462155f9a6518d8d09079777d3bba031be8972fc5d9038631c3a2d4a927f8a3d9282fa1a68c09fe91da7d9e0bc69e3ca47bdf381892f7b5dbff3875d7445c2a1345b9aa6b2dfb20d6955ed05c2e295fb10ad2bcd0a2d0fcb31cd79ad34838a0ccf2248349eb8d784076604c90c74320665257e20ac65403fcc24b5e5706ad4d890d3f9609c763fab7b9266ae8d69161c5fcebda547f31ec7887b00ac385d74dff4c66b47d0b0741045760843250322908619622be6bb3b5c07ce81d6ce510dd19957768274c4a9c4aa596bb40f4248c8da5c82bfef885805f99c52cecda5ee2e0b1f025fa464a2f9d359354a56195541252f8bbe999fb892901a22f2e046f5d5474642a4f8e385b61a23abc862ab65c79e1a42b0fe686336ab5457861147a952c7a40b0ad63d362bd3d1b1bc467bf860de3532017ada7381009f831bac3f078d83b1334e048c66119645029d7f63d0a5924b7ddb2c42ab0a12f31e3e4035e0e9a6f4a7cd4d0af7324989753869b68f84b8e39d319cd5b360f6181d1586b9b3ce249ae97d49cd16fad34de7822398bf7f952371930fcc336dab5863d9fa0381ee7d03fb0983ef2c1b050f570a55eba8ebb026c6df8472a39444222001d0372eaa03011a71b38fb4a78102bcabeae287b9f0a9d36e734db1ecd5ec9b882eefcf1a9f5cf45dde4878361ca9a3ff6962731e7dacbd1a651bed2161d2090aed2ddda8fec45ee0069fecd4704e9dfd477c955a2478c080900416f3afc09c0df3e822312d399319464ed73b6bd482daa6f07f75c4d3f5a86cb78b7d3a9966f978662a85dda20ac9a556253288f592acc1fd20dd9641bf00c15f911bae15e794a98cd6148c648352f0f37fc957697d7309459f38d78c3a3a813f7da9c8079a6310ed61d69ff2af2b0e74899fe22212eba902ca5b035b2cd8bbb95ad4d8e4a9ce76216998e8537feb98e72302063a83ef868c8656bb0f962c04e83c1d48b5b710c10b0d60b869d7f15c89c7d530d6cce7db306f97325b8124acbeb763c8fdb5fed6886ef53c6e17fc79c98a07b0b8b62bd772b3a30a297e9c806bd6d822b60fc2912b3dde4275b2513263d5828d36387874571e22a7a69fd543ec491283010350e69383c58f0e1b6d69a58d8eb2b08de20df82e5c341ab5e0f219ec3b9c4c271b10b3b5dfa1de2e6660e5e50f65055fbdc442114c5bbf148545ae4865714c214b3471ac3138a62334103a9e52d3cc4d2c0453e30646ac5b9c1eaaf73f105987de40775e9f8a41d0c390c2f2f66aace4f1fc67fbd60bfd81afe86b86741c4974d04924d9d7871ba2d7ed1e7de62fde18ca07414c437484026ab4a64a878a63deb067e4e111aa6d8d53d9bdfdb175961ac26764f26a8753b05006b4b7f84810b6fb4e9c974080ffbab1ba5039d9f02a9eed05bfbad64ddb9956599e27bd67e8e02e43e3171aa721b94f966c5e9dc21fbc99b2e278c370916625baad3a8164db63db9b44cd8a061ffc3666a5e93cc37e2e015f829f77ca746640d8a61cd9f3b32eded1c285e64732c1d84dad2060a9dce73fc4742d2119d35ab8feae0995ba036ea1491e064549487d5da3d81945ecda133b87086044c85266d1592d413e0ce552eed45c2e3913afca00e2efec0edf6b5fbbe53a34091763ff42f300dd7eb91819692a65fead5764656823f54648993a6bdc20e43c6a3422efc119412adc8654ebe07fa2cfba4bf737e8c1bbd771bd3e27cb09ba869e0d5171c71b90c90ce7e7e18bd1a426a04dc78ccb04ed18c5e204013c7f604e101ed40df428069dcccb0316fddf8447f98a29987ffb7608f24507849a586bc2fc89ed33ce4d97f8c8865ce32c726f600cecc401ad4a5bfb86aee764ab5be591741ef5c1ce54ee9824a3d46739827f22f3838a6604e5ce2f95016a5a2902dfdc2252a84e7f3631aecaf6fbbc7c3fb1a6d9cccf2f1e0d2f7cbfbb0f5cdcf6837fd92fea8d8f8acdf9258118e3283629209f9617e8c50524caa2ac3db7e0acfa13606a8a8f86e828f6d5c521d57d778c0898400914829076be89a063d53bea965bdac07a2822b11f6c9165272d4a088e575129f162885cd4ec80fd88d9bf8dfb5adc497994191e448f21cc40c8a7923680450063ad75ee4466f4758d6340378bce6c21243b90c7ba68cbb6a07cf8ab41e9828b7fb337211dd626a07c56f88de81f5ce27bad178cf78fee3affbcffa610f478f62e3c7184b5f24ee5cda4a76362cecb48cd19575a90571d98e9a221ab73c73ef853932a5985866d0ac8434fcaaa32ead1556d347ba3d24f9e9eee4f85b57805ac4487c4915f60ec776c731884e475b9962612f77043c24e2f40250b701b85af26a27628c0167d7e203f0f1f5fbeb1a857d9f38b354066e7c63aa12f7ad7e372aa88bcb094e26513827d6db49935f96a82d5f1cdf2dfa3066e346ab56f54260493b1fb6065d42055bbbbfa2f0c116d44441fe1824b2fa722875841d9de582fd9b981991807d8ec36ff29c10d582dd9c489a4f556dc62fc04e6e45fafc46782953d1382b33c1cbbfae852f7701aba6596994589d714c634dc5d43f38e57024c1c18416541811098967183a9dca4e9f13a26cc465b8dc27f60037d9b480cc50d5c05a6c4602cebd64c35de2cdf4a5de15532113eda2a0d5f014d4fc57f37c2159239f37caeb1febfe52aefb338f8ce568ec0aa57beff37d1bffdbe3e2eff88b4e3b43b710e355bf6a13d45e2fe6a5e6fad0c05195b04227562eccd72f80b23a3861c9997e366d505eb49f671d4609d09c68d5dc5d3232dc89e01aafaa397c29fff932dfc1df1b8d2ff111bc8a1dd194a7cf16a5b69e7137856186f02bb04a13d42f1d09a4bea743344d75bb0eb4725c29c398c0a28ce6cbb117876b88dc6fec203a5907aee6184f6ffcae9c5cdbe63b9dfee0d31520680bfec6463f1c66e1c737903ca3eaf831763cd10b0a4f537119516ff1cef505ac4b8c236a62bfb190cc5314bf6b1d00e8bd562dd02b9fee314255e72ce1b0ed2439aa4c472b4d6bad7d4bc3585615212dada40d875702b201cbe11caef1920b792c20d982fb526128d9f7ef406247a231784cb8aed7ef6921d5e2706025afb88722f23828a45473b6295f08189372473b1c072c3e7e3f06ac84020a1e6391344bb19bf3d520e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作日志</category>
      </categories>
      <tags>
        <tag>Working Logs</tag>
      </tags>
  </entry>
  <entry>
    <title>【工作日志】 2021年5月</title>
    <url>/2021/05/07/worklog-2021-5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="密码验证错误，请再试一试">
  <script id="hbeData" type="hbeData" data-hmacdigest="7d45b3412937e7c9db6caa845992a53be999c0b3989417b1bde9632c2c6c2ae3">ad43cd26d5b7026203cb76ab857976b3fae4deb41e0851382517be9714c0e852a15592b10479ce45cfcfb50302dc3a1c55c86061540d012c228e580f1632dfc2a4caba4c090b8eed3b1de0c3d944c77482820d5a483f87a5e3759efb0bd1e1907d932ef9b7428edffc0f137a01d7b8aee63528e5d3c36268403a87d9853d962ae23ff61edd177102ae8dd0fee54258681d41a98eb629ddd53db04b0a41d71569846441ac381c147461ccd981d4027edfddc9b80b3e1efd44aad2c13cd79c9c1b87ba5e1b449616676f587725766ed6f6ca4eaf6de6422736fc913f416b40fe948b9f33d0cafa847dcac09f721a89fd77afe63d1ff40ffc96b0c038c13eb9224b779d2fac1c3cc37828455e7311de5440bb48ebbb25c822065a850167923552f03444c3bb226e71e97c8a2abb630bda3db70287490ff46e6c0de5e3f0b7fac0b9627fc628e6b0ad3ffcbc7c653947f08c15430e00031bdd7a67e193afe6c26c8cebb3cd227017125a039adea2a9b482ad6a2a8c322b6bd3e0c9183ec9ffe391173c6a4e2e1e618c26a002e5433e23d8f63090aded39d8cc918517526840c89a721c5909cfa72af2cdc86f651c2160d68c397a7d81d3daf3e4429aa37f9d235290f7b6ec30ac07749d6a8032be26f5964137bbab166c820bd95cae9e79a4015e2a84027686f1d03f02517d00b43c0f91b16f9d05f857280b346a6cd9389096ccf82ea394f4b2be1786beb0ed014f50d40b98ddb2669ab6bf2a7d364880206223da9c719b4812ff68ba769817846a21e46677aca26fcfaf0c083c456d760d3787b932671b5cbf20bf33dcb49266995d7697d731f9c2bfe02985fa01e5606c4fda2db374ebb79d187699425c8d91329a20c00457c521ffcbb4469f24ae34e823d08ba5d3003cd4a1303dc6a2e461a26b9eae7f33d46b90ff1bfc569ccce4657d0f5ab7a26252ff98fb4cdffcaf34efef5bf2ab7ab6f3d5d3a721899ee867dba1d86901a72fea10aa51503946488e7cf41504e84cd29dced51a156f654cf163ffa22a3caea47dd4797ecb0118e47f749947f350bc4af9c9f950b124406573db65a0a1e6fcad504bf1338f40574e8603ceb971e15471918b3bd8a5cdd0881aafad91f554a0557d7c9ad9ac1d92ecebe69d2935af1c6ba69497fc63c0eecf9cbaab1eb5221b31871b389c3a61820cb852961d283b46b3dce804b655a90e8e8b9a8bae9250a9c028c69175dfa08d909307975960391bf083622358cd80b1611772ab58aece92d1c5e6f53a7fa4ee8f7979f4270ad2d3e3c24a3cd81baf1e5361541054d2627bef5ef49241c96e3452ed5a450a848aaf77e24b797a931606a055fa13bc1cc700541eb17b561e1bd734e6ec40ea43ba305700e2a932c4ec3a3bf3c141cb6409ed138eac329d9b44788732647091099490c77831169f7d3f08e6e3061f2a32cdd40b8b1bdefb650010f8e5e3a78be9808209e1163671dfb6e8540a4dd3855cc3c098f7b27c9f5c5272407b2eaac74feb4bc6d770bfcf677471bdb8ccf3561e5d1477747e358aebe213dbb341f93cec3b408daee395eaf23465c2a68bcf132d90467cf2c33375e88b0cef76124e32baf522071188e8a1c1482aa29a3a6016120903510ed5ecaacfd5866d6abb43ecc2be91d1063d30a6467590a4c39a674b8ccd04f783e62f52d1bae252f66c4c53fb1f74d154aa4aed77ae7ddf342af0d8cc72616c0326ac8a0b2d430fb2970d1cdfc4a3a25ea4c94a731e59946bf403b538199c1215e88b522e4c0d8452578772342655f36b598fd19d0841d8dbcbc4d61eb569e6d8ef74c0676867fe4c4f5e9c9b6fc10c3f56e10aa3640c234a98019279d2a60e95dbdf792f58994eaef0859c7d9176443051099147ce60f1c4e4543d9d396ec1b54d0dc27a835bfe99d885d84aa23705618edce02bfa06b884a56d32e23b805961d05b74f572e1a16ae0a0e269314749c388f459c3ce5c5435dcafe5a7169c40f2906a1695589df2fad537bc53aa1b0600eaf827c7269b1205686c776e3d7e06490bde12d52e29ba3804f4b4b2b1b48551a5f81a321bdbbaae94f165c571fe1218eba75b263f8ec75f6e3a0b461740583e6385aedd3947eb8aabe811ed649813cdb57e02e7b3c1aed74c8ca0f31e3d8047a15deed849572f6585cb859833f9c689041acc6e1a613a20efb96d57e60dcc9d004afc014ffdd39649be8106dd7bc9d3bf093c437e719011e660429bf9585c8dc7090976dec9c4b6d471aa17a2e2b1eaf2d809191ef630fff6cb99e22fd0444c4157ed60e1392d18c582ca83c523bc744f012fa052e025f22c4acab0da91153c0950f323811852cf227887d92de9f03ffc38b2d3a0c79783a066110cbf74aafd9058e3c6a82aa61086e629876b91d91126be60fd6e1752876bc033082aed424bd8d2072dd128a0af165998cd061eaaff9b89af0e82155414b2af4dc9e1f4c949441c0e60a2e0df98f2d1d80efba1c768dd7447eb14639d377ab485a99002c167f99bc4e17c2af3c415055765587c06770e3cc72c6e443d12ad66c8bdc112200b44a25fabebff00b2ee04b066ea1ba5826692a5379175efc651b212869816daa12bda830fecd18291f6b4714380598dbf9c181781012bf0e4b9936de645a284c208b0cd960cbc71e82b119e30ac99d25aa398e19be67e41c50618c8e0a883755875d53b4a586936f36b55b3b5b6998d166cef7dd73c19229c5a4dcb8f5fdbb4824593f61e46d9a35990245a4c31ab79413aa2f4a76fa21f4c87ca624041869d0bc5f664549e7fa6506ddb7c95a8be1e43997d2ec5119e282c73ea458c165f3fc7dfb01f744172c96209324462dbbf351422907e6d2311dcca69807a6279184fa0d548c20218e4fd79a94a20490ffe32eb266396df0e3e09ef4c8c119ba6bb41cd6c68b80f4a1365ce9b28f68807e0b3e1f0c48119a8302c6dc2a19e5c6baacc2f066d668822d9cc72eb5c7bae792505bb18d794e22df575f54f5bd1bb3a72253d9896a219ccf296d194f943adc51bdf3e59817b56e5c90756d60ff4732763f8d0d392590cd56192ad4bd08e7941ac869b74784c156e5cf723feb45de772327547714106a03f89bbd8335062783672d442be5cc5d75e9366fefb86f3be58c414adf9dbc3bf8e9d1f7095e2e4aec82c9050b504b316a373438c6b4a94f162c1f070d7d59119cc44d243575cadb0c04e5e4c98736fa5e364d329afa8db71337ab990686d70543c4191ce7fdfa1bf45e38b1b2bb0cdc50fd93d562e5cff7e8e7461bc2b6d580d0e8ccd4c57c539524bcd329bfb17de2fb9986d080a9648c10517e201bab01409a28b39b8ee0da21e03f7a76f3e00433fdae377c7517ad2e44002bb54de72262fdb075e53219f2799202442b2bcbd94048211bef75057a701b2028c401c45d3e622eeb0cf180ed9a0708ad1b48379afd29adf29c749dc69014d0ec9cb608d554fe714b0df29bff8c591b241b040cb80943e9db14db1ae2f113a4e9c521a657fa2550c0afdab640625030801a770671ed1648e72c2c6954fe4a6d9b9b92a6ba74b639fc95432998ff5deaa631c9c5c490a57e5c9ddaa9524748f3eeb0a32344b6fdf39e2ec7f7693f78424d35addbb2e96761ba926c9a24eb7c3f8569f6e0fa5c09ddc151c0d553329c53d33d874c0a19e8bb3087492d6f32b503b2079d8c1db7ee648eac2aad26abb5b59d22e61495c666f7b11dc98a8d899d17ec12c591c34f3798ff63f5979e1b90465c67bce2c28d1eb547897dd1f9a01712ea536d8cc60471567677ab394a5475f6aa41fe5edb53ba53f07e203bccc00d4301eb6c0dfd4fa367374a33ebf276c9e288effc8d3470397479a2db12eea10c7d115ee4b189d8b64264eb85b1eae675cdd5f49af2efff06f7a0a8e5e4f355ffaf99421d13c3a3f0ef06e7771017f10d04c5dd749b7b22bca644c7a344ff36816340147351e84ffb9d0d0bdf77678887238a963270bc6aa8160af954cd3fc76cea94bbc8f654d3d1856cd26332a872a4340cbf2830e449fbb43f864c71bc3b4b1fdcc114f0dab885c9a8743b5fc7ff4f318c72badaea274ba4e3bb3e4cc681d93198f4c8cd34f5b5745ddec7f1d0d7a57f65788d3bcd949cd723e81811a349146163e4dc68c2786c8d0084ff4aa692e0b467de1cd491fd5e670c0113c60959c2571aed38462c47fe9dbde2155e9057d4b3915c7c26b15fa905d139586e65033159df595903132c0e12189bae5085c702512501c20d23365fb0827878153f58eec5feb2b2709d61a1dbd283d07e3559e6797c4659af414fd54f386e13f06e58f14c3c72db854b80288dc51cd1164770533bff49cf67c16bfa81b5f5b2fce6b9a695b01ef2291b44ee3f3c981ac1af49859d7fa23a4adc51e53a29b65edce06cc693852edb5b2e63a8677c70ac705d70569f805d7cad087d33289837998bf8acb0f8d65321ab1d07f3137c232ec59be35057390a77988929b089101a20bfebf2e1d1266c78bb3e5df8486048b7d831121d04556bd346e934fece14ec1520e39422a9e16e501ef2895bea6081c91f151e4d3bee8248be7b29bde5889377a52f12ccf069c540d74878d6ac220324218b77ef238b4036ce7f359c7d9574e59bb8eb1b3b08568280b77ad2c9bf67c890abfd492ef2965b037c54435f3f1bd3e98523dbe8e3a1599119e672ab9b5dbf7adf4363305f8feb6c6eedca93e4614259d74d1a5f10e05e48cf6a3a741103de35035dff4843bac97a052e012ba96fb690128bef05d6fd8b5863aeff35b5776a257c174ff67e29874ef13523a57db2d0930cc2b0dee2bed8eac9d46773a3d911c32f422aa65da051038e85a6992e1f3e55e29b4b1157845278f9b7ec095b70e72f835cc3ffe815151ec5fd45f1123b5d52b6e309167f32dce49e91df96e0efc1a1357983d5dc853dec0f04fa3b5f539eecc563dcef9cf43fcb699ad1a59659e60bf7e7657f039dd5c679c6a4c97a44c47bdea8cba678e89890b62a1616ece82e91656cdf9488797e372e70f526649927c0cfab3f9c36c14b19e01c9a16ffdf9a6ea072d13d6e9334a58b3d431890a50bd26f90ca1bf14e58a295387c550ba31d22ee92533fb4321b4fb8737e2709ba0def7f6e04d2f4f3a118f71496ab5107a9760984678c4d8c27f3734f3710e0d987c60eb1e6aff779630b0e913faf1801f23fd857353a7f2c4a5fd6abf63224ed49ee7182d57c4573e970fa4032b189443db7a246ec82c03c0fe6b054344f5036107737e605916b82c92fe91ab8b2e7a7dd1baf7b91682e50315121359f1b6d2b0c6608c00aefef8c0dbbe19598a7438582de502f11f9ae0cb97a881df366b5a6d5d91f0128140ffb94e694f12afe35daa33f38fee4c6bed1e9c94568513a82ee09b50a225535d487d07b8520b012c2a3539e0cfd9ab9717726a8fd4f6fa593feebe978037e910fb4f143dfeb24dfe5c54a7ba1151d308c501010b03b97a7971a2ececd751a45211016a776f7e12678076b10298b9edf7addaa2e364ba13699b2b6fd8ae05a2f6696d044ba83bee2ec19ed482c353c2df0b57ca5cb86a19e2bc6aeb5514b21f7e1759c67f87eb2b91345b53b5a2d9b91820a26bb250fe380e4be4018215ee12b7be4ce6c5b14bb181a14aaad28c17d9c5e8e342860f5be57d08c442459e77812ba819e3f43c35d001b904702a7b5b485697e8a6f135fa3159338db83192693fc2c3121de5aed0b511a4eb2e841b9b56057c851ea954f2a84f703f01aedd7491646c6257d77f43f3eebc5ed91934b872acb810f668d55c52e117fb6702850e6c95fba31067cc395ecfb19af5af909c9a3faaf05ac874b90ee1880c5cc3fc1bddc3faaf01eb2fc087396791ecb7fbadac607488d79ef5f40a65b50a579c174478d457fd886c88b988305ead9ad67602f42e8037a7111f9032e8c4581b685a9120617be2a9df87760ffbfe51965300d6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入访问密码查看非公开内容</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工作日志</category>
      </categories>
      <tags>
        <tag>Working Logs</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-数据的表示和运算</title>
    <url>/2021/10/23/ComputerOrganization-2/</url>
    <content><![CDATA[<h2 id="数制与编码"><a href="#数制与编码" class="headerlink" title="数制与编码"></a>数制与编码</h2><h3 id="进位计数制和数据间转换"><a href="#进位计数制和数据间转换" class="headerlink" title="进位计数制和数据间转换"></a>进位计数制和数据间转换</h3><p>计算机内部用二进制编码信息的原因</p>
<ul>
<li>成本方面：二进制两种状态，用有两个稳定状态的物理器件表示，制造成本低。</li>
<li>功能方面：二进制的两种状态，对应逻辑值“真”和“假”，方便计算机实现逻辑运算、进行逻辑判断</li>
<li>实现方面：二进制编码和运算简单，通过逻辑门电路很容易实现</li>
</ul>
<p>进位计数值</p>
<ul>
<li>常用的有十进制、二进制、八进制、十六进制等</li>
<li>基数：进位计数法中每个数位用到的数码个数，每满基数则向高位进位</li>
<li>r进制数($K_nK_{n-1}\cdots K_0K_{-1}\cdots K_{-m}$)可以表示为$K_nr^n+K_{n-1}r^{n-1}+\cdots+K_0r_0+\cdots+K_{-m}r^{-m}$，其中$K_i$是数码，$r$是基数，$r^i$是位权</li>
<li>十六进制的基数16，每一位可以取0-9，A-F（代表10-15）中的任意一个，4位二进制数码对应1位十六进制数码</li>
</ul>
<p>不同进制数的互相转换</p>
<ul>
<li>二进制数转八进制（十六进制）：从小数点起，分别向左向右，每3位（4位）一组，高位或低位不足可补0</li>
<li>八进制（十六进制）转二进制数：每位展开成3位（4位）二进制串即可，展开后必要时去掉高位和低位的0</li>
<li>任意进制转十进制：各个位数码和该位权值的乘积和，即按权展开法</li>
<li>十进制转任意进制数：对整数部分除基数取余（相当于对应进制的整数右移溢出最后一位）；对小数部分乘以基数取整（相当于对应进制的小数左移，溢出第一位）</li>
<li>不是每个十进制小数都能转换成准确的二进制；每个二进制小数都可以转换成准确的十进制</li>
</ul>
<h3 id="定点数的编码表示"><a href="#定点数的编码表示" class="headerlink" title="定点数的编码表示"></a>定点数的编码表示</h3><p>从下面<strong>数的划分</strong>中清晰的展现了知识脉络</p>
<ul>
<li>真值：用户使用的进位计数值编码的各种进制数</li>
<li>机器数：计算机内部使用的数值数据，根据小数点位置是否固定分为<ul>
<li>定点数<ul>
<li>无符号：直接用真值的二进制形式表示的数</li>
<li>有符号 <ul>
<li>通常用二进制最高位作为符号位，放在数字前面（原码表示）</li>
<li>具体的编码方式有原码、补码、反码、移码</li>
<li>每种编码方式都分为定点纯整数和定点纯小数的编码</li>
</ul>
</li>
</ul>
</li>
<li>浮点数：一定有符号</li>
</ul>
</li>
</ul>
<p>原码、补码、反码、移码详细定义</p>
<ul>
<li>原码<ul>
<li>纯整数：最高位是符号位，0为正，1为负，其余位为绝对值</li>
<li>纯小数：最高位即小数点左1位是符号位，其余位为绝对值</li>
</ul>
</li>
<li>补码<ul>
<li>纯整数：正数表示同原码，负数表示为其绝对值原码的取反加1。补码的符号位可以看作位权是$-2^n$，这里n表示非符号的数字位数</li>
<li>纯小数：正数表示同原码，负数表示为其绝对值原码的取反加1（加到最右边的小数位）</li>
</ul>
</li>
<li>反码<ul>
<li>纯整数：正数表示同原码，负数表示位其绝对值原码的取反</li>
<li>纯小数：正数表示同原码，负数表示位其绝对值原码的取反</li>
</ul>
</li>
<li>移码<ul>
<li>n位移码是在真值上加一个偏置$2^{n-1}$</li>
<li>0的移码是$100\cdots$，共$n-1$个$0$</li>
<li>真值的移码和补码仅符号位不同</li>
</ul>
</li>
</ul>
<h2 id="运算方法和运算电路"><a href="#运算方法和运算电路" class="headerlink" title="运算方法和运算电路"></a>运算方法和运算电路</h2><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><ul>
<li>运算器组成<ul>
<li>ALU：核心部件，完成各种算术和逻辑运算</li>
<li>ACC：常用部件，可以提供源操作数，同时作为运算结果的目的操作数存放地</li>
<li>PSW：重要部件，存放状态标志位，包括<ul>
<li>CF：进位或借位标志，无符号数运算是否超过范围</li>
<li>OF：溢出标志，带符号数运算是否超过范围</li>
<li>SF：符号标志，负为1，非负为0</li>
<li>ZF：零标志，运算结果是否为零</li>
<li>PF：奇偶标志，运算结果低8位中1的个数是否位偶数，是则1，否则0</li>
</ul>
</li>
<li>通用寄存器组：必要部件，用户编程可用，暂存参与运算的操作数和结果，存取快，数量少</li>
<li>专用/特殊寄存器组：用户编程不可使用，运算器内部寄存器</li>
</ul>
</li>
<li>运算器结构<ul>
<li>单总线结构：1条总线，3个周期（存源操作数1、存源操作数2、存计算结果），操作慢，电路简单</li>
<li>双总线结构：2条总线，2个周期（存源操作数1和源操作数2、存计算结果），操作较快，电路较复杂</li>
<li>三总线结构：3条总线，1个周期（存源操作数1和源操作数2并计算结果），操作快，电路复杂</li>
</ul>
</li>
</ul>
<h3 id="基本运算部件"><a href="#基本运算部件" class="headerlink" title="基本运算部件"></a>基本运算部件</h3><h4 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h4><p>不带标志位的加法器，只能无符号数使用</p>
<ul>
<li>一位全加器<ul>
<li>输入$A_i,B_i,C_{i-1}$，输出$S_i,C_{i}$</li>
<li>$S_i=A_i\oplus B_i \oplus C_{i-1}$</li>
<li>$C_i=A_iB_i+(A_i\oplus B_i)C_{i-1}$</li>
</ul>
</li>
<li>串行加法器<ul>
<li>只有一个全加器，数据逐行串行送入加法器</li>
<li>n位操作数要进行n次操作，每次产生1位和</li>
<li>成本低，运算慢</li>
</ul>
</li>
<li>并行加法器<ul>
<li>由多个加法器组成，位数和机器字长相同，并行运算</li>
<li>运算时间主要是由进位的传递时间决定，加法器本身是次要因素</li>
<li>$C_i=A_iB_i+(A_i\oplus B_i)C_{i-1}$</li>
<li>记$G_i=A_iB_i$为进位产生函数</li>
<li>记$P_i=(A_i\oplus B_i)$为进位传递函数</li>
<li>串行进位（波进位）：n个全加器串接，低位进位产生时间影响高位运算，位数越多延迟越多</li>
<li>并行进位（先行进位）：把高位进位在表达式上转化成最低位进位<ul>
<li>$C_1=G_1+P_1C_0$</li>
<li>$C_2=G_2+P_2C_1=G_2+P_2G_1+P_2P_1C_0$</li>
<li>以此类推</li>
<li>这种进位和字长无关，是快速的</li>
<li>但位数太多时电路非常复杂</li>
</ul>
</li>
<li>分组并行进位：把n位全加器分成若干组，组内并行进位，组间串或并行进位<ul>
<li>单级先行进位：组内并行（例如4位先行进位电路CLA），组间串行</li>
<li>多级先行进位：组内并行（例如组内修改成4位成组先行进位电路BCLA），组间并行（CLA）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="算术逻辑部件"><a href="#算术逻辑部件" class="headerlink" title="算术逻辑部件"></a>算术逻辑部件</h4><ul>
<li>带标志加法器<ul>
<li>溢出标志$OF=C_n\oplus C_{n-1}$，标志供有符号数使用</li>
<li>符号标志$SF$：和的符号</li>
<li>零标志$ZF$：和为0</li>
<li>进位/借位标志$CF=C_{out}\oplus C_{in}$，前者即$C_n$，后者加法为0，减法为1，标志供无符号数使用</li>
</ul>
</li>
<li>算术逻辑单元ALU<ul>
<li>能实现多种算术运算和逻辑运算</li>
<li>核心是带标志加法器</li>
<li>输入包括<ul>
<li>$A、B$两个n位操作数，</li>
<li>$C_{in}$进位输入</li>
<li>ALUop操作控制输入</li>
</ul>
</li>
<li>输出包括<ul>
<li>$C_{out}$进位输出</li>
<li>$F$输出</li>
<li>各种标志位</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="加减运算"><a href="#加减运算" class="headerlink" title="加减运算"></a>加减运算</h3><p>补码加减运算器可以实现无符号数和带符号数的加减操作，原理如下</p>
<ul>
<li>减法看作是加上相反数（以补码的规则<strong>按位取反加1</strong>）</li>
<li>在加法器基础上，增加一个2选1多路选择器，根据$sub$控制信号来选择加还是减<ul>
<li>如果选加则直接输入，如果选减，则减数<strong>按位取反</strong></li>
</ul>
</li>
<li>$sub$控制信号作为$C_{in}$输入加法器，<strong>表示减数加1</strong></li>
<li>ZF零标志对于有符号无符号数都有意义</li>
<li>CF进/借位标志，等于$sub\oplus C_{out}$，无符号数使用</li>
<li>OF溢出标志，有符号数使用，判定方法有<ul>
<li>单符号判定法：输入两个正数输出负数，或输入两个负数输出正数</li>
<li>双符号判定法：两个符号位不一致则溢出，较高位为实际符号</li>
<li>进位判定法：符号位进位和最高数位进位相同则没有溢出（异或运算）</li>
</ul>
</li>
</ul>
<h3 id="乘除运算"><a href="#乘除运算" class="headerlink" title="乘除运算"></a>乘除运算</h3><h4 id="乘除运算基本原理"><a href="#乘除运算基本原理" class="headerlink" title="乘除运算基本原理"></a>乘除运算基本原理</h4><ul>
<li>原码1位乘法<ul>
<li>原理：符号位单独运算，数值部分进行类似于笔算的步骤，从被乘数的低位开始，反复做加法和右移</li>
<li>算法：设$[X]_原=x_s.x_1x_2\cdots x_n,[Y]_原=y_s.y_1y_2\cdots y_n$<ul>
<li>符号位为$x_s\oplus y_s$，数值取绝对值进行计算</li>
<li>部分积取双符号位，初值为0</li>
<li>从乘数最低位$y_n$开始判断：为1则部分积加$|X|$，为0则部分积加0。</li>
<li>部分积右移1位</li>
<li>重复n次判断</li>
</ul>
</li>
<li>分析：累加n次，移位n次</li>
</ul>
</li>
<li>补码1位乘法（Booth算法）<ul>
<li>原理：<ul>
<li>符号位参与运算</li>
<li>$[X\cdot Y]_补=[X]_补\cdot [0.y_1y_2\cdots y_n]-[X]_补\cdot y_s$</li>
<li>即$[X\cdot Y]_补=[X]_补\cdot[(y_1-y_s)+(y_2-y_1)\cdot2^{-1}+\cdots+(y_{n+1}-y_n)\cdot2^{-n}]$</li>
</ul>
</li>
<li>算法：设$[X]_补=x_s.x_1x_2\cdots x_n,[Y]_补=y_s.y_1y_2\cdots y_n$<ul>
<li>符号位参与运算，数取补码表示</li>
<li>部分积取双符号位，初值为0</li>
<li>从乘数最低位的差值$y_{n+1}-y_n$开始判断（这里$y_{n+1}$是最低非0位后面的第一个0）：为1则加$[X]_补$，为0则加0，为-1则加$[-X]_补$</li>
<li>部分积右移1位</li>
<li>重复n次判断（判断至$y_2-y_1$）</li>
<li>判断最后一次$y_1-y_s$，为1则加$[X]_补$，为0则加0，为-1则加$[-X]_补$</li>
</ul>
</li>
<li>分析：累加n+1次，移位n次（因为最后一次不需要移位）</li>
</ul>
</li>
<li>原码除法（恢复余数法）<ul>
<li>原理：<ul>
<li>符号位单独运算</li>
<li>数值部分进行类似于笔算的步骤，只考虑被除数和除数都非0的情况，从被除数的高位开始，反复做减法和左移，注意余数不够减时需要恢复到减之前的余数</li>
</ul>
</li>
<li>算法：设$[X]_原=x_s.x_1x_2\cdots x_n,[Y]_原=y_s.y_1y_2\cdots y_n$<ul>
<li>符号位为$x_s\oplus y_s$，数值取绝对值进行计算</li>
<li>先用被除数减除数，得到余数</li>
<li>余数为正，上商“1”，左移余数后减除数（即$R&gt;0\Rightarrow R=2R-|Y|$）</li>
<li>余数为负，上商“0”，先恢复到减之前的余数，再左移余数后减除数（即$R&lt;0\Rightarrow R=2(R+|Y|)-|Y|$）。</li>
<li>商的小数点后面需要上n个数，若末位上1，即余数为正则算法结束；若末位上0，即余数为负，需要恢复到减之前的余数，即余数加上$|Y|$</li>
</ul>
</li>
<li>分析：n+1次减法，每次减法都有可能需要恢复余数（0到n+1次加法），n次移位</li>
</ul>
</li>
<li>原码除法（不恢复余数法/加减交替法）<ul>
<li>原理：<ul>
<li>符号位单独运算</li>
<li>数值部分计算几乎和恢复余数法相同，只是对余数恢复步骤进行了优化</li>
</ul>
</li>
<li>算法：设$[X]_原=x_s.x_1x_2\cdots x_n,[Y]_原=y_s.y_1y_2\cdots y_n$<ul>
<li>符号位为$x_s\oplus y_s$，数值取绝对值进行计算</li>
<li>先用被除数减除数，得到余数</li>
<li>余数为正，上商“1”，左移余数后减除数（即$R&gt;0\Rightarrow R=2R-|Y|$）</li>
<li>余数为负，上商“0”，左移余数后加除数（即$R&lt;0\Rightarrow R=2R+|Y|$）。</li>
<li>商的小数点后面需要上n个数，若末位上1，即余数为正则算法结束；若末位上0，即余数为负，需要恢复到减之前的余数，即余数加上$|Y|$</li>
</ul>
</li>
<li>分析：n+1次减法，最后一次减法后可能需要恢复余数（0或1次加法），n次移位</li>
</ul>
</li>
<li><p>补码除法（加减交替法）</p>
<ul>
<li>原理：<ul>
<li>符号位参与运算</li>
<li>被除数和除数都用补码表示，商和余数也用补码表示</li>
<li>商用单符号，被除数、除数、余数都用双符号表示</li>
</ul>
</li>
<li><p>算法：设$[X]_补=x_s.x_1x_2\cdots x_n,[Y]_补=y_s.y_1y_2\cdots y_n$</p>
<ul>
<li>被除数和除数，如果同号则被除数减除数；如果异号则被除数加除数</li>
<li>余数和除数，同号则商上“1”，余数左移1位再减除数；异号则商上“0”，余数左移1位再加除数</li>
<li>重复上一步n次，再把末位置1</li>
</ul>
</li>
<li><p>分析：n+1次减法，n次移位，商末位恒设置为1</p>
</li>
</ul>
</li>
</ul>
<p>注：</p>
<ul>
<li>从原理上，乘法把两个n位数变为2n位；除法用2n位数除以n位数得到n位数</li>
<li>前面的原理总结是关于纯小数的乘法和除法，而整数的乘法除法基本差不多步骤，需要注意的是被除数高位或低位补0使得变为2n位</li>
<li>记忆：乘法右移n次，除法左移n次，原码乘法加n次，补码乘法加n+1次（符号位参与运算，相邻位作差），原码恢复余数除法减2n+1到4n+2次，原码不恢复余数法减2n+1到2n+2次，补码加减交替除法减2n+1次（符号参与运算，同号上1减，异号上0加）</li>
</ul>
<h4 id="乘法电路和除法电路基本结构"><a href="#乘法电路和除法电路基本结构" class="headerlink" title="乘法电路和除法电路基本结构"></a>乘法电路和除法电路基本结构</h4><p>32位无符号乘法运算电路基本结构<br><img src="/2021/10/23/ComputerOrganization-2/unsign_mul.png" class title="this is unsign multiply circuit"></p>
<p>32位补码一位乘法运算电路基本结构（对应Booth算法）<br><img src="/2021/10/23/ComputerOrganization-2/complement_mul.png" class title="this is complement multiply circuit"></p>
<p>32位除法运算电路基本结构（对应原码的不恢复余数法/补码加减交替法）<br><img src="/2021/10/23/ComputerOrganization-2/div.png" class title="this is div circuit"><br>可以看出，如果该图的控制逻辑中考虑除数的符号，则对应补码的加减交替法</p>
<h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><ul>
<li>逻辑移位<ul>
<li>操作数视为无符号数</li>
<li>不丢失有效数值位的情况下，左移等价于乘以2，右移等价于除以2</li>
<li>空位补0</li>
</ul>
</li>
<li>算术移位<ul>
<li>操作数视为有符号数</li>
<li>不丢失有效数值位的情况下，左移等价于乘以2，右移等价于除以2</li>
<li>由上一条易知，负数补码右移时空位补1，负数反码左移右移空位都补1，其他情况空位补0</li>
</ul>
</li>
<li>循环移位<ul>
<li>小循环左移：不带CF的循环左移，CF不参与循环，CF=MSB，LSB=MSB</li>
<li>小循环右移：不带CF的循环右移，CF不参与循环，CF=LSB，MSB=LSB</li>
<li>大循环左移：带CF的循环左移，CF参与循环，CF=MSB，LSB=CF</li>
<li>大循环右移：带CF的循环右移，CF参与循环，CF=LSB，MSB=CF </li>
</ul>
</li>
</ul>
<h2 id="整数的表示和运算"><a href="#整数的表示和运算" class="headerlink" title="整数的表示和运算"></a>整数的表示和运算</h2><h3 id="无符号整数的表示和运算"><a href="#无符号整数的表示和运算" class="headerlink" title="无符号整数的表示和运算"></a>无符号整数的表示和运算</h3><ul>
<li>直接表示为二进制串</li>
<li>无符号整数的加法、乘法、除法前面都提到过，基本和带符号正数的原码运算规则类似</li>
<li>无符号整数的移位对应逻辑移位</li>
</ul>
<h3 id="带符号整数的表示和运算"><a href="#带符号整数的表示和运算" class="headerlink" title="带符号整数的表示和运算"></a>带符号整数的表示和运算</h3><ul>
<li>通常用补码表示</li>
<li>补码的加法、乘法、除法规则前面都提到过</li>
<li>带符号整数的移位相当于算术移位</li>
</ul>
<h3 id="整数的类型转换"><a href="#整数的类型转换" class="headerlink" title="整数的类型转换"></a>整数的类型转换</h3><ul>
<li>带符号数和无符号数的转换：不改变机器码的二进制串，但是改变机器码的解释，因此真值改变</li>
<li>不同字长数的转换<ul>
<li>大字节转小字节：直接截断</li>
<li>小字节转大字节：不改变机器码的解释，因此不希望真值改变，从而根据机器码类型补0或1</li>
</ul>
</li>
</ul>
<h2 id="浮点数的表示和运算"><a href="#浮点数的表示和运算" class="headerlink" title="浮点数的表示和运算"></a>浮点数的表示和运算</h2><h3 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h3><ul>
<li>浮点数表示为$N=r^E\times M$，其中底数r通常是2，E和M都是带符号定点数，前者是阶码，后者是尾数</li>
<li>阶码一般用移码或补码表示，尾数一般用原码或补码表示</li>
<li>规范化浮点数：尾数最高位是1</li>
<li>左规：尾数算术左移1位，阶码减1，可能需要多次</li>
<li>右规：运算溢出时（双符号位01或10），则尾数算术右移1位，阶码加1，只需要一次</li>
<li>浮点数范围：从小到大分别为，负上溢、负数范围、负下溢、0、正下溢、正数范围、正上溢</li>
<li>规格化后的运算结果超过浮点数范围则为溢出，浮点数下溢时计算机通常当0处理</li>
<li><strong>IEEE754标准</strong><ul>
<li>单精度浮点数float（1位符号S、8位阶码E、23位尾数M、共32位）表示为$(-1)^s\times 1.M\times 2^{E-127}$，符号S取0或1，阶码E取1-254</li>
<li>双精度浮点数double（1位符号S，11位阶码E，52位尾数M，共64位）表示为$(-1)^s\times 1.M\times 2^{E-1023}$，符号S取0或1，阶码E取1-2046</li>
<li>阶码的移码偏置是127/1023，因为可以空出全1表示无穷大</li>
<li>尾数含有隐藏的1在小数点前面，尾数只保存小数点后面的值</li>
<li>0用全0表示，根据符号位可以分为+0和-0</li>
<li>无法规范化的数称为非规范化数，即阶码全0。此时偏置为126或1022，即阶码0和1对应值相等，同时非规范化数的尾数不包含隐藏的1，这样设置阶码和尾数的目的是为了平滑的从规范化数过渡到非规范化数</li>
<li>非规范化数提供了一种表示0的方式，但0不是非规范化数，最小的非规范化数是非0的</li>
<li>阶码全1，尾数全0，表示无穷大，根据符号位分为正无穷负无穷</li>
<li>阶码全1，尾数非全0，表示NaN（Not a Number），即用于无意义的数或在初始化时使用。</li>
</ul>
</li>
<li>同样数值位长度的浮点数和定点数相比，表示范围增大，但精度降低</li>
</ul>
<h3 id="浮点数加减运算"><a href="#浮点数加减运算" class="headerlink" title="浮点数加减运算"></a>浮点数加减运算</h3><ul>
<li>对阶：小阶向大阶对齐，即阶码小的尾数（算术）右移阶加1，直到两个数阶码相等。右移时舍掉有效位会影响精度。计算时可以先算阶码的差$\Delta E$</li>
<li>尾数求和：对阶后的尾数按定点数补码加减运算处理，带上双符号位，减法等于加补码对应的负数</li>
<li>规格化:左规或右规至补码最高数值位和符号位不同</li>
<li>舍入：右规造成的低位丢失，可以0舍1入，也可以末尾恒置1。前者的“1入”情况如果造成上溢，需要再右规一次，后者根据末尾原先的情况，可能造成结果变大或变小</li>
<li>溢出判断和处理：规格化尾数后，根据阶码是否超过范围来判断溢出情况，即补码表示的双符号位不一致（10下溢，01上溢）。</li>
</ul>
<h3 id="浮点数类型转换"><a href="#浮点数类型转换" class="headerlink" title="浮点数类型转换"></a>浮点数类型转换</h3><ul>
<li>int转float，不会溢出；可能有数据舍入从而丢失精度</li>
<li>int或float转double，不会溢出；且保持精度</li>
<li>double转float，可能溢出；可能有数据舍入从而丢失精度</li>
<li>double或float转int，可能溢出；可能有数据截断从而丢失精度</li>
<li>以上类型转换尽量保持真值不变，但由于编码方式不同，因此存储的二进制串会有改变</li>
<li>溢出主要看编码的表示范围</li>
<li>精度主要看编码的有效位数和表示范围的相对关系<ul>
<li>同样的有效位数，表示范围约大，精度越低，比如float和int都是32个有效位，float范围大，精度低</li>
<li>同样的表示范围，编码有效位数越多，精度越高</li>
<li>注意到double相比float和int，即使表示范围更大，但因为有效位数更大，精度更大</li>
</ul>
</li>
</ul>
<h2 id="数据的存储和排列"><a href="#数据的存储和排列" class="headerlink" title="数据的存储和排列"></a>数据的存储和排列</h2><h3 id="大端方式和小端方式"><a href="#大端方式和小端方式" class="headerlink" title="大端方式和小端方式"></a>大端方式和小端方式</h3><ul>
<li>用最低有效字节LSB和最高有效字节MSB表示数的最高位和最低位</li>
<li>大端方式：按MSB到LSB的顺序存储数据</li>
<li>小端方式：按LSB到MSB的顺序存储数据</li>
<li>注意：一个地址内（一个字节）的数据无论按大端或小端存储，其机器级代码的文本形式中都是以实际值方式呈现</li>
</ul>
<h3 id="边界对齐"><a href="#边界对齐" class="headerlink" title="边界对齐"></a>边界对齐</h3><ul>
<li>以<strong>32位存储字长的机器</strong>为例</li>
<li>字节：8位二进制长度，每个地址对应存储单元的大小</li>
<li>半字：半个存储字长，对应16位、2字节</li>
<li>字：存储字长，对应32位、4字节</li>
<li>边界对齐方式<ul>
<li>半字地址一定是2的整数倍，字地址一定是4的整数倍</li>
<li>数据无论是字节、半字、字都可以一次取出</li>
<li>不满足上述条件可以通过填充0满足条件，浪费空间但提高取指令和取数的速度</li>
</ul>
</li>
<li>非边界对齐方式<ul>
<li>充分利用存储空间</li>
<li>半字长和字长的数据可能在两个存储字中，需要两次访存，还要对高低字节进行位置调整和连接，影响指令执行效率</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-指令系统</title>
    <url>/2021/10/29/ComputerOrganization-4/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>程序：由一系列有序的指令构成</li>
<li>指令：指示计算机硬件完成指定的基本操作的命令</li>
<li>指令系统<ul>
<li>又叫指令集，是一台计算机所有指令的集合</li>
<li>位于软件硬件交界面上</li>
<li>计算机的主要属性，指出计算机有哪些基本的硬件功能</li>
</ul>
</li>
<li>指令系统应具备的特征<ul>
<li>完备性：功能齐全</li>
<li>高效性：编写的程序占据空间小，执行速度快</li>
<li>规整性<ul>
<li>对称性：所有寄存器和存储单元可同等对待；所有指令可使用各种寻址方式</li>
<li>匀齐性：可以支持各自数据类型</li>
<li>一致性：指令格式和数据格式一致</li>
</ul>
</li>
<li>兼容性：系列机各种机型有相同的基本机构和共同的基本指令集</li>
</ul>
</li>
</ul>
<h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><ul>
<li>操作码+地址码</li>
<li>操作码指出操作的类型</li>
<li>地址码给出被操作的信息的地址</li>
<li>指令长度指的是一条指令的二进制代码长度<ul>
<li>取决于操作码长度、地址码长度、地址码个数</li>
<li>可能大于、等于或小于机器字长，如双字长指令、字长指令、半字长指令</li>
<li>指令系统的所有指令长度相等，称为<strong>定长指令字结构</strong>，执行快，结构简单</li>
<li>指令系统的指令长度随指令而异，称为<strong>变长指令字结构</strong>，一般是字节的整数倍（考虑主存按字节编址）</li>
</ul>
</li>
<li>根据操作数地址码的个数，指令分为<ul>
<li>零地址指令<ul>
<li>不需要操作数的指令。如空指令、停机指令、关中断指令</li>
<li>涉及堆栈的运算指令。</li>
</ul>
</li>
<li>一地址指令：<ul>
<li>单操作数指令。如自增、自减、求反、求补，形式为$OP(A_1)\rightarrow A_1$</li>
<li>隐含的双操作数指令。一般另一个操作数由ACC（累加器）提供，运算结果也存到ACC中，形式为$(ACC)\ OP\ (A_1)\rightarrow ACC$</li>
</ul>
</li>
<li>二地址指令：比如常用的逻辑运算，算术运算，形式为$(A_1)\ OP\ (A_2)\rightarrow A_1$</li>
<li>三地址指令：比如常用的逻辑运算，算术运算，形式为$(A_1)\ OP\ (A_2)\rightarrow A_3$</li>
<li>四地址指令：形式为$(A_1)\ OP\ (A_2)\rightarrow A_3$，$A_4$是下一条指令的地址</li>
</ul>
</li>
</ul>
<h3 id="定长操作码指令格式"><a href="#定长操作码指令格式" class="headerlink" title="定长操作码指令格式"></a>定长操作码指令格式</h3><ul>
<li>在指令高位分配固定长度的若干位表示操作码</li>
<li>$n$位操作码字段可以表示$2^n$个指令</li>
<li>定长操作码简化计算机硬件设计，提高指令译码识别速度，当计算机字节为32位和更长时，这是常规用法</li>
</ul>
<h3 id="拓展操作码指令格式"><a href="#拓展操作码指令格式" class="headerlink" title="拓展操作码指令格式"></a>拓展操作码指令格式</h3><ul>
<li>当指令字长有限时，为了丰富指令种类，可以采用可变长度操作码</li>
<li>拓展操作码是最常用的可变长操作码，操作码长度根据地址码的减少而增加<ul>
<li>一般全1留作拓展操作码使用</li>
<li>比如0000 - 1110是4位操作码；11110000 - 11111110是8位操作码；111111110000 - 111111111110是12位操作码</li>
</ul>
</li>
<li>除了拓展操作码，还有其他的拓展方法，比如哈夫曼编码的思想，给高频指令短的操作码</li>
<li>拓展编码必须是前缀码，即不存在短码是长码的前缀，且各指令操作码不重复</li>
</ul>
<h3 id="指令的操作类型"><a href="#指令的操作类型" class="headerlink" title="指令的操作类型"></a>指令的操作类型</h3><ul>
<li>数据传送<ul>
<li>寄存器之间的传送 MOV</li>
<li>从内存读数据到CPU寄存器 LOAD</li>
<li>从CPU寄存器写数据到内存 STORE</li>
</ul>
</li>
<li>算术和逻辑运算<ul>
<li>算术运算：ADD（加）、SUB（减）、CMP（比较）、MUL（乘）、DIV（除）、INC（自增1）、DEC（自减1）</li>
<li>逻辑运算：AND（与）、OR（或）、NOT（非）、XOR（异或）</li>
</ul>
</li>
<li>移位操作<ul>
<li>算术移位</li>
<li>逻辑移位</li>
<li>循环移位</li>
</ul>
</li>
<li>转移操作<ul>
<li>无条件转移 JMP：任意条件都会转移</li>
<li>条件转移 BRANCH：满足条件才会转移</li>
<li>调用 CALL：调用指令需要保存下一条指令的地址，方便调用结束后返回。</li>
<li>返回 RET：完成调用后根据之前保存的地址返回</li>
<li>陷阱 TRAP</li>
</ul>
</li>
<li>输入输出操作：用于CPU和外部设备交换数据、传送控制命令和状态信息</li>
</ul>
<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><h3 id="有效地址的概念"><a href="#有效地址的概念" class="headerlink" title="有效地址的概念"></a>有效地址的概念</h3><ul>
<li>指令中的地址码字段并不代表操作数真实地址，而是形式地址</li>
<li>形式地址需要结合寻址方式，算出操作数在存储器中的真实地址，即有效地址EA<ul>
<li>若考虑虚拟存储机制，有效地址本质上是段内偏移量，即线性地址等于段基地址加有效地址。</li>
<li>本章内容除非特殊说明，默认先不考虑虚拟存储，即段基地址从0开始，且不采用分页机制，此时有效地址就是真实的物理地址</li>
</ul>
</li>
</ul>
<h3 id="指令寻址和数据寻址"><a href="#指令寻址和数据寻址" class="headerlink" title="指令寻址和数据寻址"></a>指令寻址和数据寻址</h3><ul>
<li>指令寻址<ul>
<li>含义：寻找下一条需要执行的指令地址</li>
<li>分为<ul>
<li>顺序寻址：程序计数器PC加1</li>
<li>跳跃寻址：通过本条转移指令算出下一条指令地址，可能跳跃到绝对地址（根据标记符），也可能跳跃到相对地址（距当前的指令偏移量），算出后修改程序计数器PC</li>
</ul>
</li>
</ul>
</li>
<li>数据寻址<ul>
<li>含义：根据指令中操作数的形式地址得到其有效地址</li>
<li>数据寻址方式很多，通常在指令中设置一个字段（即寻址特征），用以指明寻址方式的类型</li>
<li>指令的格式为：操作码、寻址特征、形式地址A</li>
</ul>
</li>
</ul>
<h3 id="常见寻址方式"><a href="#常见寻址方式" class="headerlink" title="常见寻址方式"></a>常见寻址方式</h3><ul>
<li>隐含寻址<ul>
<li>不显式给出所有操作数地址，指令中隐含操作数的地址</li>
<li>比如累加器ACC作为第二个操作数的地址，结果也存放到ACC中</li>
<li>优点是缩短指令长度；缺点是需要增加存储隐含地址的硬件</li>
<li>访存0次</li>
</ul>
</li>
<li>立即（数）寻址<ul>
<li>地址字段指出的是操作数本身，称为立即数</li>
<li>数据用补码形式存放</li>
<li>优点是不需要访问内存；缺点是立即数的位数收到指令长度限制</li>
<li>访存0次</li>
</ul>
</li>
<li>直接寻址<ul>
<li>地址字段就是操作数的真实地址</li>
<li>$EA = A$</li>
<li>优点是寻址简单，只需要访问一次内存；缺点是寻址范围受指令位数限制，地址也不容易修改</li>
<li>访存1次</li>
</ul>
</li>
<li>间接寻址<ul>
<li>指令中给出操作数真实地址所存放位置的真实地址</li>
<li>$EA = (A)$</li>
<li>间接寻址可以是一次，也可以是多次<ul>
<li>如果内存寻址得到的内容第一位是1，表示多次间接寻址，需要继续寻址</li>
<li>如果内存寻址得到的内容第一位是0，表示得到的就是操作数的地址</li>
</ul>
</li>
<li>优点是扩大了寻址范围，EA位数大于A的位数；缺点是需要多次访存（至少2次）</li>
<li>这种寻址方式不常用，通常使用<strong>寄存器间接寻址</strong>扩大寻址范围</li>
<li>访存至少2次</li>
</ul>
</li>
<li>寄存器寻址<ul>
<li>指令中给出操作数所在的寄存器编号</li>
<li>$EA = R_i$</li>
<li>优点是不访问主存，且地址码很短（因为寄存器不多）；缺点是寄存器价格贵，个数有限</li>
<li>访存0次</li>
</ul>
</li>
<li>寄存器间接寻址<ul>
<li>指令中给出操作数真实地址所存放的寄存器编号</li>
<li>$EA = (R_i)$</li>
<li>特点是比<strong>间接寻址</strong>快，但仍需要访问主存</li>
<li>访存1次</li>
</ul>
</li>
<li>相对寻址<ul>
<li>指令中给出的是偏移地址（可正可负），基地址在PC中</li>
<li>$EA = (PC)+A$</li>
<li>操作数地址不是固定的，广泛应用于转移指令</li>
<li>注意<ul>
<li>转移指令取出后，PC会立刻更新到下一行指令的位置，此后再计算相对偏移量。</li>
<li>比如转移指令2个字节，转移指令地址为X，则执行完后，$PC=X+2+A$</li>
</ul>
</li>
<li>访存1次</li>
</ul>
</li>
<li>基址寻址<ul>
<li>指令给出偏移地址，基地址在基址寄存器BR中</li>
<li>$EA =(BR) + A$</li>
<li>面向操作系统的寻址方式，基址寄存器由操作系统管理，用户程序运行时通常BR不可变</li>
<li>该寻址方法扩大了寻址范围，用户不需要考虑编程的地址范围；缺点是偏移量的位数短</li>
<li>访存1次</li>
</ul>
</li>
<li>变址寻址<ul>
<li>指令给出基地址，偏移地址在变址寄存器IX中</li>
<li>$EA =(IX) + A$</li>
<li>面向用户的寻址方式，变址寄存器用户可以更改，指令中的A一般不变</li>
<li>该寻址方法扩大了寻址范围，常用于数组（A为数组地址，IX存放元素偏移量）、循环；缺点是偏移量的位数短</li>
<li>访存1次</li>
</ul>
</li>
<li>堆栈寻址<ul>
<li>堆栈是存储器（或专用寄存器组）中特定的按后进先出原则管理的存储区</li>
<li>该存储的读写一般通过栈顶指针寄存器SP</li>
<li>分为<ul>
<li>硬堆栈：寄存器堆栈，成本高，不适合大容量堆栈</li>
<li>软堆栈：主存中划分一块区域作为堆栈，划算且常用</li>
</ul>
</li>
<li>本寻址方式一般指令中都无操作数，操作数隐含在堆栈中，在读写堆栈的单元前后会相应对SP内容进行增减</li>
</ul>
</li>
</ul>
<h3 id="x86汇编指令入门"><a href="#x86汇编指令入门" class="headerlink" title="x86汇编指令入门"></a>x86汇编指令入门</h3><h4 id="相关寄存器"><a href="#相关寄存器" class="headerlink" title="相关寄存器"></a>相关寄存器</h4><ul>
<li>8个32位的通用寄存器，分别为<ul>
<li>EAX 累加器（Accumulator）</li>
<li>EBX 基地址寄存器（Base Register）</li>
<li>ECX 计数寄存器（Count Register）</li>
<li>EDX 数据寄存器（Data Register）</li>
<li>ESI、EDI 变址寄存器（Index Register）</li>
<li>EBP 堆栈基指针（Base Pointer）</li>
<li>ESP 堆栈顶指针（Stack Pointer）</li>
</ul>
</li>
<li>功能上作为程序计数器PC的寄存器：IP或EIP，只能使用控制指令修改</li>
<li>字母表示可以大写也可以小写，第一个字母E表示Extended（拓展的）</li>
<li>为了兼容性，EAX、EBX、ECX、EDX的低两个字节可以单独使用，以EAX为例<ul>
<li>EAX低2字节称为AX</li>
<li>AX的高字节和低字节分别称为AH和AL</li>
</ul>
</li>
<li>除了EBP和ESP，其他寄存器的使用实际上是任意的</li>
</ul>
<h4 id="寻址模式"><a href="#寻址模式" class="headerlink" title="寻址模式"></a>寻址模式</h4><ul>
<li>如果是两个地址参数，第一个为目的地址，第二个为源地址</li>
<li>中括号$[]$内是地址，整体表示取括号中地址对应的存储空间</li>
<li>计算地址最多只能用<strong>2个</strong>32位寄存器和<strong>1个</strong>32位有符号常数<strong>相加</strong></li>
</ul>
<h4 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h4><ul>
<li>汇编语言中声明内存大小，显示的使用<ul>
<li>DB：Data Byte，单字节</li>
<li>DW：Data Word，双字节</li>
<li>DD：Double Word，四字节</li>
</ul>
</li>
<li>对于常数的分配空间大小，可以使用标识符<ul>
<li>BYTE PTR：常数以单字节形式</li>
<li>WORD PTR：常数以双字节形式</li>
<li>DWORD PTR：常数以四字节形式</li>
</ul>
</li>
<li>指令可以有后缀指明空间大小，以传送指令mov为例<ul>
<li>movb：传送单字节</li>
<li>movw：传送双字节</li>
<li>movl：传送四字节</li>
<li>movq：传送八字节</li>
</ul>
</li>
</ul>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><ul>
<li>以&lt;reg&gt;、&lt;mem&gt;、&lt;con&gt;分别表示操作数为寄存器、内存、常数的情况。如果reg和con后带数字则表示指定了位数。</li>
<li>以&lt;label&gt;表示标签，放在指令的前面，表示指令的地址</li>
<li>数据传送指令<ul>
<li>mov指令：将第二个操作数复制到第一个操作数。要求目的操作数不为常数，且不能从内存到内存<ul>
<li>mov &lt;reg&gt;,&lt;reg&gt;</li>
<li>mov &lt;reg&gt;,&lt;mem&gt;</li>
<li>mov &lt;reg&gt;,&lt;con&gt;</li>
<li>mov &lt;mem&gt;,&lt;reg&gt;</li>
<li>mov &lt;mem&gt;,&lt;con&gt;</li>
</ul>
</li>
<li>push指令：ESP值减4后把操作数压入栈中，可以看出栈增长方向是从大地址到小地址<ul>
<li>push &lt;reg32&gt;</li>
<li>push &lt;mem&gt;</li>
<li>push &lt;con32&gt;</li>
</ul>
</li>
<li>pop指令：把操作数弹出栈后ESP加4<ul>
<li>pop &lt;reg32&gt;</li>
<li>pop &lt;mem&gt;</li>
</ul>
</li>
</ul>
</li>
<li>算术和逻辑计算指令<ul>
<li>add/sub指令：第一个操作数加上/减去第二个操作数，结果保存在第一个操作数位置<ul>
<li>add/sub &lt;reg&gt;,&lt;reg&gt;</li>
<li>add/sub &lt;reg&gt;,&lt;mem&gt;</li>
<li>add/sub &lt;reg&gt;,&lt;con&gt;</li>
<li>add/sub &lt;mem&gt;,&lt;reg&gt;</li>
<li>add/sub &lt;mem&gt;,&lt;con&gt;</li>
</ul>
</li>
<li>inc/dec指令：操作数自增1/自减1<ul>
<li>inc/dec &lt;reg&gt;</li>
<li>inc/dec &lt;mem&gt;</li>
</ul>
</li>
<li>imul指令：带符号整数乘法指令。第一个（目的）操作数必须是寄存器；可以有一个或两个源操作数；一个源操作数时不使用常数，其与目的操作数的积放到目的操作数；两个源操作数时使用常数，把积放到目的操作数；如果溢出则OF=1<ul>
<li>imul &lt;reg32&gt;,&lt;reg32&gt;</li>
<li>imul &lt;reg32&gt;,&lt;mem&gt;</li>
<li>imul &lt;reg32&gt;,&lt;reg32&gt;,&lt;con&gt;</li>
<li>imul &lt;reg32&gt;,&lt;mem&gt;,&lt;con&gt;</li>
</ul>
</li>
<li>idiv指令：带符号除法指令。一个操作数表示除数。被除数为EDX:EAX。结果商存入EAX，余数存入EDX。<ul>
<li>idiv &lt;reg32&gt;</li>
<li>idiv &lt;mem&gt;</li>
</ul>
</li>
<li>and/or/xor指令：逻辑与/或/异或，结果放在第一个操作数<ul>
<li>and/or/xor &lt;reg&gt;,&lt;reg&gt;</li>
<li>and/or/xor &lt;reg&gt;,&lt;mem&gt;</li>
<li>and/or/xor &lt;reg&gt;,&lt;con&gt;</li>
<li>and/or/xor &lt;mem&gt;,&lt;reg&gt;</li>
<li>and/or/xor &lt;mem&gt;,&lt;con&gt;</li>
</ul>
</li>
<li>not指令：取反（位翻转）指令<ul>
<li>not &lt;reg&gt;</li>
<li>not &lt;mem&gt;</li>
</ul>
</li>
<li>neg指令：取负指令<ul>
<li>neg &lt;reg&gt;</li>
<li>neg &lt;mem&gt;</li>
</ul>
</li>
<li>shl/shr指令：逻辑移位指令，结果存放在第一个操作数，第二个操作数为移位的位数<ul>
<li>shl/shr &lt;reg&gt;,&lt;con8&gt;</li>
<li>shl/shr &lt;mem&gt;,&lt;con8&gt;</li>
<li>shl/shr &lt;reg&gt;,&lt;cl&gt;</li>
<li>shl/shr &lt;mem&gt;,&lt;cl&gt;</li>
</ul>
</li>
</ul>
</li>
<li>控制流指令<ul>
<li>jmp指令：控制IP转移到label指示的地址执行<ul>
<li>jmp &lt;label&gt;</li>
</ul>
</li>
<li>cmp指令：第一个操作数和第二个操作数比较，根据结果设置处理机状态字条件码<ul>
<li>cmp &lt;reg&gt;,&lt;reg&gt;</li>
<li>cmp &lt;reg&gt;,&lt;mem&gt;</li>
<li>cmp &lt;reg&gt;,&lt;con&gt;</li>
<li>cmp &lt;mem&gt;,&lt;reg&gt;</li>
</ul>
</li>
<li>jcondition指令：根据处理机状态字进行条件转移<ul>
<li>je &lt;label&gt; 等于时跳转</li>
<li>jne &lt;label&gt; 不等于时跳转</li>
<li>jz &lt;label&gt; 等于0时跳转</li>
<li>jg &lt;label&gt; 有符号大于时跳转</li>
<li>jge &lt;label&gt; 有符号大于等于时跳转</li>
<li>jl &lt;label&gt; 有符号小于时跳转</li>
<li>jle &lt;label&gt; 有符号小于等于时跳转</li>
<li>ja &lt;label&gt; 无符号大于时跳转</li>
<li>jae &lt;label&gt; 无符号大于等于时跳转</li>
<li>jb &lt;label&gt; 无符号小于时跳转</li>
<li>jbe &lt;label&gt; 无符号小于等于时跳转</li>
</ul>
</li>
<li>call/ret指令：用于函数的调用和返回。call把当前指令地址入栈后，无条件转移到标签处；ret从栈中弹出之前保存的地址，无条件转移回之前的地址位置<ul>
<li>call &lt;label&gt;</li>
<li>ret</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="数据对齐和大小端存放"><a href="#数据对齐和大小端存放" class="headerlink" title="数据对齐和大小端存放"></a>数据对齐和大小端存放</h2><p>详见第二章笔记中，“数据的存储和排列”小节</p>
<h2 id="CISC和RISC的基本概念"><a href="#CISC和RISC的基本概念" class="headerlink" title="CISC和RISC的基本概念"></a>CISC和RISC的基本概念</h2><ul>
<li>复杂指令系统计算机（CISC）<ul>
<li>增强原有指令的功能，设置更复杂的新指令，使软件功能硬件化实现</li>
<li>比如X86架构计算机</li>
</ul>
</li>
<li>精简指令系统计算机（RISC）<ul>
<li>减少指令的种类、简化指令的功能，使指令的速度提高</li>
<li>比如ARM、MIPS架构计算机</li>
</ul>
</li>
</ul>
<h3 id="复杂指令系统计算机"><a href="#复杂指令系统计算机" class="headerlink" title="复杂指令系统计算机"></a>复杂指令系统计算机</h3><p>CISC的特点如下：</p>
<ul>
<li>指令系统：复杂庞大</li>
<li>指令数目：一般在200条以上</li>
<li>指令字长：不固定。指令格式多，寻址方式多</li>
<li>可访存的指令：不受限制</li>
<li>各指令使用频度：差别大，遵循28定律（20%的指令使用频率80%，80%的指令很少使用）</li>
<li>各指令执行时间：差别大，大部分需要多个时钟周期</li>
<li>CPU中通用寄存器数量：较少</li>
<li>控制器控制方式：大多数采用微程序控制。有些指令很复杂，无法用硬连线控制。</li>
<li>目标代码优化：难以用优化编译生成高效的目标代码程序</li>
<li>指令流水线技术：可以通过一定方式实现</li>
<li>软件兼容性：比较好，高档机可保护低档机全部指令并加以扩充</li>
</ul>
<h3 id="精简指令系统计算机"><a href="#精简指令系统计算机" class="headerlink" title="精简指令系统计算机"></a>精简指令系统计算机</h3><p>RISC的特点如下：</p>
<ul>
<li>指令系统：选取使用频率高的简单指令，复杂的指令由简单指令组合实现</li>
<li>指令数目：一般在100条以下</li>
<li>指令字长：固定。指令格式少，寻址方式少</li>
<li>可访存的指令：只有LOAD/STORE（取数存数）允许访存。其余指令的操作在寄存器之间进行</li>
<li>各指令使用频度：都经常使用</li>
<li>各指令执行时间：大部分指令在一个时钟周期内完成</li>
<li>CPU中通用寄存器数量：非常多</li>
<li>控制器控制方式：以硬布线控制（组合逻辑控制）为主，基本不用微程序控制</li>
<li>目标代码优化：特别重视编译优化工作，以减少程序执行时间</li>
<li>指令流水线技术：一定采用</li>
<li>软件兼容性：大多数RISC不能和老机器兼容，但因为实用性强，是未来的发展方向</li>
</ul>
<h2 id="高级语言程序与机器代码之间的对应"><a href="#高级语言程序与机器代码之间的对应" class="headerlink" title="高级语言程序与机器代码之间的对应"></a>高级语言程序与机器代码之间的对应</h2><h3 id="编译器、汇编器和链接器的基本概念"><a href="#编译器、汇编器和链接器的基本概念" class="headerlink" title="编译器、汇编器和链接器的基本概念"></a>编译器、汇编器和链接器的基本概念</h3><p>详见第一章笔记“高级语言程序与机器语言程序转换”小节</p>
<h3 id="过程（函数）调用的机器级表示"><a href="#过程（函数）调用的机器级表示" class="headerlink" title="过程（函数）调用的机器级表示"></a>过程（函数）调用的机器级表示</h3><p>假设P调用Q，则步骤如下</p>
<ul>
<li>P保存现场：当需要保留<strong>调用者保存寄存器</strong>（包括EAX、ECX、EDX）的值，进行此步骤</li>
<li>P压参数：把调用参数按从右到左的顺序压入栈中（如果寄存器数量充足，也可能把部分参数用寄存器保存）</li>
<li>P执行CALL指令<ul>
<li>存旧PC：把返回地址（调用指令后一条指令的位置）压栈</li>
<li>更新PC：修改PC至跳转处，此后Q过程开始执行</li>
</ul>
</li>
<li>Q准备阶段<ul>
<li>存原栈底：将EBP（P的栈底）压栈（此时ESP为栈顶，所指位置存放P的栈底）</li>
<li>更新栈底：更新EBP为ESP位置（即Q的栈底中存放P的栈底）</li>
<li>更新栈顶：修改ESP，为自己分配栈空间（一般减去大小为16字节的倍数，以便对齐）</li>
<li>保存现场：如果需要用<strong>被调用者保存寄存器</strong>（包括EBX、ESI、EDI），进行此步骤</li>
</ul>
</li>
<li>Q过程体阶段<ul>
<li>局部变量空间分配：一般按低地址到高地址的顺序使用栈空间（和栈增长方向相反）</li>
<li>通常按小端存放，考虑对齐</li>
<li>结束时设置返回值（通常是放到EAX寄存器中）</li>
</ul>
</li>
<li>Q结束阶段<ul>
<li>Q恢复P的现场</li>
<li>Q执行leave指令<ul>
<li>恢复栈顶：修改ESP等于EBP，以释放Q的栈空间</li>
<li>恢复栈底：弹出Q的EBP所指向P的EBP的值给EBP，即恢复P的栈空间</li>
</ul>
</li>
<li>Q执行ret指令<ul>
<li>恢复PC：弹出此时ESP所指向的返回地址给PC，以返回P执行</li>
</ul>
</li>
</ul>
</li>
<li>P恢复现场</li>
<li>P继续执行CALL指令的下一条指令</li>
</ul>
<p><strong>注：关于一个过程P的栈帧</strong></p>
<ul>
<li>P栈帧头：P过程EBP指向空间（存放P过程的调用者的旧EBP）</li>
<li>P栈帧尾：下一个过程Q的EBP指向空间（存放的是P的EBP）的前一个空间（存放的是P的返回地址）</li>
<li>栈帧是周期性的，P的栈帧尾后面就是Q的栈帧头</li>
</ul>
<h3 id="选择结构语句的机器级表示"><a href="#选择结构语句的机器级表示" class="headerlink" title="选择结构语句的机器级表示"></a>选择结构语句的机器级表示</h3><h4 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h4><ul>
<li>即标志位寄存器，包括<ul>
<li>CF 进位标志：用于无符号数</li>
<li>ZF 零标志：最近运算是否为0</li>
<li>SF 符号标志：最近运算结果的符号</li>
<li>OF 溢出标志：用于带符号数</li>
</ul>
</li>
<li>cmp和sub对条件码的行为一致</li>
<li>test和and对条件码行为一致</li>
<li>jcondition指令结合条件码的ZF和SF可以实现跳转</li>
</ul>
<h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><ul>
<li>可以利用if-goto语句分析从高级语言到汇编的过程</li>
<li>如果if条件不满足，则goto跳转</li>
<li>然后把if-goto转换到对应的汇编中，使用cmp/test、jcondition Label的方式</li>
</ul>
<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><ul>
<li>相比于if语句多次条件判断来跳转，switch是多路选择，一次直接跳到某个条件处的语句执行</li>
<li>需要用到跳转表<ul>
<li>段属性为只读，即.section .rodata</li>
<li>跳转地址在4字节边界上，即align 4</li>
<li>跳转表的头设置一个标记Label，头之后的每一行（项）都是一个标签Labeli，i=0，1，…，7</li>
<li>给出一个例子<ul>
<li>设switch输入10、12、14、15、17分别对应情况L2、L3、L4、L1、L3，其他输入对应情况L5</li>
<li>跳转表Label标签后面的每一行分别表示情况10、11、12、…、17需要跳到的标记Labeli，即L2、L5、L3、L5、L4、L1、L5、L3</li>
<li>汇编代码中，首先把判断的输入减10，记为t。</li>
<li>比较t和7的关系（条件码设置按无符号减法）。</li>
<li>如果大于7（根据无符号数运算，这里包括t是负数的情况），跳转到L5</li>
<li>否则根据t作为索引查跳转表对应表项标签Labelt，跳转到跳转表此项对应的标签位置执行即可</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="循环结构语句的机器级表示"><a href="#循环结构语句的机器级表示" class="headerlink" title="循环结构语句的机器级表示"></a>循环结构语句的机器级表示</h3><ul>
<li>高级语言转汇编可以借助if-goto作为中间代码，方便分析转换</li>
<li>循环结构有三种情况<ul>
<li>do-while循环：一次goto即可</li>
<li>while循环：相当于在do-while前先判断条件一次。需要两个goto</li>
<li>for循环：相当于while语句前先做一个初始化语句，可以先转成while循环。需要两个goto。</li>
</ul>
</li>
<li>最后把if-goto转换到对应的汇编中，使用cmp/test、jcondition Label的方式</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-树</title>
    <url>/2021/10/18/DataStructure-5/</url>
    <content><![CDATA[<h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><ul>
<li>树是n($n\geq 0$)个结点的有限集</li>
<li>n=0为空树</li>
<li>有且只有一个称为根的结点</li>
<li>n&gt;1时，其余结点可分为m($m&gt;0$)个互不相交的有限集$T_1,\cdots,T_m$，每个集合也是树，称为根的子树。</li>
</ul>
<h3 id="树的特点"><a href="#树的特点" class="headerlink" title="树的特点"></a>树的特点</h3><ul>
<li>根没有前驱，其他点有且只有一个前驱</li>
<li>所有点都可以有零或任意多个后继</li>
<li>n个点的树有n-1条边（数学归纳法易证）</li>
</ul>
<h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul>
<li>祖先：根到结点a唯一路径上任意结点都是a的祖先</li>
<li>子孙：结点是其祖先的子孙</li>
<li>双亲：根到结点a唯一路径是最接近a的结点是a的双亲</li>
<li>孩子：结点是其双亲的孩子</li>
<li>兄弟：双亲相同的结点互为兄弟</li>
<li>树结点的度：孩子的个数（和图中度有区别）</li>
<li>树的度：树结点度的最大值</li>
<li>分支节点（非终端结点）：度大于零的点</li>
<li>叶子结点（终端结点）：度等于零的点</li>
<li>结点的层次：从根开始为第1层，逐层增加</li>
<li>堂兄弟：双亲在同一层</li>
<li>结点的深度：从根结点向下逐层累加</li>
<li>结点的高度：从叶结点向上逐层累加</li>
<li>树的高度（深度）：树中结点最大层数</li>
<li>有序树和无序树：有序树的结点从左到右是有次序的树，互换后变成不同的树。</li>
<li>路径和路径长度：两个结点的路径是由两个结点所经过结点序列构成的，路径长度是路径上边的个数（一般来说认为分支有向，路径只能是从上往下的）</li>
<li>树的路径长度:树根到每个结点路径长的总和</li>
<li>森林：m个（$m\geq 0$）互不相交的树的集合</li>
</ul>
<h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><ul>
<li><strong>结点数等于所有结点的度数和加1（即边数加1）</strong></li>
<li>度为$m$的树的第$i$层最多有$m^{i-1}$个节点，($i\geq 1$)</li>
<li>高度为$h$的$m$叉树最多有($\frac{m^h-1}{m-1}$)个结点</li>
<li>具有n个结点的m叉树的最小高度是$\lceil log_m(n(m-1)+1) \rceil$</li>
</ul>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><ul>
<li>或者为空树，n=0</li>
<li>或者由根结点和两个互不相交的左右子树组成，左右子树都是二叉树</li>
<li>注意，二叉树是有序树，左右子树顺序不能随意交换</li>
<li>与度为2的有序树的区别<ul>
<li>二叉树可以为空</li>
<li>即使只有一个孩子，二叉树也要区分左右子树，而有序树这种情况不需要区分顺序</li>
</ul>
</li>
</ul>
<h3 id="几个特殊的二叉树"><a href="#几个特殊的二叉树" class="headerlink" title="几个特殊的二叉树"></a>几个特殊的二叉树</h3><ul>
<li>满二叉树：每层含有做多的结点</li>
<li>完全二叉树：编号与满二叉树完全对应（约定编号从1开始）<ul>
<li>重要特征：度为1的结点必然是只有左孩子</li>
<li>其他特征：只有左孩子的结点编号后的结点都是叶子结点</li>
</ul>
</li>
<li>二叉排序树：左子树关键字小于根关键字小于右子树关键字，左右子树也是二叉排序树</li>
<li>平衡二叉树：树上任一结点左右子树深度差不超过1</li>
</ul>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul>
<li>非空二叉树上的叶子结点数等于度为2的结点数加1</li>
<li>非空二叉树第k层至多有$2^{k-1}$个结点</li>
<li>高度为h的二叉树最多有$2^h-1$个结点</li>
<li>具有n个($n\geq 0$)结点的完全二叉树的高度为$\lceil log_2(n+1)\rceil$，(原理是$2^{h-1}-1&lt;n\leq 2^h-1$)</li>
</ul>
<h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><ul>
<li>顺序存储<ul>
<li>利用数组，数组下标为i的位置存储编号为i+1的结点</li>
<li>适合满二叉树或完全二叉树</li>
<li>对于一般的二叉树需要添加树中并不存在的空结点，以反映二叉树结点的逻辑关系</li>
</ul>
</li>
<li>链式存储<ul>
<li>解决了顺序存储中空间利用率低的问题</li>
<li>每个结点除了数据域，还有左右子树的指针域</li>
<li>n个结点的二叉链表中，有n-1个非空链域，2n个链域，n+1个空链域</li>
<li>后面提到的线索链表中将利用这些空链域</li>
</ul>
</li>
</ul>
<h3 id="树转换为二叉树"><a href="#树转换为二叉树" class="headerlink" title="树转换为二叉树"></a>树转换为二叉树</h3><ul>
<li>结点的孩子放到左子树</li>
<li>结点的兄弟放到右子树</li>
</ul>
<h2 id="二叉树遍历和线索化二叉树"><a href="#二叉树遍历和线索化二叉树" class="headerlink" title="二叉树遍历和线索化二叉树"></a>二叉树遍历和线索化二叉树</h2><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul>
<li>遍历：对二叉树的结点按某种顺序排队</li>
<li>先序遍历：先访问根，再访问左子树，再访问右子树，递归遍历</li>
<li>中序遍历：先访问左子树，再访问根，再访问右子树，递归遍历</li>
<li>后序遍历：先访问左子树，再访问右子树，再访问根，递归遍历</li>
</ul>
<h3 id="二叉树遍历的非递归算法（栈实现）"><a href="#二叉树遍历的非递归算法（栈实现）" class="headerlink" title="二叉树遍历的非递归算法（栈实现）"></a>二叉树遍历的非递归算法（栈实现）</h3><ul>
<li>中序遍历<ul>
<li>(1)：沿着根的左孩子，依次入栈，直到左孩子为空</li>
<li>(2)：栈顶元素出栈并访问，若该元素有右孩子，将右子树转(1)进行；否则继续执行(2)</li>
</ul>
</li>
<li>先序遍历<ul>
<li>(1)：访问根，沿着根的左孩子，依次访问再入栈，直到左孩子为空</li>
<li>(2)：栈顶元素出栈，若该元素有右孩子，将右子树转(1)进行；否则继续执行(2) </li>
</ul>
</li>
<li>后序遍历（较复杂的一种情况）<ul>
<li>(1)：沿着根的左孩子，依次入栈，直到左孩子为空</li>
<li>(2)：读栈顶元素，若该元素有<strong>未访问过的</strong>右孩子，将右子树转(1)进行；否则栈顶元素出栈并访问，再继续(2)</li>
<li>麻烦的地方是(2)中需要判断是从左子树返回的还是从右子树返回的，可以在结点中加一个标记，记录有无访问过。</li>
</ul>
</li>
</ul>
<h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><ul>
<li>(1) 根进队列</li>
<li>(2) 当队列不空，弹出结点，访问结点，结点如果有子结点，则从左到右依次进队列</li>
<li>(3) 返回(2)继续判断</li>
</ul>
<h3 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h3><ul>
<li><p>先序序列和中序序列</p>
<ul>
<li>先序序列第一个为根节点</li>
<li>该点把中序序列分成左子树中序序列和右子树中序序列两部分</li>
<li>根据两部分长度可以把先序序列分成左子树先序序列和右子树先序序列两部分</li>
<li>递归构造左右子树即可</li>
</ul>
</li>
<li><p>后序序列和中序序列</p>
<ul>
<li>后序序列最后一个为根节点</li>
<li>该点把中序序列分成左子树中序序列和右子树中序序列两部分</li>
<li>根据两部分长度可以把后序序列分成左子树后序序列和右子树后序序列两部分</li>
<li>递归构造左右子树即可</li>
</ul>
</li>
<li><p>层序序列和中序序列</p>
<ul>
<li>层序序列第一个为根节点</li>
<li>该点把中序序列分成左子树中序序列和右子树中序序列两部分</li>
<li>两层遍历，把层序序列剩余点分成左子树层序序列和右子树层序序列（看层序序列点在中序序列左子树部分还是右子树部分）</li>
<li>递归构造左右子树即可</li>
</ul>
</li>
<li><p>先序序列和后序序列：二叉树不唯一</p>
<ul>
<li>但是如果先序序列有XY，后序序列有YX，说明X是Y的祖先</li>
</ul>
</li>
</ul>
<h3 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>利用二叉树n+1个空指针域存放遍历的前驱后继信息，即构造出线索化二叉树</li>
<li>线索化二叉树加快了查找结点前驱和后继的速度</li>
<li>如果没有左孩子，则左指针域存放结点前驱位置</li>
<li>如果没有右孩子，则右指针域存放结点后继位置</li>
<li>还要在结点中增加两个布尔标记变量，记录左右指针域存放的是孩子的位置还是前驱后继的位置<ul>
<li>这样的结点构成的链表叫做线索链表</li>
<li>这样的结点构成的二叉树叫做线索二叉树</li>
<li>如果指针域指向了前驱和后继，该指针称为线索</li>
</ul>
</li>
</ul>
<h4 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h4><ul>
<li>构造<ul>
<li>本质就是中序遍历一次</li>
<li>附设pre和p两个指针，指向上一个和当前访问的结点</li>
<li>p的左指针为空则指向pre</li>
<li>pre的右指针为空则指向p</li>
</ul>
</li>
<li>遍历<ul>
<li>FirstNode函数：第一个节点为最左下方的结点（不一定是叶子），不断访问左孩子即可（如果有左孩子）</li>
<li>NextNode函数：访问当前结点后<ul>
<li>如果其右指针不是右孩子，则右指针为后继</li>
<li>如果其右指针是右孩子，则后继为右子树的最左下方的结点，需要调用FirstNode函数</li>
</ul>
</li>
<li>LastNode函数：最后一个节点最右下方的结点（不一定是叶子），不断访问右孩子即可（如果有右孩子）</li>
<li>PreviousNode函数：访问当前结点后<ul>
<li>如果其左指针不是左孩子，则左指针为前驱</li>
<li>如果其左指针是左孩子，则前驱为左子树的最右下方的结点，需要调用LastNode函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="先序后序线索二叉树"><a href="#先序后序线索二叉树" class="headerlink" title="先序后序线索二叉树"></a>先序后序线索二叉树</h4><ul>
<li>构造<ul>
<li>本质还是先按先序或后序遍历一次</li>
<li>附设pre和p两个指针，指向上一个和当前访问的结点</li>
<li>p的左指针为空则指向pre</li>
<li>pre的右指针为空则指向p</li>
</ul>
</li>
<li>遍历<ul>
<li>先序线索树找后继<ul>
<li>如果有左孩子，左孩子为后继</li>
<li>如果没左孩子有右孩子，右孩子为后继</li>
<li>如果没孩子，右指针为后继</li>
</ul>
</li>
<li>后序线索树找后继<ul>
<li>如果为根，则无后继</li>
<li>如果是双亲的右孩子，则后继为双亲</li>
<li>如果是双亲的左孩子，且双亲没右孩子，则后继为双亲</li>
<li>如果是双亲的左孩子，且双亲有右孩子，则后继为双亲右子树后序遍历第一个结点</li>
<li>可以看出后序线索树找后继还需要知道双亲结点，因此要采用带双亲标志域的三叉链表</li>
</ul>
</li>
<li>先序线索树找前驱<ul>
<li>如果为根，则无前驱</li>
<li>如果是双亲的左孩子，则前驱为双亲</li>
<li>如果是双亲的右孩子，且双亲没左孩子，则后继为双亲</li>
<li>如果是双亲的右孩子，且双亲有左孩子，则前驱为双亲左子树先序遍历最后一个结点</li>
<li>可以看出先序线索树找前驱还需要知道双亲结点，因此要采用带双亲标志域的三叉链表</li>
</ul>
</li>
<li>后序线索树找前驱<ul>
<li>如果有右孩子，右孩子为前驱</li>
<li>如果没右孩子有左孩子，左孩子为前驱</li>
<li>如果没孩子，左指针为前驱</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h2><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><ul>
<li>利用结点双亲的唯一性</li>
<li>采用连续顺序存储</li>
<li>记录双亲在数组的位置</li>
<li>类似于静态链表</li>
</ul>
<h4 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h4><ul>
<li>数据元素为链表的数组</li>
<li>每个结点的孩子都用一条链串成线性的结构</li>
<li>类似于邻接表的结构</li>
</ul>
<h4 id="二叉树表示法（孩子兄弟表示法）"><a href="#二叉树表示法（孩子兄弟表示法）" class="headerlink" title="二叉树表示法（孩子兄弟表示法）"></a>二叉树表示法（孩子兄弟表示法）</h4><p>该数据结构很适合实现前面二叉树部分的笔记提到的树转换成二叉树。其中二叉树的每个结点包含：</p>
<ul>
<li>结点值</li>
<li>第一个孩子的指针</li>
<li>第一个兄弟的指针</li>
</ul>
<p>该结构的缺点是找双亲开销比较大</p>
<h3 id="树、森林和二叉树的转换"><a href="#树、森林和二叉树的转换" class="headerlink" title="树、森林和二叉树的转换"></a>树、森林和二叉树的转换</h3><h4 id="树到二叉树"><a href="#树到二叉树" class="headerlink" title="树到二叉树"></a>树到二叉树</h4><ul>
<li>每个结点的左指针指向最左边的孩子</li>
<li>每个结点的右指针指向右边第一个兄弟</li>
<li>根没有兄弟，因此根在二叉树上没有右孩子</li>
</ul>
<h4 id="森林到二叉树"><a href="#森林到二叉树" class="headerlink" title="森林到二叉树"></a>森林到二叉树</h4><ul>
<li>将森林的每个树转换为二叉树</li>
<li>森林的树之间看作兄弟，即二叉树之间用根的右指针链接</li>
</ul>
<h4 id="二叉树到森林"><a href="#二叉树到森林" class="headerlink" title="二叉树到森林"></a>二叉树到森林</h4><ul>
<li>二叉树的根和其左子树为第一颗树</li>
<li>二叉树的根的右子树为森林剩下部分，递归拆分树</li>
<li>把拆分后的每个二叉树还原为树</li>
</ul>
<h3 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h3><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><ul>
<li>类似于二叉树的遍历</li>
<li>树的先根遍历：先访问根，再依次先根遍历子树，<strong>即普通树的二叉树表示的先序遍历</strong></li>
<li>树的后根遍历：先依次后根遍历子树，再访问根，<strong>即普通树的二叉树表示的中序遍历</strong></li>
<li>树的层次遍历：类似于二叉树层次遍历，用到队列</li>
<li>普通树一般不考虑中序遍历</li>
</ul>
<h4 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h4><ul>
<li>先序遍历森林<ul>
<li>先访问第一棵树的根结点</li>
<li>再先序访问第一颗树去掉根的子树森林</li>
<li>最后先序访问森林剩余部分</li>
<li><strong>即森林的二叉树表示的先序遍历</strong></li>
</ul>
</li>
<li>中序遍历森林<ul>
<li>先按照中序遍历访问第一颗树去掉根的子树森林</li>
<li>再访问第一棵树的根结点</li>
<li>最后中序遍历访问森林剩余部分</li>
<li><strong>即森林的二叉树表示的中序遍历</strong></li>
</ul>
</li>
<li>有时也把中序遍历森林称为后续遍历森林，不同教材称呼不同</li>
</ul>
<h3 id="树的应用之并查集"><a href="#树的应用之并查集" class="headerlink" title="树的应用之并查集"></a>树的应用之并查集</h3><p>假设全集合为S，里面有若干元素。并查集支持三个操作：</p>
<ul>
<li>初始化集合S的每个元素自成一个单元素子集合（构成了一个划分）</li>
<li>将两个互不相交的子集合合并</li>
<li>查询S中的元素x所在的子集合</li>
</ul>
<p>并查集结构</p>
<ul>
<li>通常是根树，结点包含双亲的位置</li>
<li>存储一般是顺序存储，根结点的双亲位置标记为-1</li>
</ul>
<p>并查集优化</p>
<ul>
<li>加权“并”：每次合并时将结点数少的集合挂到结点数多的集合的根上</li>
<li>路径压缩“查”：每次查完一个结点，把该结点到根上所有的结点都直接挂到根结点上</li>
</ul>
<p>并查集性能</p>
<ul>
<li>假定并查集包含$n$个元素，同时指向长度为$l$的并和查指令序列</li>
<li>普通并、普通查，复杂度$O(nl)$</li>
<li>加权并、普通查，复杂度$O(n+l\ log\ n)$</li>
<li>加权并、路径压缩查，复杂度$O((n+l)log^\star n)$，其中$log^\star$的定义基于超指数函数，增长非常慢，可以近似认为，复杂度是$O(n+l)$</li>
</ul>
<h2 id="二叉树的应用"><a href="#二叉树的应用" class="headerlink" title="二叉树的应用"></a>二叉树的应用</h2><h3 id="二叉排序树-BST"><a href="#二叉排序树-BST" class="headerlink" title="二叉排序树(BST)"></a>二叉排序树(BST)</h3><ul>
<li>定义<ul>
<li>左子树非空，则左子树值小于根值</li>
<li>右子树非空，则右子树值大于根值</li>
<li>左右子树都是BST</li>
</ul>
</li>
<li>查找<ul>
<li>如果根值和目标值相等则找到</li>
<li>如果目标值较小则进入左子树继续找</li>
<li>如果目标值较大则进入右子树继续找</li>
</ul>
</li>
<li>插入<ul>
<li>如果二叉排序树为空，则直接插入</li>
<li>否则如果关键字较小，则插入左子树</li>
<li>如果关键字较大，则插入右子树</li>
<li>插入时一定是作为叶子结点</li>
</ul>
</li>
<li>构造：从空树开始依次插入结点即可</li>
<li>删除<ul>
<li>如果是叶子结点可以直接删除</li>
<li>如果删除结点只有左子树或只有右子树，则让该子树直接成为删除结点的子树</li>
<li>如果删除结点有左右子树，则用删除结点的直接前驱或直接后继代替删除结点，该前驱和后继原先一定是叶子结点，代替后删除该叶子结点。</li>
</ul>
</li>
<li>查找效率<ul>
<li>平衡二叉排序树，平均查找长度是O(log n)</li>
<li>普通二叉排序树，最坏情况查找长度O(n)</li>
<li>和二分查找类似，但二分查找表是静态的，判定唯一，二叉排序树根据元素插入顺序不同，不唯一</li>
<li>在插入删除时，为了维护表的有序性，二叉排序树平均开销O(log n)，二分查找的有序顺序表平均开销O(n)</li>
</ul>
</li>
</ul>
<h3 id="平衡二叉树-AVL-Tree"><a href="#平衡二叉树-AVL-Tree" class="headerlink" title="平衡二叉树(AVL Tree)"></a>平衡二叉树(AVL Tree)</h3><ul>
<li>定义<ul>
<li>任意结点左右子树高度差不超过1的二叉树</li>
<li>该高度差叫做平衡因子（只能是-1，0，1）</li>
</ul>
</li>
<li>插入<ul>
<li>每插入一个结点，检查最小不平衡子树T，假设T的根为A</li>
<li>此时A是插入路径上平衡因子绝对值大于1的最接近插入点的结点（否则和最小平衡树矛盾）</li>
<li>设A,B,C是插入路径上从上到下的三个结点</li>
<li>LL型：B是A左孩子，C是B左孩子，进行右单旋转，用B代替A，A是B的右孩子，B原右孩子变成A左孩子</li>
<li>RR型：B是A右孩子，C是B右孩子，进行左单旋转，用B代替A，A是B的左孩子，B原左孩子变成A右孩子</li>
<li>LR型：B是A左孩子，C是B右孩子，先左单旋转，用C代替B，B是C的左孩子，C的原左孩子变成B的右孩子；再右单旋转，用C代替A，A是C的右孩子，C的原右孩子变成A的左孩子</li>
<li>RL型：B是A右孩子，C是B左孩子，先右单旋转，用C代替B，B是C的右孩子，C的原右孩子变成B的左孩子；再左单旋转，用C代替A，A是C的左孩子，C的原左孩子变成A的右孩子</li>
</ul>
</li>
<li>删除<ul>
<li>按普通二叉排序树删除</li>
<li>从删除点向根找第一个不平衡点，对于该点和该点较高子树路径上的三个点，执行类似的LL、RR、LR、RL旋转</li>
<li>如果由于旋转操作造成不平衡点上面有新的不平衡点，则继续的向根调整</li>
</ul>
</li>
<li>查找<ul>
<li>过程和普通二叉树查找相同</li>
<li>假设$n_h$表示深度为h的平衡树最少需要的结点数,显然$n_0=0,n_1=1,n_h=n_{h-1}+n_{h-2}+1$，该结论可以解决问题：给定结点数求平衡树的最大深度问题</li>
<li>可以证明平衡二叉树最大深度是$O(log n)$</li>
</ul>
</li>
</ul>
<h3 id="哈夫曼树和哈夫曼编码"><a href="#哈夫曼树和哈夫曼编码" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h3><ul>
<li><p>哈夫曼树定义</p>
<ul>
<li>树的带权路径长度定义为$WPL=\sum_{i=1}^nw_il_i$，其中$w_i$为第i个叶结点的权值，$l_i$为根结点到第i个叶结点的路径长度</li>
<li>哈夫曼树是带权路径长度最小的树，最优二叉树</li>
</ul>
</li>
<li><p>哈夫曼树构造</p>
<ul>
<li>将n个结点分别作为单结点二叉树，构造森林F</li>
<li>取F中最小两个权值的树，作为左右子树，构造一个新结点，权值为左右子树权值和</li>
<li>用新树代替刚刚的两棵树加入F中</li>
<li>重复前两步骤直至F中只有一棵树</li>
</ul>
</li>
<li>哈夫曼树特点<ul>
<li>所有初始结点最后都成为叶结点，权值小的结点到根的路径长度更大</li>
<li>构造过程新建了n-1个结点，哈夫曼树总结点数为2n-1</li>
<li>哈夫曼树不存在度为1的结点</li>
</ul>
</li>
<li>哈夫曼编码<ul>
<li>如果对字符用等长的二进制位表示，则是<strong>固定长度编码</strong></li>
<li>如果对不同字符用不同长度的二进制表示，则是<strong>可变长度编码</strong>，好处是可以给高频词短的编码，给低频词长的编码，从而缩短平均编码长度，实现数据压缩</li>
<li>如果没有一个编码是一个编码的前缀，则这样的编码叫做前缀码，前缀码的优点是解码简单，识别出第一个编码就可以翻译为原码</li>
<li>很容易从哈夫曼树构造出哈夫曼编码，字符作为独立结点参与哈夫曼树构造，成为叶结点。字符的编码就是从根到该字符的路径边标记序列（如向左孩子标记为0，向右孩子标记为1）</li>
<li>哈夫曼树的带权路径长度就是哈夫曼编码的平均二进制编码长度</li>
<li>哈夫曼树不一定唯一，编码也不一定唯一，但WPL一定是相同且最优的</li>
</ul>
</li>
<li>推广的哈夫曼树<ul>
<li>如果是多叉树（n叉树），需要保证每个结点的孩子数都是n，做法是补若干权值为0的结点</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【阅读笔记】 A Baseline for Detecting Misclassified and Out-of-Distribution Examples In Neural Networks</title>
    <url>/2021/02/13/OoD-Baseline/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>本文考虑样本检测中两个相关的问题：误分类和OoD。作者利用来自softmax分布的概率提出了一个检测的<strong>baseline</strong>。相比于错误分类的样本和OoD的样本，被正确分类的样本倾向于有更大的maximum softmax概率(<strong>后文统称为置信度</strong>)。接着，baseline的各方面性能通过关于计算机视觉、自然语言处理、自动语音识别的一些任务被进行评估。作者然后说明了baseline有时是可以被超越的，展示了这个检测领域的任务未来可探索的空间。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>当训练分布和测试分布有差异的时候，应用于现实任务的机器学习分类器往往会工作失败。更糟糕的是，面对错误，这些分类器仍然会给出较高的置信度而不会报错，即使错的离谱。分类器如果不能指出自己什么时候可能是错的，它的使用就会收到限制并可能导致严重事故。例如，一个医学的诊断模型可能始终以较高的置信度进行归类，即使模型应该把不太确定的困难样本标记并留给人工处理。由此导致的未标记的错误诊断会阻碍机器学习技术未来在医疗领域的发展。作者还指出一个更普遍而重要的事情：评估一个模型何时发生错误在人工智能安全领域中饱受关注。</p>
<p>softmax输出经常产生高置信度的预测，这是因为softmax概率是由快速递增的指数函数所计算的。<br>因此给softmax的输入(<strong>logits</strong>)一个微小的增量，会导致输出分布的质变。因为softmax函数是指示函数的平滑近似，所以OoD样例输出一个均匀分布并不常见。实际上，随机高斯噪声输入到一个MNIST图像分类器会得到一个高达91%的预测置信度。作者在实验中表明softmax的预测概率和可信度相关性很弱。</p>
<p>但实验工作也表明，错误样本或OoD样本的预测结果，也会倾向于给出相对于正确样本较低的预测概率。因此，尽管预测概率的结果单独看是有误导性的，收集正确样本的预测概率数据对于检测异常样本是有效的。</p>
<p>这些预测概率构筑了作者的检测baseline，作者在各个领域展示了这个方法的功效，如计算机视觉、自然语言处理、自动语义识别任务等。作者也指出，尽管这些预测概率创建了一个一贯有用的basline，但有时效率也会很低，这表明了其具有改进的空间。此后作者贡献了一个比baseline更好的方法(在部分但不是全部任务中)，提供了未来检测的研究思路。这个方法通过评估神经网络输入重构(<strong>input reconstruction</strong>)的质量来判断异常样本。</p>
<p>除了basline的方法，作者另一个贡献性的成果就是标准任务以及评估指标的设计。具体的来说，就是在三个研究领域内，用标准神经网络结构训练充分的大量任务。对于OoD检测，提供OoD的样本(不同的数据集或扭曲的实际输入)参与测试。作者希望其他研究团队在未来继续推动这些任务，并超过本文提出的basline的性能。</p>
<p>总的来说，尽管softmax分类器概率不是一个直接有用的置信度估计，但是用来估计模型的置信度也不是那么悲观。简单的统计来自softmax分布数据就是一个有效的检测OoD的方法，作者用实验进行了展示。这些创造了一个很强的检测错误和OoD的baseline，在未来有改进的空间。</p>
<h2 id="Problem-Formulation-and-Evaluation"><a href="#Problem-Formulation-and-Evaluation" class="headerlink" title="Problem Formulation and Evaluation"></a>Problem Formulation and Evaluation</h2><p>本文关心两个问题。一个是<strong>错误</strong>和<strong>正确</strong>分类的预测。另一个是<strong>In Distribution</strong>和<strong>Out of Distribution</strong>的检测。针对两个问题，作者提出了一个简单的baseline，并使用两组评估参数进行性能评估。作者指出，比较检测器的性能不是简单的使用精度。在检测过程中有两个类，检测器对正类和负类各输出一个打分。如果负类的个数原比正类数目多，那么检测器始终设置预测为负类也会得到很高的精度，但这是误导性的。必须设置具体的打分阈值，这样正例也可能被正确划分，但是这样就需要对<strong>false negatives</strong>和<strong>false positives</strong>进行权衡。</p>
<p>面对这样的问题，本文使用AUROC曲线指标，这也是一个依赖于阈值的性能评估方法。Roc曲线是真正例关于假正率的曲线，此外，AUROC可以被认为是<strong>一个正例比一个反例有更大检测器分值的概率</strong>。比如说，一个随机的正例预测器的AUROC大概是50%,而一个完美的分类器的<br>AUCROC应该是100%。</p>
<p>AUROC回避了阈值选取的问题，而AUPR曲线有时认为含有更多的信息。这是因为当正类和反类有较大的基本比率时AUROC不太理想，而AUPR调节了正反基本比率。因此本文设置AUPR为第二个评估指标。PR曲线刻画了P和R的关系，即查准率和查全率的关系。一个baseline的检测器的AUPR大概和查准率相等，而一个完美的检测器大概是100%的AUPR。这导致，正类的基本比率很大的影响了AUPR，因此检测中需要指定什么类是正例。有鉴于此，本文的正类设为正确分类或正常的样本时作者展示了AUPRs。本文的正类设为错误分类或异常样本时作者展示了面积。把错误分类或异常样本设为正类的方法是将检测器分值乘以负一，然后打上正例的标签。注意：把错误分类和异常样本当成正例不会影响AUROC的值。</p>
<p>在第三部分作者开始了实验并描述了一个简单的baseline，这个baseline使用了神经网络分类器的置信度(即 <strong>maximum softmax probability</strong>)。在第四部分，作者描述了一个方法，它使用额外的、经过训练的辅助模型组件来重构输入。</p>
<h2 id="Softmax-Prediction-Probability-as-a-Baseline"><a href="#Softmax-Prediction-Probability-as-a-Baseline" class="headerlink" title="Softmax Prediction Probability as a Baseline"></a>Softmax Prediction Probability as a Baseline</h2><p>接下来，作者检索最大的softmax预测概率来检测一个样本是否被错分类或是否为OoD。具体来说，本文把测试集中正确分类和错误分类的样本分开，对于每个样本计算其softmax置信度。对于这两个类我们得到了PR和ROC曲线的面积。这些面积总结了不同阈值的二分类器用打分值(置信度)进行区分的能力。“Succ”检测器把正确分类的样本看作正例；“Err”检测器把错误分类的样例看作正例，并把置信度取反作为检测器的打分值。</p>
<p>对于“In”的检测器，正例为In Distribution的样本和正确分类的测试样本。使用softmax置信度作为预测分类的一个分值。而“Out”检测器把OoD的样本作为正类，并使用前面提到的概率的相反数。因为“Succ”、“Err”、“In”、“Out”的AUPRs依赖于正例的比率，作者列出了一个使用基础值的随机检测器能达到的面积。在接下来的结果中，作者列出了错误分类样本的平均预测概率，以展示softmax置信度是一个孤立来看，误导性的信心指数。“Pred.Prob(mean)”列展示了OoD样本也有相同的缺点。</p>
<p>先不考虑标签，作者先从视觉相关的数据集开始实验，然后考虑自然语言处理和自动语义识别中的任务。接下来的所有实验表明，根据Wilcoxon秩和检验，AUROCs与随机基线的不同是有很高的统计显著性的。</p>
<h3 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h3><p>在计算机视觉任务中，作者使用了三个数据集：MNIST,CIFAR-10,CIFAR-100。MNIST是一个手写体数字的数据集，有60000个训练数据和10000个测试数据集;CIFAR-10有10个不同的类，50000个训练集和10000个测试集;CIFAR-100有100个不同的类，50000个训练集和10000个测试集。</p>
<p>由下表(Table 1)，可知正确分类和错误分类的样本是充分可分辨的，其中数字都是百分比。</p>
<img src="/2021/02/13/OoD-Baseline/Table1.jpg" class title="this is table">
<p>接着，作者考虑使用softmax分布去区分OoD和ID。本文把所有测试集样本作为ID，把现实图像和噪声作为OoD。对于CIFAR-10和CIFAR-100，使用了来自SUN数据集的现实图像，包含397个不同的场景。对于MNIST，使用来自三个源的灰度现实图像。其中，Omniglot是手写字母而不是手写数字；notMNIST是打字体的数字；CIFAR-10bw是黑白的CIFAR-10图像。合成的“Gaussian”数据是一个随机正态分布噪声，“Uniform”数据是随机均匀分布噪声。如果必要，图像会被调整大小。</p>
<p>结果如下表(Table 2)所示</p>
<img src="/2021/02/13/OoD-Baseline/Table2.jpg" class title="this is table">
<p>注意到平均预测置信度,即Pred.Prob(mean)大于75%，但如果预测概率单独翻译为信心，那么CIFAR-100的softmax分布应该会更均匀的。这再次表明softmax概率不应该看作是信心的直接表示。幸运的是，OoD的样本和ID的样本在概率预测上有着充分大的差异，这使得成功检测成为可能，并且可以获得较大的PR和ROC曲线面积。</p>
<p>为了可复现性，作者具体的给出了模型的结构。MNIST的分类器有三层，256的神经元宽度，由30轮Adam训练的全连接网络。网络使用了非线性的激活函数（$x\Phi(x)$）,其中$\Phi(x)$是标准正态分布的累积分布函数。作者根据(Hendrycks &amp; Gimpel, 2016c)初始化了权重。对于CIFAR-10和CIFAR-100，本文分别训练了宽度为40和4的剩余网络，轮次为50回合，使用随机梯度下降，使用重启动，使用非线性激活函数，使用标准镜像以及裁剪数据增强。</p>
<h3 id="Natural-Language-Processing"><a href="#Natural-Language-Processing" class="headerlink" title="Natural Language Processing"></a>Natural Language Processing</h3><p>接下来作者介绍了一些自然语言处理方面的任务和使用的架构。</p>
<h4 id="Sentiment-Classification"><a href="#Sentiment-Classification" class="headerlink" title="Sentiment Classification"></a>Sentiment Classification</h4><p>第一个NLP任务是一个二值情感分类问题，使用了IMDB数据集————一个极化电影评论的数据集，有25000个训练集和25000个测试集评论。这个任务让我们可以确定一个由相对较小的数据集训练的分类器是否可以产生信息丰富的softmax分布。这个任务使用一个线性分类器，以维数为50的可训练的随机初始化词向量的平均值作为输入。作者挑出5000个训练集评论，用Adam法训练15轮并早停。下表(Table 3)展示了softmax分布在正确和不正确分类的样本上的不同，因此预测概率使得我们能够可靠的检测哪个样本被正确分类，哪个被错误分类。</p>
<img src="/2021/02/13/OoD-Baseline/Table3.jpg" class title="this is table">
<p>然后作者使用Customer Review(Hu&amp;Liu,2004)和Movie Review(Pang et al.,2002)数据集作为OoD样本，前者有产品的评论而不单单是电影，后者有来自专业影评的片段而不是业余的长篇评论。所有的IMDB测试集样本都作为in-distribution样本，而来自Customer Review和500条和来自Moview Review的1000条测试评论是OoD样本。下表(Table 4)展示了检测结果，前面的Table2有相同的结论。</p>
<img src="/2021/02/13/OoD-Baseline/Table4.jpg" class title="this is table">
<h4 id="Text-Categorization"><a href="#Text-Categorization" class="headerlink" title="Text Categorization"></a>Text Categorization</h4><p>通过文本分类任务，作者希望判断对于相似于ID的OoD,softmax分布是否依然有用。在任务中，分类器被训练来预测他们处理的文本的主题。20 Newgroups(Lang,1995) 数据集中有20个不同的新闻组主题，共20000个文档。The Reuters 8(Lewis et al.,2004)数据集中有8个不同的新闻主题，近8000个故事。The Reuters 52数据集有52个新闻主题，略超过9000个新闻故事。这个数据集的单个主题最多只能有3条故事。</p>
<p>对于20 Newsgroups数据集，作者用20个轮次训练了一个30维词向量上的线性分类器。同时Reuter 8和Retuers 52使用单层神经网络，一袋单词输入，非线性激活函数，全部用Adam法进行优化了5轮。训练在一个主题子集上进行，选出了20 Newsgroups中的5个主题，Reuters 8中的2个主题，Reuters 52中的12个主题，作为OoD的样本。下表(Table 5)展示了这些数据集和结构可以可靠的检测错误分类的主题。</p>
<img src="/2021/02/13/OoD-Baseline/Table5.jpg" class title="this is table">
<p>下表(Table 6)说明了softmax预测概率可以检测出OoD的主题。</p>
<img src="/2021/02/13/OoD-Baseline/Table6.jpg" class title="this is table">
<h4 id="Part-of-Speech-Tagging"><a href="#Part-of-Speech-Tagging" class="headerlink" title="Part-of-Speech Tagging"></a>Part-of-Speech Tagging</h4><p>对新闻热线和社交媒体文本进行词性标注是下一个挑战。本文使用了Wall Street Journal portion of the Penn Treebank (Marcus et al., 1993)数据集，包含45个不同的词性标签。对于社交媒体，作者使用POS-annotated tweets (Gimpel et al., 2011; Owoputi et al.,2013)数据集，包含25个标签。WSJ标注器训练了一个双向长短期记忆递归神经网络(Hochreiter &amp; Schmidhuber, 1997)，共3层，每层128个神经元，并随机初始化词向量，在90%的语料库上进行训练，10轮随机梯度下降，batch size是32。而tweet标注器更加简单：两层神经网络，带有非线性激活函数的，权重初始化根据(Hendrycks &amp;Gimpel, 2016c)，预训练词向量在5600万条tweets语料库上训练(Owoputi et al.,2013)，一个大小为256的隐层，在1000个tweets数据上训练30轮，用Adam法优化，用327条验证集tweets早停。下表(Table 7)是错误检测结果。</p>
<img src="/2021/02/13/OoD-Baseline/Table7.jpg" class title="this is table">
<p>对于OoD的检测，我们用WSJ标注器对tweets以及来自English Web Treebank(Bies et al., 2012)的网络日志数据进行标注。结果为下表(Table 8)。</p>
<img src="/2021/02/13/OoD-Baseline/Table8.jpg" class title="this is table">
<p>因为网络日志数据比起tweets，风格上更接近新闻热线，所以检测一个网络日志数据是OoD更加困难。事实上，由于词性标注是在单词级别上完成的，我们根据单词和上下文特征判断每个单词是否是OoD。考虑到这一点，我们发现tweets的单词更容易成功检测为OoD。</p>
<h3 id="Automatic-Speech-Recognition"><a href="#Automatic-Speech-Recognition" class="headerlink" title="Automatic Speech Recognition"></a>Automatic Speech Recognition</h3><p>本节考虑的任务是使用softmax值去构建整个序列而不是决定一个输入的分类。这个序列预测系统使用一个双向的LSTM(长短期人工神经网络)，这个LSTM具有两层和剪切的非线性激活函数，用RMSProp算法优化了60回合，训练集为80%的TIMIT语料库(Garofolo et al., 1993)。这个LSTM用连接时序分类(CTC)进行训练(Graves et al., 2006)，以预测给定MFCCs、能量、前两个25ms帧情况下的手机序列。当用CTC进行训练的时候，LSTM学会让他的电话标签概率瞬间飙升，而大部分其他的预测为空白符号。这样，softmax的使用就不同于经典的分类问题，并为检测方法提供了独特的测试。</p>
<p>本节不去展示这个系统在正确分类和错误分类样本上的检测性能，因为错误不是二值的而是沿着一系列的编辑距离排列。但是本节可以展示OoD的检测。将TIMIT音频和来自Aurora-2数据集(Hirsch &amp; Pearce, 2000)的真实噪声混合，并将TIMIT音频的音量保持在100%，噪声音量保持在30%，给出平均信噪比为5。人耳仍然可以清晰的听到扬声器，但手机识别器会混淆因为预测的编辑距离增加了一倍以上。更多的OoD样本使用的是来自THCHS-30 dataset(Wang &amp; Zhang,2015)的测试样本，这是一个中文的语料库。下表(Table 9)展示了结果。</p>
<img src="/2021/02/13/OoD-Baseline/Table9.jpg" class title="this is table">
<p>很重要的是，当执行检测的时候，softmax概率被计算而空白符号的logit被忽略。有了空白符号的存在，softmax的分布大部分时间步都以较高置信度预测为空白符号；但若无空白符号，就更容易区分正常和异常的分布。通过这个修改，softmax预测概率就可以检测出OoD。</p>
<h2 id="Abnormality-Detection-with-Auxiliary-Decoders"><a href="#Abnormality-Detection-with-Auxiliary-Decoders" class="headerlink" title="Abnormality Detection with Auxiliary Decoders"></a>Abnormality Detection with Auxiliary Decoders</h2><p>看到了softmax预测概率使异常检测成为可能，作者接下来展示了其他对于检测很有用的信息。为了证明这一点，作者利用学习到的神经网络的内部表征。首先训练一个普通的分类器然后附加一个辅助解码器来重构输入，如下图。</p>
<img src="/2021/02/13/OoD-Baseline/Figure1.jpg" class title="this is figure">
<p>辅助解码器有时可以提高分类性能。译码器和打分器用ID样本一起训练。此后，图中蓝色的层被冻结。然后，在无噪声、有噪声的训练样本上训练红色层，然后红色层的sigmoid的输出代表着输入的正常程度评分。因此，有噪声的样本是异常类，无噪声的样本是正常类，而sigmoid被训练成为输入所属的输出类型。训练完成后就得到一个普通的分类器、一个辅助的解码器和一个被称为<strong>异常模块</strong>的模块。异常模块对检测是有益的，这表明存在可能的研究途径去超越baseline。</p>
<h3 id="TIMIT"><a href="#TIMIT" class="headerlink" title="TIMIT"></a>TIMIT</h3><p>作者使用不同的网络结构重做TIMIT任务，以测试异常模块的性能，并展示这些辅助组件对检测的改进程度。这个系统有3层，1024个神经元宽度，有一个辅助解码器和一个异常模块。该网络以11帧为输入，必须预测中心帧的手机，每帧26个特征。权重根据(Hendrycks &amp; Gimpel, 2016c)来初始化。网络训练20轮次，异常模块训练2轮次。异常模块看到的是无噪声的样本，而负样本则是TIMIT和诸如白噪声、棕噪声(光谱密度和$\frac{1}{f^2}$成比例的噪声)、粉色噪声(光谱密度和$\frac{1}{f}$成比例的噪声)在不同音量下的混合。</p>
<p>可以注意到，异常模块的训练噪声和测试集的噪声不是一个类型。尽管如此，下表(Table 10)展示了把简单的噪声样本看作现实扭曲音频后得到的高效检测结果。</p>
<img src="/2021/02/13/OoD-Baseline/Table10.jpg" class title="this is table">
<p>作者指出，检测异常样本是通过比较干净样本的典型异常模块输出和扭曲样本的输出。这些来自于Aurora-2的噪声以30%的音量加入到TIMIT中。同时THCHS-30也被用作为中文语音数据集。与之前不同的是，THCHS-30是用作训练样本而不是测试集样本，因为全连接网络会充分快速的评估整个训练集。值得一提的是,全连接深度神经网络具有抗噪性(Seltzer et al., 2013),但异常模块仍然可以检测OoD。检测的显著性体现在：网络分类在整个测试集(非核心数据集)上的错误率是29.69%，且扭曲样本的平均分类错误率是30.43%————这和性能显著下降的双向LSTM明显不同。因为分类退化程度很小，softmax统计数据本身不能提供一个有用的OoD检测。而与之相反的是，异常模块提供一个分数去检测不同但相似的样本。在实践中，确定一个样本是否是OoD非常重要，而异常模块是有用的。</p>
<h3 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h3><p>最后，和之前实验相似的，作者训练了一个MNIST分类器，网络有三层，宽度256。本节实验同样使用一个辅助解码器和异常模块而不是仅仅依靠softmax统计。异常样本则是对训练图像进行模糊、旋转或添加高斯噪声。异常模块的收益结果如下表(Table 11)。</p>
<img src="/2021/02/13/OoD-Baseline/Table10.jpg" class title="this is table">
<p>这对比基于softmax预测概率的OoD检测来说，也有效果上的提升。并且即使是非常不同的样本，异常模块也可以进一步提高检测性能。</p>
<h2 id="Discussion-and-Future-Work"><a href="#Discussion-and-Future-Work" class="headerlink" title="Discussion and Future Work"></a>Discussion and Future Work</h2><p>异常模块表明，在某些情况下basline是可以通过利用网络提取的特征打败的，暗示了无数的研究方向。利用<strong>类间方差</strong>可能是未来一个不错的研究思路：如果一个样本和另一个预测类的样本的距离异常远，那么这个样本可能是一个OoD(Giryes et al., 2015)。另一个方法就是把总结一层激活情况的向量输入到RNN中，每一层都有一个向量。这样对于OoD的样本，RNN可以判断出激活模式是异常的。让检测粒度更细也是一个想法：OoD样本是known-unknown还是unknown-unknown？另一个方法是除了检测正确的分类外，还要输出正确检测的概率。作者表示，这些都是改进错误、提高OoD检测性能的一些思路。</p>
<p>作者希望，任何新的检测方法都能在本文研究中选择的各种任务和架构上进行测试。一个基本的展示包括下面的数据集：MNIST,CIFAR,IMDB以及tweets，因为仅针对视觉的展示可能不合适其他的结构或数据集。报告AUPR和AUROC的值非常重要，底层分类器的准确性也很重要，因为一个恒负的分类器在错误检测中会得到一个最大的AUPR(假定错误是正类)。同时，未来的研究不需要使用本文的精确值进行比较。机器学习系统在不断演化，因此没必要把精确的架构和本文的数据集捆绑到一起评估，人们可以简单的选择各种数据集和架构，很可能就和本文一样，然后将他们的检测方法和基于softmax预测概率的检测器进行比较。在OoD检测这个未充分探索的挑战中，作者对试图超越baseline的其他研究者给出了以上建议。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>本文展示了一个softmax预测概率的baseline，可以检测各种架构、数据集上的错误分类样本和OoD样本。然后，本文提出异常模块，这个模块为测试集中正常样本和异常样本的区分提供了较高的分数。异常模块的实验表明，baseline在某些情况下是可以被打败的，这意味着未来是有研究空间的。作者希望其他研究者探索更好地预测异常样本的架构，或者追寻更可靠的检测分类错误和OoD的方法，因为知道一个机器学习系统什么时候失败对我们是非常重要的。</p>
]]></content>
      <categories>
        <category>OoD Detection</category>
      </categories>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>【阅读笔记】 Enhancing the Reliability of Out-of-Distribution Image Detection In Neural Networks</title>
    <url>/2021/02/20/ODIN/</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>本文考虑神经网络中图像的OoD的检测问题。作者提出了ODIN方法，这个方法的好处是不用对训练好的网络进行任何的更改。本文的理论基于两个手段————<strong>temperature scaling</strong>和<strong>input perturbation</strong>。这两个手段可以加大ID和OoD的softmax分布的差异，有助于检测。作者通过一系列的实验证明ODIN的方法对于各种网络结构和数据集都是兼容的，并且性能远好于baseline，可以称得上是一个state-of-the-art的方法。例如，设置网络架构为DenseNet，数据集为CIFAR-10和Tiny-ImageNet，ODIN相比于baseline把<strong>FPR at 95% TPR</strong>从34.7%降低到4.3%。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现代神经网络在训练集和测试集样本来自同一个分布的时候效果很好。但现实世界部署的时候，往往测试集的分布是不受控制的。最近的工作表明，即使是输入不相关的数据，神经网络的预测结果也会偏高。对于分类器来说，遇到没见过的输入时给出一个不确定的反馈非常重要。因此，精确的检测OoD样本在视觉识别任务的实践中非常重要。</p>
<p>一个看上去比较直接的OoD检测方式就是扩大In-Distribution集合和Out-of-Distribution集合的规模。而OoD的数据往往是很有限的，这让再训练变得昂贵且难以处理。此外，为了确保神经网络在准确的给ID进行分类的同时，也能正确的检测出OoD,可能需要很大的神经网络架构，这使得训练过程更加复杂。</p>
<p>Hendrycks &amp; Gimpel提出一个baseline方法检测OoD,且不需要重训练网络。这个方法的提出基于一个观察，那就是训练好的网络倾向于给ID样本一个相对更高的softmax scores。在本文，工作进一步被开展。作者发现，使用temperature scaling在softmax函数中，并且给输入进行小的扰动，即input perturbation，那么ID和OoD的softmax分布就会增大差异。本文展示了，这两个方法可以提高检测性能。比如，对于训练好的DenseNet网络，用CIFAR-10作为ID,TinyImageNet作为OoD，本文的方法把<strong>FPR at 95% TPR</strong>这个指标从34.7%下降到4.3%。本文的主要贡献总结如下：</p>
<ul>
<li>提出一个简单而有效的方法，ODIN(<strong>O</strong>ut-of-<strong>Di</strong>stribution detector for <strong>N</strong>erual networks)，不需要重训练神经网络，且容易在任意现代网络结构中执行。</li>
<li>在先进的网络结构(如DenseNet和Wide ResNet)中，用不同的数据集对作为ID和OoD。实验表明ODIN的方法可以显著的提高检测性能，并且始终比baseline的表现好得多。</li>
<li>结合实证分析了参数的设置如何影响性能，并提供了简单的分析以帮助直观了解本文方法。</li>
</ul>
<p>本文的脉络大概是：第一部分为介绍；第二部分提供必要的定义和问题陈述；第三部分介绍ODIN方法；第四部分展示性能结果；第五部分实验性的分析ODIN方法并进行评估；第六部分总结相关工作和未来的方向；第七部分总结全文。</p>
<h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>本文中，作者考虑了在训练好的神经网络中区分ID和OoD图片输入的问题。令$P_{\pmb{X}}$和$Q_{\pmb{X}}$表示定义在空间$\chi$上的两个不同的数据分布。假定神经网络$\pmb{f}$的训练数据是抽样于$P_{\pmb{X}}$的，那么$P_{\pmb{X}}$就成为In-Distribution，而与之不同的$Q_{\pmb{X}}$就是Out-of-Distribution。在测试中，我们从一个混合分布$P_{\pmb{X}\times Z}$抽取新的图像，其中条件概率分布$P_{\pmb{X}|Z=0}=P_{\pmb{X}}$表示In-Distribution, 而$P_{\pmb{X}|Z=1}=Q_{\pmb{X}}$表示Out-of-Distribution。我们考虑下面的问题：给定一个从混合分布$P_{\pmb{X}\times Z}$中抽取的图像$\pmb{X}$，如何分辨这个图像是否来自于$P_{\pmb{X}}$？</p>
<p>在本文中，作者关注OoD图像的检测。然而，把一个ID图像正确分类也同样重要。但这个比较容易，因为一旦检测出图像不是OoD,就可以直接把原始图像丢进网络中就可以分类。因为，作者不改变神经网络对于ID图像的预测结果，仅仅聚焦于提高OoD图像的检测性能。</p>
<h2 id="ODIN-Out-of-Distribution-detector"><a href="#ODIN-Out-of-Distribution-detector" class="headerlink" title="ODIN: Out-of-Distribution detector"></a>ODIN: Out-of-Distribution detector</h2><p>在本节，作者提出了ODIN方法，来检测OoD样本。检测器由两个组件构成：temperature scaling 和input preprocessing。接下来是两个组件的细节。</p>
<h3 id="Temperature-Scaling"><a href="#Temperature-Scaling" class="headerlink" title="Temperature Scaling"></a>Temperature Scaling</h3><p>假定神经网络$\pmb{f}=(f_1,…,f_N)$是N类分类器。对于每个输入$\pmb{x}$，神经网络的输出标签$\hat{y}(\pmb{x})=arg\ max_i\ S_i(\pmb{x};T)$,其中<br>\begin{equation}<br>S_i(\pmb{x};T)=\frac{exp(f_i(\pmb{x})/T)}{\sum_{j=1}^{N}exp(f_j(\pmb{x})/T)}<br>\end{equation}<br>$T\in R^{+}$是temperature scaling的参数，训练时设置为1。对于给定的输入$\pmb{x}$,我们称softmax向量中最大的概率值，即$S_{\hat{y}}(\pmb{x};T)=max_i\ S_i(\pmb{x};T)$,为<strong>softmax score</strong>。本文把$S_{\hat{y}}(\pmb{x};T)$简写为$S(\pmb{x};T)$。之前已经有工作使用了temperature scaling来提取神经网络的知识，并校准分类任务的预测置信度。我们将看到，使用temperature scaling 可以分离ID和OoD的softmax scores，让检测更有效。</p>
<h3 id="Input-Preprocessing"><a href="#Input-Preprocessing" class="headerlink" title="Input Preprocessing"></a>Input Preprocessing</h3><p>除了temperature scaling，本文通过添加微扰对输入进行预处理：<br>\begin{equation}<br>\tilde{\pmb{x}}=\pmb{x}-\epsilon sign(-\nabla_{\pmb{x}}log\ S_{\hat{y}}(\pmb{x};T))<br>\end{equation}<br>其中$\epsilon$是控制扰动大小的参数。这个方法是受对抗样本的启发(即在对抗样本工作中，添加小的扰动，降低正样本的softmax score从而迫使网络做出错误预测)。而本文目标和设置刚好相反。本文旨在对任意输入(不需要类标签)都增加softmax score。之后将看到，微扰对ID的影响大于OoD的影响，使得它们更加分离。注意到，对交叉熵损失梯度(相对于输入)进行反向传播，很容易计算微扰。</p>
<h3 id="Out-of-Distribution-detector"><a href="#Out-of-Distribution-detector" class="headerlink" title="Out-of-Distribution detector"></a>Out-of-Distribution detector</h3><p>检测器结合了上述两个组件。对于每个图像$\pmb{x}$, 首先用公式2计算预处理后的$\tilde{\pmb{x}}$。然后把预处理后的$\tilde{\pmb{x}}$丢入网络，计算修正后的softmax score$S(\pmb{x};T)$。然后把score和阈值$\delta$比较。如果大于阈值则判定为ID，否则判定为OoD。OoD检测器的数学描述如下：<br>\begin{equation}<br>g(\pmb{x};\delta,T,\epsilon)=<br>\begin{cases}<br>1&amp; max_i\ p(\tilde{\pmb{x}};T) \leq \delta \\<br>0&amp; \text{otherwise}<br>\end{cases}<br>\end{equation}<br>设置参数$T$、$\epsilon$和$\delta$为合适的值，使得TPR为95%。</p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><p>本节，作者在几个CV的benchmark数据集上展示了ODIN方法的性能。实验完全用PyTorch框架编写，代码是开源的以方便复现。</p>
<h3 id="Training-setup"><a href="#Training-setup" class="headerlink" title="Training setup"></a>Training setup</h3><h4 id="Architectures-and-training-configuration"><a href="#Architectures-and-training-configuration" class="headerlink" title="Architectures and training configuration"></a>Architectures and training configuration</h4><p>本文采用两个state-of-the-art的神经网络架构，分别为DenseNet和Wide ResNet。对于DenseNet，我们的模型设置为：层数$L=100$,growth rate $k=12$(Dense-BC),dropout rate=0。对于Wide ResNet，层数为28，宽度10，dropout rate为0。神经网络的超参数设置和原始的Wide ResNet (Zagoruyko &amp; Komodakis, 2016) and<br>DenseNet (Huang et al., 2016)实现完全相同。所有的网络都用带牛顿动量的SGD法(Duchi et al., 2011; Kingma &amp; Ba, 2014)优化。具体来说，作者训练Dense-BC轮次为300，batch size为64，momentum为0.9；训练Wide ResNet轮次为200，batch size为128，momentum为0.9。学习率起始为0.1，当训练进行到50%和75%时，再相对降低10倍。</p>
<h4 id="Accuracy-of-pre-trained-networks"><a href="#Accuracy-of-pre-trained-networks" class="headerlink" title="Accuracy of pre-trained networks"></a>Accuracy of pre-trained networks</h4><p>两个网络结构的训练集都是CIFAR-10和CIFAR-100。CIFAR-10和CIFAR-100分别有10个类和100个类，都包括50000个训练集和10000个测试集。在CIFAR数据集上的测试错误率如下表(Table 1)：</p>
<img src="/2021/02/20/ODIN/Table1.jpg" class title="this is table">
<h3 id="Out-of-Distribution-Datasets"><a href="#Out-of-Distribution-Datasets" class="headerlink" title="Out-of-Distribution Datasets"></a>Out-of-Distribution Datasets</h3><p>在测试阶段，来自CIFAR-10(以及CIFAR-100)的图像数据集被看作是In-Distribution样本，对于OoD样本，按照(Hendrycks<br>&amp; Gimpel, 2017)的设置，测试了几个不同的自然图像数据集和合成噪声数据集。本文考虑了如下OoD测试数据集。</p>
<ul>
<li><p><strong>TinyImageNet</strong>  本数据集是 ImageNet images (Deng et al., 2009)的子集，包含10000个测试图像，200个类型。实验中构造两个数据集，crop版本和resize版本，方法分别为随机裁剪$32\times32$大小的子图、降像素采样至$32\times32$大小的子图。</p>
</li>
<li><p><strong>LSUN</strong>  本数据集为Large-scale Scene UNderstanding数据集，有10000个测试集图像，10个类，比如卧室、厨房、客厅。和TinyImageNet一样，构造两个数据集，分别为crop版本和resize版本。</p>
</li>
<li><p><strong>Gaussian Noise</strong>  本数据集为合成高斯噪声，包含10000个随机的二维高斯噪声图像，且RGB三个信道的值都从各自的独立同分布的高斯分布中采样，均值为0.5，方差为单位大小。本实验把像素映射到[0,1]区间。</p>
</li>
<li><p><strong>Uniform Noise</strong>  本数据集为合成均匀分布噪声，包含10000个图像，每个像素点的RGB都独立的、同等的从一个[0,1]均匀分布中采样。</p>
</li>
</ul>
<p>对于超参数调优，使用iSUN(Xu et al., 2015)作为<strong>验证集</strong>。此数据集和前面四个测试集是独立的，由自然场景图像组成，包含8925个图像，每个图像也被降像素采样到$32\times 32$的大小。</p>
<h3 id="Evaluation-metrics"><a href="#Evaluation-metrics" class="headerlink" title="Evaluation metrics"></a>Evaluation metrics</h3><p>本文采用下面的四个指标来度量一个神经网络区分ID和OoD的性能。</p>
<ul>
<li><strong>FPR at 95% TPR</strong>  即TPR为95%时，负样本(OoD样本)识别为正样本(ID样本)的概率</li>
<li><strong>Detection Error</strong>  $P_e$为TPR为95%时的错误分类概率。具体可以定义为$P_e=0.5(1-TPR)+0.5FPR$，假定正例和反例在测试集中出现概率一样大。</li>
<li><strong>AUROC</strong>  即ROC曲线的面积，是一个依赖于阈值的指标。本指标刻画了TPR和FPR的关系。可以看作是正例比反例能获得更高的detection score的概率。一个完美的检测器有着100%的AUROC。</li>
<li><strong>AUPR</strong> 即PR曲线的面积，也是一个依赖于阈值的指标。具体来说，P就是$TP/(TP+FP)$,R就是$TP/(TP+FN)$，PR曲线就是P和R的关系图。而下表（Table 2）中，AUPR-In和AUPR-Out是当ID和OoD分别指定为正例时，PR曲线的面积。</li>
</ul>
<img src="/2021/02/20/ODIN/Table2.jpg" class title="this is table">
<h3 id="Experimental-results"><a href="#Experimental-results" class="headerlink" title="Experimental results"></a>Experimental results</h3><h4 id="Comparison-with-baseline"><a href="#Comparison-with-baseline" class="headerlink" title="Comparison with baseline"></a>Comparison with baseline</h4><p>下图(Figure 1)展示了DenseNet-BC-100的ROC曲线，测试集中正例为CIFAR-10,负例为TinyImageNet。红色的曲线对应于baseline方法，蓝色的曲线对应于ODIN的方法。可以观察到两个曲线有一个比较大的gap。比如，当TPR=95%时，FPR从34%(baseline)降低到4.2%(ODIN)。</p>
<img src="/2021/02/20/ODIN/Figure1.jpg" class title="this is figure">
<h4 id="Hyperparameters"><a href="#Hyperparameters" class="headerlink" title="Hyperparameters"></a>Hyperparameters</h4><p>本文使用单独的OoD验证集用于调参。对于T参数，在1、2、5、10、20、50、100、200、500、1000中选择。对于微扰程度$\epsilon$，从0到0.004中等距选取。调节参数到合适的值，使得验证集的FPR at 95% TPR指标最小。</p>
<h4 id="Main-result"><a href="#Main-result" class="headerlink" title="Main result"></a>Main result</h4><p>主要的结果总结在之前的Table 2中。验证集是iSUN(Xu et al., 2015)。T都设置为1000。对于DenseNet，对CIFAR-10使用$\epsilon=0.0014$，对CIFAR-100使用$\epsilon=0.002$。在下一节Discussions中提供参数影响的细节。对于每一对ID和OoD数据集，实验都记录了baseline和ODIN的性能，从Table 2中可以看到在所有的数据对中，ODIN的性能相比baseline都有显著提升。</p>
<h4 id="Parameter-transferability"><a href="#Parameter-transferability" class="headerlink" title="Parameter transferability"></a>Parameter transferability</h4><p>下表(Table 3)展示了，在单个验证集上进行参数调节是具有泛化性的。具体来说，使用单个OoD数据集作为验证集来调参，然后用剩余的OoD测试集进行评估。每次(不同的OoD验证集)的结果都是相似，这说明了本文的方法对于验证集的选取不太敏感。</p>
<img src="/2021/02/20/ODIN/Table3.jpg" class title="this is table">
<p>注：神经网络是在CIFAR-10上预训练的。</p>
<h4 id="Data-distributional-distance-vs-detection-performance"><a href="#Data-distributional-distance-vs-detection-performance" class="headerlink" title="Data distributional distance vs. detection performance"></a>Data distributional distance vs. detection performance</h4><p>为了度量ID和OoD数据集的统计距离，本文采用了一个广泛使用的指标，即<strong>Maximum Mean Discrepancy</strong>(MMD)。使用高斯RBF核。具体来说，给定两个图像集合，$V={v_1,…,v_m}$、$W={w_1,…,w_m}$。V和Q最大平均误差MMD定义如下：<br>\begin{equation}<br>\widehat{MMD}^2(V,W)=\frac{1}{\tbinom{m}{2}}\sum\limits_{i\neq j}k(v_i,v_j)+\frac{1}{\tbinom{m}{2}}\sum\limits_{i\neq j}k(w_i,w_j)-\frac{2}{\tbinom{m}{2}}\sum\limits_{i\neq j}k(v_i,v_j)<br>\end{equation}</p>
<p>其中$k(.,.)$为Gaussian RBF kernel。比如$k(x,x’)=exp(-\frac{||x-x’||_2^2}{2\sigma^2})$。本文使用和Sutherland et al.(2016)相同的方法去选择$\sigma$。此时$2\sigma^2$设置为集合$V\cup W$中所有图像间欧氏距离的均值。</p>
<p>下图(Figure 2)展示了ODIN的性能如何随着ID和OoD之间的MMD距离变化而变化。数据集(x轴)是按MMD距离降序排序的。网络在CIFAR-100上训练，OoD数据集从1到5分别为：LSUN(cop)、TinyImageNet(crop)、LSUN(resize)、iSUN(resize)、TinyImageNet(resize)。</p>
<img src="/2021/02/20/ODIN/Figure2.jpg" class title="this is figure">
<p>可以发现两个有趣的结论：</p>
<ul>
<li>裁剪会使得数据集和CIFAR-100的MMD距离变得更大，可能是因为裁剪后图像只包含局部信息，因此与CIFAR-100的区别加大，而resized后的图像还包含全局的信息，因此和CIFAR-100中图像相对相似。</li>
<li>MMD距离和检测性能是负相关的。这表明当ID和OoD图像相似度时候，检测任务会变得困难。</li>
</ul>
<h2 id="Discussions"><a href="#Discussions" class="headerlink" title="Discussions"></a>Discussions</h2><h3 id="Analysis-on-temperature-scaling"><a href="#Analysis-on-temperature-scaling" class="headerlink" title="Analysis on temperature scaling"></a>Analysis on temperature scaling</h3><p>在本小节，作者分析了temperature scaling方法的有效性。如下图(Figure 3)的(a)(b)，可以观察到足够大的T可以获得更好的检测性能，当T过大的时候，这种正面影响变弱。</p>
<img src="/2021/02/20/ODIN/Figure3.jpg" class title="this is figure">
<p>为了深入原理，作者对softmax score进行泰勒展开，假设T可以充分大，详细推导如下：<br>\begin{equation}<br>\begin{aligned}<br>S_{\hat{y}}(\pmb{x};T)&amp;=\frac{exp(f_{\hat{y}}(\pmb{x})/T)}{\sum_{i=1}^{N}exp(f_i(\pmb{x})/T)}\\<br>&amp;=\frac{1}{\sum_{i=1}^{N}exp(\frac{f_i(\pmb{x})-f_{\hat{y}}(\pmb{x})}{T})}\\<br>&amp;=\frac{1}{\sum_{i=1}^{N}[1+\frac{f_i(\pmb{x})-f_{\hat{y}}(\pmb{x})}{T}+\frac{1}{2!}\frac{(f_i(\pmb{x})-f_{\hat{y}}(\pmb{x}))^2}{T^2}+o(\frac{1}{T^2})]}\\<br>&amp;\approx\frac{1}{N-\frac{1}{T}\sum_{i=1}^{N}[f_{\hat{y}}(\pmb{x})-f_i(\pmb{x})]+\frac{1}{2T^2}\sum_{i=1}^N[f_i(\pmb{x})-f_{\hat{y}}(\pmb{x})]^2}\\<br>&amp;<br>\end{aligned}<br>\end{equation}</p>
<p>最后结果忽略了第三阶以及更高的项。为了简化表示，假定：<br>\begin{equation}<br>\begin{aligned}<br>&amp;U_1(\pmb{x})=\frac{1}{N-1}\sum\limits_{i\neq\hat{y}}[f_{\hat{y}}(\pmb{x})-f_i(\pmb{x})] \\<br>and\ \ \ \ \ &amp;U_2(\pmb{x})=\frac{1}{N-1} \sum\limits_{i\neq\hat{y}}[f_{\hat{y}}(\pmb{x})-f_i(\pmb{x})]^2<br>\end{aligned}<br>\end{equation}</p>
<p>接着，作者对<strong>$U_1$和$U_2$进行了解释</strong>。根据定义，$U_1$度量了最大的logits和其余logits之间的偏差。而$U_2$还度量了其余小logits之间的偏差。个人的理解是因为$U_2$的形式类似于方差，因为可以在括号内加上一个logits平均值再减去一个logits平均值，然后用完全平方公式展开，可得到条件正相关于方差的形式(即$U_1$固定，$U_2$正相关于其他小logits间的方差)。在本文的附录D中有详细推导，此处从略。下图(Figure 5)的(a)展示了每个OoD和ID的$U1$的分布概率密度，ID是红色的。</p>
<img src="/2021/02/20/ODIN/Figure5.jpg" class title="this is figure">
<p>我们观察到神经网络使用ID输入时，最大的logits输入和其余logits的偏差更大，即$U_1$更大。这可能是因为神经网络倾向于对ID给出更高的置信度。</p>
<p>此外，Figure 5的(b)展示了$U_2$关于$U_1$的条件期望$E[U_2|U_1]$。每个曲线对应一个数据集，红色的是ID数据集CIFAR-10。可以观察到红色的曲线始终在其他曲线之上，这表明当两个图像的$U_1$接近时，ID图像倾向于有一个更大$U_2$。换句话说，对于ID图像，去掉最大的logits，剩余的小logits倾向于更加分散。当ID中某些类特征相似而其他类间显著不同时可能会发生上述情况。为了解释这一点，可以看Figure 5 的(f)(g)。(f)图展示了在DenseNet网络下，用CIFAR-10训练，然后输入一个来自CIFAR-10的狗的图像，得到每个类的输出logits。(g)图则是用TinyImageNet(crop)作为ID，输入一个青蛙。对于狗的图像，可以观察到标签狗和猫的预测logits非常接近但猫和卡车的输出差异就很大。这可能是因为狗和猫很相似但它们和卡车有很大差异。对于TinyImageNet(crop)数据集，除了最大的logits，其他的几个logits输出都比较接近，因此始终有一个较小$U_2$。</p>
<p>下面，作者探讨了<strong>T的影响</strong>。为了确定选取一个较大的T是有用的，作者首先重写公式3的softmax score函数为$S\propto (U_1-U_2/2T)/T$。因此softmax score很大程度上由$U_1和U_2/2T$来决定。如之前所推论的，$S \propto U_1$且ID的$U_1$较大,因此$U_1$正面促进了ID的$S$较大这个结果；而$S \propto -U_2$,而ID的$U_2$相对于OoD也更大，故$U_2$负面削弱了ID的$S$较大这个结果。因此可以选取一个较大的temperature来弥补$U_2/T$对检测性能的负面影响。这样，In-Distribution和Out-of-Distribution的softmax score就更加分离。最后，如果$T$充分的大，softmax score几乎只被$U_1$所影响————这解释了Figure 3(a)(b)的现象，也就是为什么$T$太大了后(eg.,T&gt;100)性能不再提升。在附录C中作者提供了规范的证明，来展示当T无穷大的时候检测误差将收敛为常数。可以详见作者原文，本笔记从略。</p>
<h3 id="Analysis-on-Input-Preprocessing"><a href="#Analysis-on-Input-Preprocessing" class="headerlink" title="Analysis on Input Preprocessing"></a>Analysis on Input Preprocessing</h3><p>正如前文所说，使用temperture scaling方法对于检测性能提高是很有效的。然而当T很大的时候，性能就不再继续提升了。为了进一步提高性能，作者补充了一个input preprocessing的方法。正如下图(Figure 4)所展示的，使用合适的微扰程度$\epsilon$后，检测性能得到了极大的提高(T=1000)。</p>
<img src="/2021/02/20/ODIN/Figure4.jpg" class title="this is figure">
<p>本小节提供了一些直观的理解。首先看到log-softmax函数对于微扰图像$\hat{x}$的一阶泰勒展开：<br>\begin{equation}<br>log\ S_{\hat{y}}(\tilde{\pmb{x}};T)=log\ S_{\hat{y}}(\pmb{x};T)+\epsilon ||\nabla_{\pmb{x}}log\ S_{\hat{y}}(\pmb{x};T)||_1+o(\epsilon)<br>\end{equation}<br>其中 $x$为原始输入。</p>
<p>首先看<strong>梯度的影响</strong>。Figure 5的(c)展示了$||\nabla_{\pmb{x}}log\ S_{\hat{y}}(\pmb{x};T)||_1$的分布，这是log-softmax关于$x$梯度的一范式。一个突出的现象就是，相比大多数OoD的图像，CIFAR-10的图像倾向于有一个更大的梯度范式的值。为了进一步弄清梯度范式对softmax score的影响，可以看到Figure 5的(d)是梯度范式关于S的条件数学期望$E[||\nabla_{\pmb{x}}log\ S(\pmb{x};T)||_1|S]$。可以发现当softmax score相同的时候，ID相比OoD的$||\nabla_{\pmb{x}}log\ S(\pmb{x};T)||$更大。</p>
<p>下图(Figure 6)解释了梯度范式的影响。</p>
<img src="/2021/02/20/ODIN/Figure6.jpg" class title="this is figure">
<p>假定图像$\pmb{x}_1$(蓝色)是ID，图像$\pmb{x}_2$(红色)是OoD，这两者有接近的softmax score。但经过input processing，因为ID的梯度的一范式较大，故微扰后ID有更大的softmax score了。这样，ID和OoD的图像就进一步的分离开(Figure 5的(e)也能看到类似的现象)。</p>
<p>然后看<strong>$\epsilon$的影响</strong>。当$\epsilon$充分小的时候，添加微扰不会有什么影响。然而当$\epsilon$不可忽略时，ID和OoD的gap就会受到$||\nabla_{\pmb{x}}log\ S(\pmb{x};T)||$的影响。本文的观察和(Szegedy et al., 2014; Goodfellow et al., 2015; Moosavi-<br>Dezfooli et al., 2017)的现象一致，都表明：<strong>给定ID图像小的微扰，softmax scores倾向于显著改变</strong>。值得注意的是，使用一个非常大的$\epsilon$会导致性能下降，如Figure 4。这可能是因为，当$\epsilon$比较大的时候，泰勒展开的第二阶和更高阶项不再可以忽略。</p>
<h2 id="Related-works-and-future-directions"><a href="#Related-works-and-future-directions" class="headerlink" title="Related works and future directions"></a>Related works and future directions</h2><p>OoD样本的检测问题在低维空间上已经在各种背景下被深入研究(可以参考Pimentel et al. (2014)的调查)。传统的方法，例如<strong>密度估计、最邻近、聚类分析</strong>都被广泛的使用(Chow, 1970; Vincent &amp; Bengio, 2003; Ghoting et al., 2008; Devroye et al.,2013)。密度估计方法使用概率模型来估计ID,如果一个测试样本在低密度区域，那么就被识别为一个OoD;聚类方法基于统计距离，如果一个测试样本距离它的邻居很远，那么就被识别为OoD。尽管低维空间中方法很多，但不幸的是在高维空间(例如图像空间)中这些方法都不太可靠(Wasserman, 2006; Theis et al., 2015)。近些年，基于深度模型的OoD检测器被提出了。Schlegl et al. (2017)训练了一个生成式的对抗网络来检测临床场景中的OoD。Sabokrou et al. (2016)训练了一个卷积网络来检测异常的场景。Andrews et al. (2016)采用了迁移表征学习来进行异常检测。这些工作都需要扩充或修改神经网络架构。在最近的一个工作中(也就是baseline那篇文章)，Hendrycks &amp; Gimpel (2017)发现了预训练好的神经网络对于OoD样本的分类是过度自信的，这限制了检测的性能。<strong>本文旨在提高OoD样本的检测性能，而不需要修改已有的训练好的网络模型</strong>。</p>
<p>我们的方法利用了下面两个有趣的现象来提高ID和OoD的区分：(1)对于ID图像，现代神经网络倾向于产生类间方差较大的输出；(2)对于ID图像，神经网络往往会有一个较大的log-softmax score的梯度范式。作者相信，更好地理解这些现象就可以更加理解这个问题。</p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>在本文中，作者提出了一个简单而有效的方法去检测神经网络中OoD的样本。这个方法不需要重训练神经网络，并且相比于Hendrycks &amp; Gimpel (2017)的baseline方法，性能在各个网络架构、各个数据集上都有很大改进。本文实证的分析了不同参数设置下的方法，并且提供了一些见解。未来的工作可以是探索本文的方法在其他领域的应用，如语音识别和自然语言处理等等。</p>
]]></content>
      <categories>
        <category>OoD Detection</category>
      </categories>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 地球的故事复习笔记</title>
    <url>/2021/06/14/earthStory/</url>
    <content><![CDATA[<h2 id="宇宙大爆炸"><a href="#宇宙大爆炸" class="headerlink" title="宇宙大爆炸"></a>宇宙大爆炸</h2><ul>
<li>宇宙可观测的范围：直径约930亿光年</li>
<li>奥伯斯佯谬：如果宇宙是无限稳态的，夜晚的天空会像白天一样明亮<ul>
<li>解释1：因为宇宙有黑暗星体、尘埃和气体阻隔；但这些最终会加热并发出自己的光</li>
<li>解释2：宇宙是有限的；但这样宇宙会坍塌，边缘星体会被拉向内部</li>
<li>猜想：宇宙大爆炸模型：模型是有限的，正在膨胀的；可以解释奥伯斯佯谬</li>
</ul>
</li>
<li>电磁辐射——波粒二象性<ul>
<li>电磁波的能量传输：波有特定波长，与频率成反比</li>
<li>辐射表现为光子流：能量是$E=hf$，短波能量高</li>
</ul>
</li>
<li>元素的特征谱线<ul>
<li>元素电子跃迁会吸收或释放特定波长的光</li>
<li>恒星会发出不同的（连续）波长的电磁辐射</li>
<li>恒星外层大气中低温气体吸收特定光子，导致光谱产生吸收谱线（暗谱线）</li>
<li>通过特征谱线，可以判定是什么元素</li>
<li>通过光的强度，可以计算出该元素的浓度</li>
<li>通过太阳光可以探测太阳光球层的成分</li>
</ul>
</li>
<li>红移<ul>
<li>其他星系的光谱也有暗谱线</li>
<li>这些光谱的暗线的相对分布类似，说明各星系含有的元素一样</li>
<li>越远的星系，暗线整体红移，说明越远的星系以越大的速度远离我们（多普勒效应）</li>
<li>证明了宇宙正在膨胀</li>
</ul>
</li>
<li>测量星体和地球的距离<ul>
<li>三角测量法：只适合测量星系中近距离的天体，不适合确定宇宙的膨胀</li>
<li>标准烛光法：距离越远，能力越分散，亮度越低</li>
<li>大小和亮度法：测量最遥远的天体</li>
</ul>
</li>
<li>哈勃定律：$v=HL$   <ul>
<li>H是哈勃常数，也是宇宙年龄的倒数。因为宇宙大爆炸时速度快的星体，现在离我们会更远。</li>
<li>所有的星体都在远离不代表我们是宇宙的中心，因为远离是相对的位置关系</li>
<li>速度可以由红移确定，距离由标准烛光法和星系大小确定</li>
<li>计算出哈勃常数，从而得到宇宙的年龄为137亿年</li>
</ul>
</li>
<li>宇宙大爆炸的证据<ul>
<li>星系的光谱红移</li>
<li>宇宙背景辐射（黑体辐射）</li>
<li>宇宙中的H/He比值</li>
</ul>
</li>
<li>黑体辐射<ul>
<li>黑体指的是入射电磁波吸收率100%，但仍要对外辐射</li>
<li>宇宙各方向有强度不变的背景微波辐射，大约是3K</li>
</ul>
</li>
<li>宇宙的组成：73%的暗能量、23%的暗物质、4%的原子</li>
</ul>
<h2 id="元素起源"><a href="#元素起源" class="headerlink" title="元素起源"></a>元素起源</h2><ul>
<li>地球陆壳元素丰度排序：O、Si、Al、Fe、Ca</li>
<li>地球上元素丰度排序：Fe、O、Si、Mg、S、Ni、Ca、Al</li>
<li>太阳中元素丰度排序：H、He、O（Fe含量不低）</li>
<li>原子结构：原子核、质子、中子、电子<ul>
<li>质量看原子核</li>
<li>大小看电子云大小</li>
<li>上标质量数，下标质子数</li>
</ul>
</li>
<li>四种基本力： 引力、电磁力、弱力、强力。<ul>
<li>强力和电磁力使原子稳定。</li>
<li>核素表的稳定带：强力可以把原子核的质子和中子稳定结合在一起</li>
<li>核素表不稳定的区域会发生核反应，例如电子捕获把质子变中子、$\beta$衰变把中子转化为质子和电子、$\alpha$衰变放出He、裂变等</li>
</ul>
</li>
<li>同位素：质子数相同</li>
<li>同重核素：质量数相同</li>
<li>质能方程：$E=mc^2$</li>
<li>质量陷阱：没有质量数是5和8的核素<ul>
<li>宇宙大爆炸形成了大部分氢氦，和少量锂铍硼</li>
<li>宇宙中的H/He质量比约为2.5</li>
<li>H和He占宇宙物质质量的99%以上</li>
</ul>
</li>
<li>核聚变只能到56Fe<ul>
<li>结合能最高点，在此前放热，此后吸热</li>
<li>更重的核素形成靠的是超新星爆发</li>
<li>星系中元素的分布也受超新星爆发影响</li>
</ul>
</li>
<li>恒星越大，合成元素越多，恒星寿命越短；太阳是质量小的恒星，可以由很多元素组成但不形成重元素。</li>
<li>r-过程：快中子捕获</li>
<li>s-过程：慢中子捕获</li>
<li>p-过程：如质子捕获</li>
<li>这些过程的证据<ul>
<li>恒星燃烧的唯一能量来源</li>
<li>超新星爆发已被观测</li>
<li>元素相对丰度计算与观测结果相对应</li>
<li>超新星爆发遗迹中观察到锝的吸收线</li>
<li>太阳系物质中短寿期放射性核素证据</li>
</ul>
</li>
</ul>
<h2 id="矿物和有机分子形成"><a href="#矿物和有机分子形成" class="headerlink" title="矿物和有机分子形成"></a>矿物和有机分子形成</h2><ul>
<li>稳定分子形成的条件<ul>
<li>原子的电子层排满达到电荷平衡（离子键、共价键）</li>
<li>原子间结合大小适宜</li>
</ul>
</li>
<li>分子大小<ul>
<li>电子层多的原子大</li>
<li>同电子层的原子，正电荷数越大，原子越小</li>
<li>阴离子比阳离子大</li>
</ul>
</li>
<li>矿物结构取决于阴离子排列方式和阳离子如何填充到阴离子之间</li>
<li>两类分子：无机和有机<ul>
<li>无机分子构成大多数行星物质，形成矿物</li>
<li>矿物是固态的天然无机物，有对称结构</li>
<li>有机分子含有C-H键</li>
<li>矿物对宜居性很重要</li>
</ul>
</li>
<li>地球化学亲和力对物质分类<ul>
<li>亲气：H、He、N、惰性气体</li>
<li>亲石：碱金属、碱土金属、卤族元素、B、O、Al、Si、Ti、Cr、Mn等</li>
<li>亲铜：Cu、Zn、Ga、Ag、Cd、Pb等</li>
<li>亲铁：Fe、Co、Ni等</li>
</ul>
</li>
<li>硅氧四面体<ul>
<li>岛装硅酸盐：橄榄石($[Fe,Mg]_2SiO_4$)</li>
<li>单链硅酸盐：辉石($[Ca,Mg,Fe^{+2}]_2SiO_4$)</li>
<li>双链硅酸盐：角闪石(有$Si_4O_{11}$)</li>
<li>层状硅酸盐：云母(有$Si_2O_5$)</li>
<li>架状硅酸盐：长石($KAlSi_3O_8$)、石英（$SiO_2$）</li>
</ul>
</li>
<li>矿物的密度<ul>
<li>密度决定于原子核粒子平均数和原子排列的紧密程度</li>
<li>通过密度可以推测化学组成</li>
<li>月球岩浆洋的分异因为斜长石密度差异</li>
</ul>
</li>
<li>物质的状态：固、液、气、等离子</li>
<li>矿物的密度和挥发性对行星形成很重要<ul>
<li>行星内部圈层结构</li>
<li>太阳系内物质的分布</li>
</ul>
</li>
<li>与生命有关的四种有机分子：碳水化合物、脂肪、蛋白质、核酸</li>
</ul>
<h2 id="太阳系起源"><a href="#太阳系起源" class="headerlink" title="太阳系起源"></a>太阳系起源</h2><ul>
<li>太阳和地球的年龄：45.6亿年</li>
<li>八（九）大行星：水、金、地、火、木、土、天王、海王、（冥王）</li>
<li>太阳系的规律<ul>
<li>所有行星都接近黄道面</li>
<li>公转方向相同</li>
<li>金星自转方向是和其他七大行星反的</li>
<li>波得定律：行星离太阳的距离大约是前一行星距离的1.7倍——预言了天王星和谷神星轨道位置</li>
<li>内行星比较小，外行星比较大</li>
<li>行星质量排序：木、土、海王、天王、地、金、火、水</li>
<li>行星密度：地、水、金、火、海王、木、天王、土</li>
</ul>
</li>
<li>碳质球粒陨石和太阳有着相似的化学成分</li>
<li>球粒陨石和地球有相同的年龄，主要金属元素是Mg、Si、Fe</li>
<li>太阳系物质组成<ul>
<li>外太阳系行星主要是冰和气体</li>
<li>内太阳系行星主要是岩石和金属</li>
<li>分子的挥发性差异，距离太阳越远，温度越低</li>
<li>内太阳系行星主要是普通球粒陨石，相比于碳质球粒陨石亏挥发性元素</li>
</ul>
</li>
<li>太阳、球粒陨石元素相对丰度受控于<ul>
<li>元素在太阳系中的丰度</li>
<li>分子的挥发性</li>
</ul>
</li>
<li>K/U比 <ul>
<li>K挥发性比U大，其他性质类似，因此可以衡量挥发性</li>
<li>越远离太阳，比值越大</li>
<li>月球K/U比非常小（比内太阳系行星小），因为月球是大撞击过程形成，丢失了挥发性元素</li>
</ul>
</li>
<li>类地行星：水星、金星、地球、火星</li>
<li>类木行星：木星、土星、海王星</li>
<li>太阳系起源小节<ul>
<li>短寿命的超新星生成并分散各种元素</li>
<li>在星云中形成有机无机分子</li>
<li>长寿的太阳系在这些恒星出生地中形成</li>
</ul>
</li>
</ul>
<h2 id="定年"><a href="#定年" class="headerlink" title="定年"></a>定年</h2><ul>
<li>史坦诺定律<ul>
<li>地层重叠法则：若不考虑底层扰动，上面的地层相对年轻</li>
<li>原始水平法则：形成的层在一个水平线上</li>
</ul>
</li>
<li>可以用化石比较不同地层的相对年龄（地层柱状图）</li>
<li>放射性衰变基本定律：单位时间内衰变概率固定</li>
<li>半衰期乘以衰变常数=ln2</li>
<li>同位素定年的必要条件<ul>
<li>封闭体系</li>
<li>衰变速率恒定</li>
<li>子体初始含量已知，最好是0</li>
<li>或者母体初始含量已知</li>
</ul>
</li>
<li>等时线定年<ul>
<li>等时线方程的截距是子体初始值</li>
<li>斜率正相关于年龄（$e^{\lambda\ t}-1$）</li>
<li>横坐标是母体同位素，纵坐标是子体同位素</li>
</ul>
</li>
<li>月球年龄和地球差不多</li>
<li>短寿命核素定年<ul>
<li>横坐标是27Al和24Mg比值</li>
<li>纵坐标是26Mg和24Mg比值</li>
<li>截距是26Mg和24Mg的初始比值</li>
<li>斜率是26Al和27Al的初始比值</li>
<li>利用短寿命核素定年得到的是相对年龄</li>
</ul>
</li>
</ul>
<h2 id="地球的内部结构"><a href="#地球的内部结构" class="headerlink" title="地球的内部结构"></a>地球的内部结构</h2><ul>
<li>地球的圈层结构<ul>
<li>地壳：固相</li>
<li>上地幔：固相</li>
<li>下地幔：固相</li>
<li>外核：液相、气相</li>
<li>内核：固相</li>
</ul>
</li>
<li>地核半径是地球半径的一半，是铁核</li>
<li>地震波<ul>
<li>P波，纵波，地壳、地幔、地核速度依次更快</li>
<li>S波，横波，振动方向和传播方向垂直，无法在外核传播，比p波慢，内核、地壳、地幔速度依次更快</li>
</ul>
</li>
<li>不连续面<ul>
<li>莫霍不连续面：地壳和地幔</li>
<li>古登堡不连续面：地幔和地核</li>
<li>莱曼不连续面：外核和内核</li>
</ul>
</li>
<li>亲铁和亲铜元素主要在地核中</li>
<li>亲石元素主要在地幔和地壳中</li>
<li>亲岩浆元素主要在大陆地壳中</li>
<li>球粒陨石的证据均匀吸积表明核在吸积后形成</li>
<li>地核的形成是金属和硅酸盐的分离（不混溶）<ul>
<li>是行星分异的正常过程</li>
<li>导致了地球上亲铁元素和亲石元素的基本分离</li>
</ul>
</li>
<li>地核形成的时间<ul>
<li>Hf-W体系，前者亲石，后者亲铁</li>
<li>地核形成于地球形成后30 Ma内</li>
</ul>
</li>
<li>地壳的形成<ul>
<li>部分熔融导致硅酸盐物质不断分离</li>
<li>大陆地壳早期形成，花岗质岩浆（65%-70% SiO2）和演化沉积物组成，经历多次熔融，可能还有拆沉作用</li>
<li>大洋地壳年轻（小于150 Ma），玄武质岩浆（50% SiO2），由地幔减压熔融产生</li>
</ul>
</li>
<li>大气圈的形成<ul>
<li>猜测一：晚期富挥发分的彗星的加入，错误</li>
<li>猜测二：地球内部的去气作用，正确</li>
<li>形成于地球形成后30 Ma内</li>
</ul>
</li>
<li>亲岩浆元素在地壳中聚集</li>
</ul>
<h2 id="地球的邻居"><a href="#地球的邻居" class="headerlink" title="地球的邻居"></a>地球的邻居</h2><ul>
<li>造成陨石坑的撞击体的来源<ul>
<li>小行星带</li>
<li>来自柯依波带的彗星</li>
<li>来自奥尔特云的彗星</li>
</ul>
</li>
<li>月球撞击坑是陨石而不是火山</li>
<li>撞击密度大的区域更老</li>
<li>撞击坑约是撞击体的直径的20倍</li>
<li>月球相对于行星的质量是很大的</li>
<li>月球贫铁、贫挥发份，月球很古老，只比太阳系晚60-125Ma</li>
<li>月球形成模型<ul>
<li>捕获说：无法解释O、Si同位素比值的相似性，且月球质量很大</li>
<li>共生说：不能解释密度差异大，月球贫铁</li>
<li>裂解说：不能解释地月系统的角动量</li>
<li>大撞击理论：很好的解释贫铁、贫挥发；可以解释和地球物质的相似</li>
<li>现在认为是大撞击和月球吸积下形成</li>
</ul>
</li>
<li>斜长岩：钙长石矿物组成的岩石</li>
<li>月球的高地斜长岩非常古老，月海玄武岩年轻得多且亏Eu（月幔亏Eu）</li>
<li>月球岩浆洋形成理论</li>
<li>地球早期可能像月球一样形成岩浆洋<ul>
<li>热量源地球大，包括撞击、衰变、地核形成</li>
<li>热损耗地球小，看表面积比体积</li>
<li>地球压力比月球大</li>
</ul>
</li>
<li>地球没有形成斜长石地壳的主要原因是因为斜长石的稳定压力低</li>
</ul>
<h2 id="宜居性"><a href="#宜居性" class="headerlink" title="宜居性"></a>宜居性</h2><ul>
<li>地球的宜居性<ul>
<li>液态水</li>
<li>温度调控</li>
<li>磁场的保护</li>
</ul>
</li>
<li>液态水<ul>
<li>岩石证据显示38亿年前就有液态水</li>
<li>锆石年龄可达到44亿年（同位素定年），16O比18O更容易蒸发</li>
<li>古老的沉积物中有O同位素的变化，是水循环的结果</li>
<li>锆石的钛含量说明其形成于750℃的环境（酸性岩浆环境）</li>
<li>核幔壳幔分异过程中挥发分集中在表面、水不流失到外太空这是两个形成丰富地表水的关键</li>
<li>水陷阱保护了地球的水</li>
</ul>
</li>
<li>磁场保护了大气层</li>
<li>恒星表面的温度受控于<ul>
<li>恒星光度</li>
<li>行星恒星距离</li>
<li>行星表明反射率</li>
<li>温室效应（CO2、H20、CH4）</li>
</ul>
</li>
<li>金星的温室效应很强（C02）</li>
<li>温室效应的能力，CH4比CO2高得多，但是CO2比CH4多得多，所以地球最重要的温室气体是CO2</li>
<li>地球的早期温室气体是CH4，现在是CO2</li>
<li>火山气体是CO2的稳定来源</li>
<li>岩石的风化反应降低了大气中C02的浓度</li>
<li>大气C02含量增加使得：大气温度升高、水蒸气含量增加、酸雨增多，从而风化加强，海洋中Ca离子输入量增加，CaCO3沉淀增加，大气C02浓度降低</li>
<li>大气C02含量降低使得：大气温度降低、水蒸气含量减少、酸雨减少，从而风化减弱，海洋中Ca离子输入量减少，CaCO3沉淀减少，大气C02浓度增加</li>
</ul>
<h2 id="板块构造"><a href="#板块构造" class="headerlink" title="板块构造"></a>板块构造</h2><ul>
<li>魏格纳提出大陆漂移说<ul>
<li>解释了很多现象，如中龙化石不同洲相同、非洲区域看到冰川运动遗迹等</li>
<li>大陆地壳（刚性）如何在大洋地壳（刚性）和地幔（刚性）之间进行移动，动力在哪来</li>
</ul>
</li>
<li>海底扩张<ul>
<li>大西洋中有很大的洋中脊的隆起</li>
<li>洋中脊两侧出现对称的正反磁异常条带</li>
<li>离洋中脊越远，沉积物越厚，底部的沉积物越老</li>
<li>洋壳年龄不超过200Ma，因为老的洋壳消失于俯冲带，进入了地幔</li>
<li>俯冲带、洋中脊有地震活动</li>
<li>转换断层：洋中脊之间连接的地方，和走滑断层有区别</li>
</ul>
</li>
<li>板块<ul>
<li>指的是岩石圈，岩石圈下面的部分地幔是软流层</li>
<li>板块不是地壳，岩石圈在软流层上移动</li>
<li>一组朝同一个方向移动的岩石。可以同时有大洋和大陆，也可以只有一种</li>
</ul>
</li>
<li>板块构造理论<ul>
<li>地球表层由一系列板块组成</li>
<li>洋壳形成在大洋中脊，岩浆作用形成了洋壳</li>
<li>洋壳消失在汇聚板块边缘，通过俯冲回到地幔</li>
<li>大陆不发生俯冲</li>
</ul>
</li>
<li>大部分板块构造活动都是在海洋中发生的</li>
<li>三种板块边界<ul>
<li>转换边界，如转换断层</li>
<li>离散边界，如洋中脊</li>
<li>会聚边界，包括大洋-大洋（日本）、大洋-大陆（安第斯山脉）、大陆-大陆（喜马拉雅山脉）。前两者是俯冲，第二个会形成大陆弧，最后一个是大陆变形。</li>
</ul>
</li>
<li>一些板块实例：亚欧板块、太平洋板块、非洲板块、南美洲板块、北美洲板块、南极洲板块等</li>
</ul>
<h2 id="地幔对流"><a href="#地幔对流" class="headerlink" title="地幔对流"></a>地幔对流</h2><ul>
<li>地幔虽然是固态，但可以流动</li>
<li>岩石在高压高温时缓慢施加应力可以流动</li>
<li>固体的变形<ul>
<li>弹性形变：可逆</li>
<li>断裂：不可逆</li>
<li>塑性变形：不可逆</li>
</ul>
</li>
<li>地幔流动的证据：<ul>
<li>陆壳和洋壳均衡补偿（陆壳密度比洋壳小，引起高程变化）</li>
<li>冰川溶解后地壳均衡回弹</li>
</ul>
</li>
<li>地幔对流<ul>
<li>瑞利数指示对流是否会发生（大于2000）</li>
<li>粘度和热传导系数小有利于对流发生</li>
<li>上升流由地幔柱代表，下降流与俯冲带相关</li>
</ul>
</li>
<li>上地幔存在温差的证据<ul>
<li>洋壳成分和洋中脊深度相关</li>
<li>浅的洋中脊由热的地幔形成，洋壳厚</li>
<li>深的洋中脊远离热点，显示出较冷的地幔区域</li>
</ul>
</li>
</ul>
<h2 id="地球化学循环"><a href="#地球化学循环" class="headerlink" title="地球化学循环"></a>地球化学循环</h2><ul>
<li><p>洋中脊</p>
<ul>
<li>3He来自洋中脊玄武岩岩浆</li>
<li>洋中脊的热液循环对维持海水化学组成很重要</li>
<li>热液作用使得大洋地壳形成富挥发分的矿物：绿泥石、角闪石、蛇纹石，都有羟基，富水</li>
<li>洋中脊的热量给生物提供了能量</li>
<li>洋中脊把水分和其他成分输送到俯冲带，使得火山活动和大陆生长能够进行</li>
<li>洋中脊在水碳循环中起重要作用，保证了地球气候长期稳定</li>
<li>洋中脊可能在地球生命起源起了重要作用，为宇宙其他天体生命存在提供启示</li>
<li>快速扩张的洋中脊可形成火山，慢速扩张的洋中脊可形成深谷</li>
<li>洋中脊火山岩浆占全球的80%</li>
<li>海水与岩浆发生作用形成黑烟囱，温度可达400℃（因为海底高压）</li>
<li>海水的3He来自于地幔</li>
<li>热液的Fe、Mn、Li含量高</li>
</ul>
</li>
<li><p>俯冲带</p>
<ul>
<li>海洋沉积物、洋壳（玄武质）、上地幔（橄榄岩）水分依次减少</li>
<li>汇聚型板块边缘岩浆富水的证据有：矿物的熔融包裹体含有大于5%的水、汇聚型板块边缘可形成富硅岩浆、汇聚型板块边缘多爆发式火山喷发</li>
<li>汇聚板块边缘喷发的岩浆中有10Be说明沉积物俯冲进入地幔</li>
<li>俯冲再循环物质不能有效地均一化到地幔中</li>
</ul>
</li>
<li><p>重点</p>
<ul>
<li>板块构造是地球化学循环的一种方式</li>
<li>洋中脊是海水和洋壳的化学反应器：海水通过洋中脊保持反应平衡、洋壳称为挥发分载体、</li>
<li>挥发分向俯冲带迁移导致火山爆发和陆壳的构建</li>
</ul>
</li>
</ul>
<h2 id="生命起源和改造"><a href="#生命起源和改造" class="headerlink" title="生命起源和改造"></a>生命起源和改造</h2><ul>
<li>38亿年前的岩石发现了生物标志物不代表38亿年前就有生命</li>
<li>30亿年前有生命，最古老的也许在35亿年前</li>
<li>水的形成（44亿年前）和生命的诞生有很长的间隔，10亿年。</li>
<li>生命对地表的改造是以一系列能源革命为标志的<ul>
<li>第一次能源革命：做自己的食物，自养微生物，不需要自由氧</li>
<li>第二次能源革命：有氧光合作用</li>
<li>第三次能源革命：有氧呼吸</li>
<li>第四次能源革命：多细胞</li>
</ul>
</li>
<li>大气从无氧到有氧的证据：硫的四个同位素非质量分流在深紫外线照射下明显，当氧气含量很高时，大气将阻挡紫外透射，光化学反应不产生非质量分馏，从而可以推测大气中氧含量</li>
<li>新生代：哺乳动物时代</li>
<li>中生代：爬行动物时代</li>
<li>古生代：两栖动物、鱼类、无脊椎动物时代</li>
<li>鱼类时代开始形成煤和石油</li>
<li>最早的化石从古生代开始</li>
<li>温室效应使得海水酸化</li>
<li>减少二氧化碳浓度的方法<ul>
<li>减排</li>
<li>捕获大气中的CO2，需要大量代价</li>
</ul>
</li>
<li>大气中的$\delta^{13} C$越来越小和全球排放有关</li>
</ul>
]]></content>
      <categories>
        <category>地球的故事</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-数据链路层</title>
    <url>/2021/11/25/network3/</url>
    <content><![CDATA[<h2 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h2><ul>
<li>为网络层提供服务<ul>
<li>无确认无连接服务<ul>
<li>适合误码率低的以太网</li>
</ul>
</li>
<li>有确认无连接服务<ul>
<li>适合误码率高的无线通信</li>
</ul>
</li>
<li>有确认有连接服务<ul>
<li>适合可靠性要求高的通信</li>
</ul>
</li>
</ul>
</li>
<li>链路管理<ul>
<li>连接的建立、维持、释放的管理</li>
</ul>
</li>
<li>帧的定界、同步、透明传输<ul>
<li>帧定界：确定帧的界限，即起始和终止，一般需要定界符</li>
<li>帧同步：确定帧的起始和终止，帧定界的另一种说法</li>
<li>透明传输：帧可以传输任意数据，比如定界符本身</li>
</ul>
</li>
<li>流量控制<ul>
<li>限制发送方数据流量，使得发送速率不超过接收速率</li>
</ul>
</li>
<li>差错控制<ul>
<li>发送方确定接收方是否正确收到数据的方法</li>
<li>错误包括位错和帧错<ul>
<li>位错：CRC检错，ARQ重传；FEC纠错</li>
<li>帧错：引入定时器和编号机制，防止帧的重复、失序、丢失</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="组帧"><a href="#组帧" class="headerlink" title="组帧"></a>组帧</h2><ul>
<li>字符计数法<ul>
<li>方法：帧的第一个字节指出整个帧的字符数</li>
<li>缺点：计数字段出错，后果严重</li>
</ul>
</li>
<li>字符填充的首尾定界符法<ul>
<li>方法：通过首尾定界符SOH和EOT来定界</li>
<li>透明传输实现：如果信息码出现定界符或转义符，则在其前面插入一个转义符ESC</li>
<li>缺点：复杂、难兼容</li>
</ul>
</li>
<li>零比特填充的首尾标志法（常用）<ul>
<li>方法：使用0111 1110作为首尾的标志字符</li>
<li>透明传输实现：如果信息码出现连续5个1，则在后面插入1个0</li>
<li>优点：容易由硬件实现，比字符填充法的性能好</li>
</ul>
</li>
<li>违规编码法（常用）<ul>
<li>方法：采用冗余的编码方式，未被使用的编码作为定界符<ul>
<li>比如2个比特位编码0和1，00表示0，11表示1，冗余的01或10作为定界符</li>
</ul>
</li>
<li>透明传输：不需要填充技术</li>
</ul>
</li>
</ul>
<h2 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h2><p><em>前面提到，差错控制包括位错和帧错，本节讨论位错的控制</em></p>
<h3 id="检错编码"><a href="#检错编码" class="headerlink" title="检错编码"></a>检错编码</h3><h4 id="奇偶检验"><a href="#奇偶检验" class="headerlink" title="奇偶检验"></a>奇偶检验</h4><ul>
<li>方法：添加1个校验位使得1的个数为奇数或偶数</li>
<li>奇校验：1的个数为奇数</li>
<li>偶校验：1的个数为偶数</li>
<li>缺点：只能检查出奇数位错</li>
</ul>
<h4 id="循环冗余编码"><a href="#循环冗余编码" class="headerlink" title="循环冗余编码"></a>循环冗余编码</h4><ul>
<li>CRC编码<ul>
<li>输入：m位信息码和一个r阶多项式G(x)</li>
<li>操作：信息码左移r位，模二除法（用异或操作代替加减操作），除以G(x)对应比特数</li>
<li>输出：余数就是r位校验位，和m位信息位合并为CRC码</li>
</ul>
</li>
<li>检错：CRC码可以模二整除G(x)对应比特数</li>
<li>纠错：CRC码可以纠错，但数据链路层只用到检错功能</li>
</ul>
<h3 id="纠错编码"><a href="#纠错编码" class="headerlink" title="纠错编码"></a>纠错编码</h3><p>本节介绍海明编码，方法（检错纠错1位）如下</p>
<ul>
<li>确定海明码位数<ul>
<li>找到最小的满足$n+k\leq 2^k-1$的$k$作为校验位长度</li>
<li>如果需要检错2位，则校验位长度为$k+1$</li>
</ul>
</li>
<li>确定各校验位插入位置（下标一律从$1$开始）<ul>
<li>把校验位$P_i$插入到从右开始，第$2^{i-1}$的位置</li>
</ul>
</li>
<li>确定各信息位用到的校验位<ul>
<li>设信息位$D_j$的位置为海明码右边开始第$i$个，则$i$的二进制串可确定该信息位用到的检验位<ul>
<li>比如信息位$D_3$在海明码右边第$6$个位置，二进制为$110$，则用到校验位$P_2,P_3$</li>
</ul>
</li>
</ul>
</li>
<li>计算各校验位<ul>
<li>每个校验位 = 所有用到该校验位的信息位的异或</li>
</ul>
</li>
<li>纠错方法<ul>
<li>$k$位校验位，分别与用到每个校验位的信息位的异或结果进行异或，得到$k$位纠错码</li>
<li>全$0$表示无错，否则表示出错的海明码的位置</li>
</ul>
</li>
</ul>
<p>注：</p>
<ul>
<li>海明距指的是两个合法海明编码的最短路径，比如$111$和$000$距离是3</li>
<li>纠错$k$位，海明距不小于$2k+1$；检错$k$，海明距不小于$k+1$</li>
</ul>
<h2 id="流量控制与可靠传输机制"><a href="#流量控制与可靠传输机制" class="headerlink" title="流量控制与可靠传输机制"></a>流量控制与可靠传输机制</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><h4 id="停止等待流量控制"><a href="#停止等待流量控制" class="headerlink" title="停止等待流量控制"></a>停止等待流量控制</h4><ul>
<li>发送方每次发送一帧，接收到应答信号后才能发送下一帧</li>
<li>接收方接收一帧后，需要发送应答信号才能接收下一帧</li>
</ul>
<h4 id="滑动窗口流量控制"><a href="#滑动窗口流量控制" class="headerlink" title="滑动窗口流量控制"></a>滑动窗口流量控制</h4><ul>
<li>发送窗口：发送方维护的允许连续发送的帧序号</li>
<li>接收窗口：接收方维护的允许连续接收的帧序号</li>
<li>窗口滑动步骤：发送方发送帧、接收窗口滑动、接收方发确认帧、发送窗口滑动</li>
<li>特性<ul>
<li>接收窗口为1时，帧有序接收</li>
<li>数据链路层的滑动窗口大小固定，不同于传输层的滑动窗口</li>
</ul>
</li>
</ul>
<h3 id="可靠传输机制"><a href="#可靠传输机制" class="headerlink" title="可靠传输机制"></a>可靠传输机制</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul>
<li>常用协议：自动重传请求ARQ（数据链路层和传输层都可以用到的协议）<ul>
<li>停止等待ARQ</li>
<li>连续ARQ<ul>
<li>后退N帧ARQ</li>
<li>选择性重传ARQ</li>
</ul>
</li>
</ul>
</li>
<li>包括确认和超时重传两个机制<ul>
<li>确认：接收方让发送方知道已正确接收的帧<ul>
<li>一般采用捎带，把确认放在回复帧中</li>
<li>后退N帧ARQ采用累计确认，选择性重传ARQ不采用累计确认</li>
</ul>
</li>
<li>超时重传：发送方发送一个帧后开启一个计时器，到时间没有确认则重传<ul>
<li>停止等待ARQ使用一个计时器</li>
<li>后退N帧ARQ使用一个计时器（记录的是第一个未收到确认的已发送帧的等待时间，超时后发送方重传所有未收到确认的发送帧）</li>
<li>选择性重传ARQ对每个发送帧都设置一个计时器（超时后发送方只重传该超时帧）</li>
</ul>
</li>
</ul>
</li>
<li>设置缓存区<ul>
<li>发送方缓存区：备份帧用于超时重传</li>
<li>接收方缓存区：备份帧用于判定重复帧 </li>
</ul>
</li>
</ul>
<h4 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a>停止等待ARQ协议</h4><ul>
<li>流量控制：发送窗口为$1$，接收窗口为$1$，编号比特数满足$2^n\geq 1+1$，即$1$位</li>
<li>差错控制<ul>
<li>无差错情况<ul>
<li>发送方：发送发送帧、等待确认帧</li>
<li>接收方：接收发送帧、发送确认帧</li>
</ul>
</li>
<li>发送帧丢失情况：接收方收不到，发送方超时重传</li>
<li>发送帧破坏情况：接收方丢弃，发送方超时重传</li>
<li>确认帧丢失或破坏情况：发送方超时重传，接收方丢弃重复帧并重发确认帧</li>
<li>确认帧迟到情况：发送方超时重传，接收方丢弃重复帧并重发确认帧，发送方丢弃重复的确认帧</li>
</ul>
</li>
</ul>
<h4 id="后退N帧ARQ协议-GBN协议"><a href="#后退N帧ARQ协议-GBN协议" class="headerlink" title="后退N帧ARQ协议(GBN协议)"></a>后退N帧ARQ协议(GBN协议)</h4><ul>
<li>流量控制：发送窗口$W_T&gt; 1$，接收窗口为$1$，编号比特数满足$2^n\geq W_T+1$<ul>
<li>对编号比特数限制的理解（停止等待协议和SR协议同理）<ul>
<li>发送方发送$W_T$个帧，到达接收方，但确认帧丢失</li>
<li>超时后发送方重传$W_T$个帧，此时接收方必须能根据序号判断出帧是旧帧还是新帧</li>
</ul>
</li>
</ul>
</li>
<li>差错控制：<ul>
<li>无差错情况<ul>
<li>发送方：发送窗口内的帧连续发送、等待确认帧</li>
<li>接收方：按序接收发送帧，发送确认帧，告诉接收方到该帧为止的帧都已经正确接收（<strong>不一定每次收到正确帧都确认，可能捎带的方式，即接收方在发送数据时捎带确认</strong>），</li>
</ul>
</li>
<li>发送窗口的帧全部丢失情况：接收方收不到，发送方超时重传</li>
<li>发送窗口的帧部分丢失或破坏<ul>
<li>超过当前接收序号的正确帧：接收方丢弃，并重复发送确认帧，发送方超时重传</li>
<li>错误帧：接收方丢弃，发送方超时重传</li>
</ul>
</li>
<li>确认帧丢失或破坏情况：发送方超时重传，接收方丢弃重复帧并重发确认帧</li>
<li>确认帧迟到情况：发送方超时重传，接收方丢弃重复帧并重发确认帧，发送方丢弃重复的确认帧</li>
</ul>
</li>
</ul>
<h4 id="选择重传ARQ协议-SR协议"><a href="#选择重传ARQ协议-SR协议" class="headerlink" title="选择重传ARQ协议(SR协议)"></a>选择重传ARQ协议(SR协议)</h4><ul>
<li>流量控制：发送窗口$W_T&gt; 1$，接收窗口为$W_R&gt; 1$，编号比特数满足$2^n\geq W_T+W_R$<ul>
<li>显然$W_R\leq W_T$，否则无意义</li>
<li>默认情况是$W_T=W_R$</li>
</ul>
</li>
<li>设置缓冲区<ul>
<li>注意和前面的缓存区不同</li>
<li>缓冲区的大小等于接收窗口大小</li>
<li>缓冲区的作用是接收无序到达的帧</li>
</ul>
</li>
<li>差错控制：<ul>
<li>无差错情况<ul>
<li>发送方：发送窗口内的帧连续发送、等待确认帧</li>
<li>接收方：如果接收到接受窗口中不按序的帧，放入缓冲区，并发送确认帧；如果接收到接收窗口中按序的帧，则把该帧和缓冲区按序的部分内容合并提交给上层，并发送确认帧</li>
</ul>
</li>
<li>发送窗口的某帧丢失情况：接收方收不到，发送方超时重传</li>
<li>发送窗口的某帧被破坏情况：接收方丢弃并发送否定帧NAK，要求发送方重传</li>
<li>确认帧丢失或破坏情况：发送方超时重传，接收方丢弃重复帧并重发确认帧</li>
<li>确认帧迟到情况：发送方超时重传，接收方丢弃重复帧并重发确认帧，发送方丢弃重复的确认帧</li>
</ul>
</li>
</ul>
<h4 id="信道效率"><a href="#信道效率" class="headerlink" title="信道效率"></a>信道效率</h4><ul>
<li>发送周期<ul>
<li>从开始发送数据到收到一个确认帧为止的时间</li>
<li>包括发送方传输时延、往返时延RTT、接收方处理的时间（一般忽略）、接收方确认的传输时延（非捎带情况一般忽略）</li>
</ul>
</li>
<li>信道利用率<ul>
<li>发送方在一个发送周期内，有效的发送时间的占比</li>
</ul>
</li>
<li>信道吞吐量<ul>
<li>信道利用率 $\times$ 发送方的发送速率</li>
</ul>
</li>
</ul>
<h2 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h2><p><em>介质访问控制的任务是保证广播信道上两个结点的通信不受信道上其他结点的干扰</em></p>
<h3 id="信道划分"><a href="#信道划分" class="headerlink" title="信道划分"></a>信道划分</h3><p><em>本节用到多路复用技术，把多个输入信道整合到一个复用通道中，是静态的信道划分方法</em></p>
<h4 id="频分多路复用FDM"><a href="#频分多路复用FDM" class="headerlink" title="频分多路复用FDM"></a>频分多路复用FDM</h4><ul>
<li>频分：把物理信道的总带宽（这里带宽指可用的频率范围）划分，得到多个能传输单个信号的子信道<ul>
<li>为了防止子信道的干扰，可以引入冗余的频段，即<strong>保护频带</strong></li>
</ul>
</li>
<li>多路复用方法：原始多个基带信号按各自的频率调制，然后进行波的叠加，形成复合信号</li>
<li>优点：充分利用带宽、技术成熟、实现容易</li>
<li>特点：划分空间，共享时间</li>
</ul>
<h4 id="时分多路复用TDM"><a href="#时分多路复用TDM" class="headerlink" title="时分多路复用TDM"></a>时分多路复用TDM</h4><ul>
<li>时分：把物理信道划分为若干时间片</li>
<li>多路复用方法：多路子信道在某段时间内轮流分配使用时间片<ul>
<li>统计时分多路复用STDM：对TDM改进，按需动态分配时间片，而不是轮流分配</li>
</ul>
</li>
<li>特点：划分时间，共享空间</li>
</ul>
<h4 id="波分多路复用WDM"><a href="#波分多路复用WDM" class="headerlink" title="波分多路复用WDM"></a>波分多路复用WDM</h4><ul>
<li>本质是光的频分复用<ul>
<li>光的带宽高，可以实现频分复用</li>
<li>光的频率高，一般用波长表示光，因此叫波分复用</li>
</ul>
</li>
</ul>
<h4 id="码分多路复用CDM"><a href="#码分多路复用CDM" class="headerlink" title="码分多路复用CDM"></a>码分多路复用CDM</h4><ul>
<li>又叫码分多址CDMA</li>
<li>码分：把多个子信道的信息编码到一起，在一个物理信道上传输，在接收端再分解得到编码的各分量</li>
<li>码片：由发送一个比特的时间划分得到的更小的时间槽<ul>
<li>发送多个比特来表示一个比特</li>
</ul>
</li>
<li>码片序列：给每个子信道指定码片序列，对应一个向量<ul>
<li>比如码片序列$0011$，对应向量$(-1,-1,1,1)$，且发送$0011$表示发送$1$，发送$1100$表示发送$0$</li>
</ul>
</li>
<li>码片序列的设置要求<ul>
<li>不同子信道对应的向量要求正交，规格化内积为0<ul>
<li>比如$A=(-1,-1,1,1)$和$B=(1,-1,1,-1)$</li>
<li>规格化内积为$\frac{-1+1+1-1}{4}=0$</li>
</ul>
</li>
</ul>
</li>
<li>码片序列的性质<ul>
<li>码片序列的向量和自身向量的规格化内积为1<ul>
<li>比如$+A=(-1,-1,1,1)$和$A=(-1,-1,1,1)$</li>
<li>规格化内积为$\frac{1+1+1+1}{4}=1$</li>
</ul>
</li>
<li>码片序列的反向量和自身向量的规格化内积为-1<ul>
<li>比如$-B=(-1,1,-1,1)$和$B=(1,-1,1,-1)$</li>
<li>规格化内积为$\frac{-1-1-1-1}{4}=-1$</li>
</ul>
</li>
</ul>
</li>
<li>多路复用<ul>
<li>输入时：各子信号的向量线性叠加为复合向量，形成复合信号<ul>
<li>比如$+A=(-1,-1,1,1)$和$-B=(-1,1,-1,1)$</li>
<li>线性叠加为$+A-B=(-2,0,0,2)$</li>
</ul>
</li>
<li>输出时：把复合向量和子信道的码片序列向量进行规格化内积，得到该子信道发送的子信号<ul>
<li>$+A-B=(-2,0,0,2)$和$A=(-1,-1,1,1)$的规格化内积为$\frac{2+0+0+2}{4}=1$</li>
<li>$+A-B=(-2,0,0,2)$和$B=(1,-1,1,-1)$的规格化内积为$\frac{-2+0+0-2}{4}=-1$</li>
</ul>
</li>
</ul>
</li>
<li>特点：共享空间，共享时间</li>
</ul>
<h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><ul>
<li>本节的协议都是争用型协议，是动态的随机信道访问协议<ul>
<li>争用：广播信道被转化为点对点信道，用户根据自己发送信息的意愿争取信道的使用。</li>
<li>动态：不对信道作静态统一的划分，不共享时间也不共享空间，可能发生冲突</li>
</ul>
</li>
</ul>
<h4 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h4><ul>
<li>纯ALOHA协议<ul>
<li>思想<ul>
<li>数据直接发送，一段时间内未收到确认则认为有冲突（碰撞）</li>
<li>若冲突则每个帧时间都以p概率重传，直到成功</li>
</ul>
</li>
<li>性能<ul>
<li>设一个帧平均发送时间为$T_0$、网络负载（$T_0$时间内发送的平均总帧数）为$G$</li>
<li>则网络吞吐量（$T_0$时间内成功发送的平均帧数）为$Ge^{-2G}$、最大吞吐量为$\frac{1}{2e}=0.184$，当$G=0.5$时取到</li>
</ul>
</li>
</ul>
</li>
<li>时隙ALOHA协议<ul>
<li>思想<ul>
<li>把时间划分为等长时隙，帧在时隙开始时发送，在时隙内完成发送</li>
<li>若冲突则每个时隙都以p概率重传，直到成功</li>
</ul>
</li>
<li>性能<ul>
<li>设时隙为$T_0$、网络负载（$T_0$时间内发送的平均总帧数）为$G$</li>
<li>则网络吞吐量（$T_0$时间内成功发送的平均帧数）为$Ge^{-G}$、最大吞吐量为$\frac{1}{e}=0.368$，当$G=1$时取到 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="CSMA协议"><a href="#CSMA协议" class="headerlink" title="CSMA协议"></a>CSMA协议</h4><p>即载波侦听多路访问，发送前先侦听一下信道</p>
<ul>
<li>1坚持<ul>
<li>信道空闲时立刻发送数据</li>
<li>信道忙时坚持侦听</li>
</ul>
</li>
<li>非坚持<ul>
<li>信道空闲时立刻发送数据</li>
<li>信道忙时等随机一段时间再侦听</li>
</ul>
</li>
<li>p坚持<ul>
<li>信道空闲时以p概率发送，以1-p概率推迟到下一个时隙</li>
<li>信道忙时等到下一个时隙再侦听（也可以理解为坚持侦听）</li>
</ul>
</li>
</ul>
<h4 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h4><ul>
<li>信道空闲时立刻发送数据</li>
<li>信道忙时坚持侦听</li>
<li>发送过程中保持监听，即碰撞检测CD（这是本协议和CSMA协议的区别）<ul>
<li>检测到碰撞则停止发送，并发出拥塞广播信号</li>
<li>停止后采用指数随即退避算法，等待随机时间再侦听信道</li>
</ul>
</li>
<li>适合半双工总线型网络<ul>
<li>成功应用于有限连接的局域网，以太网</li>
</ul>
</li>
<li>争用期<ul>
<li>又叫冲突窗口、碰撞窗口</li>
<li>等于两倍的（到最远端主机的）传播时延，发送帧后在该时间内即可判断是否有冲突<ul>
<li>因此要求传输时延不小于争用期长度</li>
<li>以太网规定最短帧长是64B就是考虑传输时延的下界</li>
</ul>
</li>
<li>可以分为若干时隙</li>
</ul>
</li>
<li>二进制指数退避算法<ul>
<li>基本退避时间一般取争用期</li>
<li>若当前重传次数为$t\leq 16$，令$k=\min\{t,10\}$<ul>
<li>若$t&gt;16$，则说明网络拥挤，丢弃该帧并向高层报告</li>
</ul>
</li>
<li>从集合$\{0,1,2,\cdots,2^k-1\}$中取随机一个数$r$</li>
<li>退避时间为$r$倍基本退避时间</li>
</ul>
</li>
</ul>
<h4 id="CSMA-CA协议"><a href="#CSMA-CA协议" class="headerlink" title="CSMA/CA协议"></a>CSMA/CA协议</h4><p><em>本节和无线局域网有交叉，可以结合后面进行理解</em></p>
<ul>
<li>为了应用于无线局域网，采用碰撞避免CA而不是碰撞检测CD，原因是<ul>
<li>无线局域网的碰撞检测开销很大</li>
<li>无线局域网存在隐蔽站，彼此听不见对方</li>
</ul>
</li>
<li>帧间间隔IFS<ul>
<li>SIFS（短协调IFS）：最短<ul>
<li>使用场合：ACK、CTS、AP探询回应帧</li>
</ul>
</li>
<li>PIFS（点协调IFS）：中等长度<ul>
<li>使用场合：PCF操作</li>
</ul>
</li>
<li>DIFS（分布式协调IFS）：最长<ul>
<li>使用场合：异步帧竞争访问时</li>
</ul>
</li>
</ul>
</li>
<li>链路层确认（802.11使用ARQ方案）<ul>
<li>发送站发完帧后等待确认，收到后才能继续发下一帧</li>
<li>接收站接收数据进行校验，校验通过后等待SIFS后发送确认帧ACK</li>
</ul>
</li>
<li>CSMA/CA协议描述<ul>
<li>初始若信道空闲，且等待DIFS后仍空闲，则发送帧并等待确认<ul>
<li>没有碰撞检测，一次发完不会停止</li>
</ul>
</li>
<li>若信道繁忙，选一个随机回退值（不大于一个争用期的时隙数），启动计时器<ul>
<li>推迟接入：信道忙则计时器暂停（尽可能避免碰撞）</li>
<li>退避时隙：信道空闲则计时器递减（发现空闲不一定传输，也体现了碰撞避免）</li>
</ul>
</li>
<li>计时器为0时，此时信道必空闲，发送帧并等待确认<ul>
<li>若收到确认，到第二步重选回退值（防止垄断），以发送下一帧</li>
<li>若超时，则到第二步选更大回退值，以重发帧</li>
</ul>
</li>
</ul>
</li>
<li>信道预约<ul>
<li>隐蔽站问题：A和C相互看不见，A和C都希望向B发信息，导致碰撞</li>
<li>RTS帧：较短的请求发送帧，向目的主机预约信道<ul>
<li>包括源地址、目的地址、通信持续时长</li>
</ul>
</li>
<li>CTS帧：较短的允许发送帧，向信道广播（告知源站允许发送，告知其他站抑制发送）<ul>
<li>包括该次通信的持续时长</li>
</ul>
</li>
<li>预约策略<ul>
<li>使用RTS和CTS</li>
<li>在数据帧超过一定阈值时，使用RTS和CTS</li>
<li>不使用RTS和CTS</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="轮询访问"><a href="#轮询访问" class="headerlink" title="轮询访问"></a>轮询访问</h3><ul>
<li>轮询访问协议<ul>
<li>在随机介质访问基础上，限制有权发送数据的结点只有一个<ul>
<li>没冲突，适合高负载高冲突的网络</li>
</ul>
</li>
<li>不共享时间也不共享空间</li>
<li>典型的是令牌传递协议</li>
</ul>
</li>
<li>令牌传递协议<ul>
<li>令牌环局域网：物理上不一定是环，但设备间逻辑上是一个环</li>
<li>令牌：3字节的特殊帧，在各站点间以固定顺序交换<ul>
<li>有令牌的站点才能发送帧</li>
</ul>
</li>
<li>发帧流程<ul>
<li>初始化逻辑环，生成空令牌（空闲状态）在环上流动</li>
<li>拿到令牌的站点如果想发送帧，则修改令牌的一位，使之变为“忙状态”</li>
<li>源站点把发送帧插入令牌后面形成总的帧，传递给逻辑环的下一站点</li>
<li>非目的站点把帧传递给逻辑环的下一站点</li>
<li>目的站点把帧放入缓存区，再存入本站，最后把帧的尾部附上“响应比特”，传递给逻辑环的下一站点</li>
<li>源站拿到了绕了一圈的帧，检查发现了响应比特，把令牌恢复空闲，传递给逻辑环的下一站点</li>
</ul>
</li>
<li>令牌释放方式<ul>
<li>常规释放：源站收到响应比特才释放令牌（前面发帧流程就是本方式）</li>
<li>早期释放：源站发送完最后一比特后即释放令牌（只作了解，具体实现如何保证不冲突性不太清楚）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>LAN指较小地理范围（如一所学校）的计算机互联网络，特点为</p>
<ul>
<li>一个单位所有，地理范围、站点数有限</li>
<li>所有站点共享较高总带宽</li>
<li>较低时延和较低误码率</li>
<li>各站平等</li>
<li>能广播、组播</li>
</ul>
<h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><h4 id="局域网三大要素"><a href="#局域网三大要素" class="headerlink" title="局域网三大要素"></a>局域网三大要素</h4><ul>
<li>拓扑结构<ul>
<li>星形</li>
<li>环形</li>
<li>总线形</li>
<li>星形和总线形复合型</li>
</ul>
</li>
<li>传输介质<ul>
<li>双绞线<ul>
<li>最主流</li>
</ul>
</li>
<li>铜缆</li>
<li>光纤</li>
</ul>
</li>
<li>介质访问控制方式<ul>
<li>CSMA/CD<ul>
<li>总线形局域网</li>
</ul>
</li>
<li>令牌总线<ul>
<li>总线形局域网</li>
</ul>
</li>
<li>令牌环<ul>
<li>环形局域网</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="IEEE-802标准"><a href="#IEEE-802标准" class="headerlink" title="IEEE 802标准"></a>IEEE 802标准</h4><p>IEEE 802标准对应OSI模型的物理层、数据链路层，并把数据链路层从上到下拆分为</p>
<ul>
<li>逻辑链路控制LLC子层<ul>
<li>向网络层提供无确认无连接、有确认无连接、有确认有连接、高速传输4种连接服务类型</li>
</ul>
</li>
<li>媒体接入控制MAC子层<ul>
<li>向LLC子层提供对物理层的访问接口</li>
<li>包括组帧拆帧、差错检测、透明传输</li>
</ul>
</li>
</ul>
<h4 id="有线局域网举例"><a href="#有线局域网举例" class="headerlink" title="有线局域网举例"></a>有线局域网举例</h4><ul>
<li>以太网<ul>
<li>IEEE 802.3，使用范围最广的局域网</li>
<li>逻辑拓扑：总线形</li>
<li>物理拓扑：星形、拓展星形</li>
</ul>
</li>
<li>令牌环<ul>
<li>IEEE 802.5</li>
<li>逻辑拓扑：环形</li>
<li>物理拓扑：星形</li>
</ul>
</li>
<li>光纤分布数字接口FDDI<ul>
<li>IEEE 802.8</li>
<li>逻辑拓扑：环形</li>
<li>物理拓扑：双环形</li>
</ul>
</li>
</ul>
<h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><p>即IEEE 802.3局域网</p>
<ul>
<li>逻辑结构：基带总线形</li>
<li>介质访问控制方式：CSMA/CD</li>
<li>特点<ul>
<li>提供无确认无连接服务<ul>
<li>不可靠服务，尽最大努力交付数据</li>
</ul>
</li>
<li>使用曼彻斯特编码</li>
</ul>
</li>
<li>网线标准举例（下面的速率都是10Mb/s）<ul>
<li>10BASE-2<ul>
<li>物理结构：总线形</li>
<li>传输媒介：细缆</li>
<li>最大长度：500m</li>
<li>基本被淘汰</li>
</ul>
</li>
<li>10BASE-5<ul>
<li>物理结构：总线形</li>
<li>传输媒介：粗缆</li>
<li>最大长度：185m</li>
<li>基本被淘汰</li>
</ul>
</li>
<li>10BASE-T<ul>
<li>物理结构：星形</li>
<li>传输媒介：非屏蔽双绞线</li>
<li>最大长度：100m</li>
</ul>
</li>
<li>10BASE-FL<ul>
<li>物理结构：点对点</li>
<li>传输媒介：光纤对</li>
<li>最大长度：2000m</li>
</ul>
</li>
</ul>
</li>
<li>网卡（网络适配器、网络接口卡）<ul>
<li>工作在物理层、数据链路层的MAC子层<ul>
<li>自带处理器、存储器的网络组件</li>
</ul>
</li>
<li>和局域网以电缆或双绞线连接、串行通信</li>
<li>和计算机以IO总线连接、并行通信</li>
<li>介质访问控制（MAC）地址<ul>
<li>每个网卡独特的出厂代码，又叫物理地址</li>
<li>6个字节，字节用2个十六进制数表示，字节间用-或：连接</li>
<li>高三字节是厂商代码，低三字节是网卡序列号</li>
</ul>
</li>
</ul>
</li>
<li>MAC帧格式（DIX 以太网v2标准）<ul>
<li>前导码（不算MAC帧的内容）：前8个字节，用于时钟同步，包括<ul>
<li>7字节的前同步码，用于比特同步</li>
<li>1字节的开始定界符</li>
</ul>
</li>
<li>头部：14字节<ul>
<li>6字节的目的MAC地址</li>
<li>6字节的源MAC地址</li>
<li>2字节的类型，记录网络层采用的协议</li>
</ul>
</li>
<li>数据：46-1500字节<ul>
<li>46字节为了保证MAC帧不小于64字节，不足时填充帧</li>
<li>1500字节是以太网的最大传送单元MTU</li>
</ul>
</li>
<li>尾部：4字节<ul>
<li>FCS：校验头部和数据部分，采用32位CRC</li>
</ul>
</li>
</ul>
</li>
<li>Mac帧格式（IEEE 802.3标准）<ul>
<li>2字节的类型域更换为2字节的长度域，指出数据的长度</li>
<li>两个标准可以并存，因为可以用46-1500表示长度，用1501-65535表示类型</li>
</ul>
</li>
<li>高速以太网（至少100Mb/s，使用IEEE 802.3标准帧格式）<ul>
<li>100BASE-T以太网<ul>
<li>传输速率：100Mb/s</li>
<li>物理结构：星形</li>
<li>传输媒介：双绞线</li>
<li>工作方式：半双工（使用CSMA/CD）或全双工（无冲突、不使用CSMA/CD）</li>
</ul>
</li>
<li>吉比特以太网（千兆以太网）<ul>
<li>传输速率：1Gb/s</li>
<li>其他同100BASE-T</li>
</ul>
</li>
<li>10吉比特以太网<ul>
<li>传输速率：10Gb/s</li>
<li>物理结构：星形</li>
<li>传输媒介：光纤</li>
<li>工作方式：全双工（无冲突，无争用）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>WLAN<ul>
<li>即无线局域网</li>
<li>分为有固定基础设施WLAN和无固定基础设施WLAN</li>
</ul>
</li>
<li>WIFI<ul>
<li>WLAN通常采用IEEE 802.11系列协议，此时叫WIFI</li>
<li>802.11系列协议包括802.11 a/b/g/n等</li>
</ul>
</li>
</ul>
<h4 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h4><ul>
<li>固定接入：接入网络后，用户位置不变</li>
<li>游牧接入：通信期间，用户位置不变，否则通信会中断</li>
<li>便携接入：通信期间，用户可以步行速度移动，切换服务区（后面有介绍）能力有限<ul>
<li>也可以把游牧接入归类为便携接入</li>
</ul>
</li>
<li>移动接入：通信期间，用户可以以车辆速度移动，切换服务区时，通信保持连续</li>
</ul>
<h4 id="有固定基础设施"><a href="#有固定基础设施" class="headerlink" title="有固定基础设施"></a>有固定基础设施</h4><ul>
<li>物理拓扑：星形</li>
<li>无线接入点AP：无线局域网的中心基础设施，和外界的有线以太网连接<ul>
<li>通常是基站</li>
<li>家用的AP是无线路由器</li>
</ul>
</li>
<li>介质访问控制方式：CSMA/CA</li>
<li>基本服务集BSS，包括<ul>
<li>一个AP</li>
<li>若干移动站<ul>
<li>比如手机、电脑</li>
</ul>
</li>
</ul>
</li>
<li>服务集标识符SSID<ul>
<li>即AP的名字（字符串）</li>
<li>用户通常可知</li>
</ul>
</li>
<li>基本服务集标识符BSSID<ul>
<li>即AP的MAC地址（6字节二进制串）</li>
<li>用户通常不可知</li>
</ul>
</li>
<li>基本服务区BSA<ul>
<li>BSS覆盖的地理范围</li>
<li>当多个BSA重合时，移动站选择信号较强的AP进行<strong>关联</strong>（后面会介绍）</li>
</ul>
</li>
<li>扩展服务集ESS<ul>
<li>多个BSS连入分配系统DS形成</li>
</ul>
</li>
<li>分配系统<ul>
<li>可以理解为总线的结构</li>
<li>使得ESS对外表现为BSS</li>
<li>一般用以太网</li>
</ul>
</li>
<li>门户<ul>
<li>连接分配系统的设备，使得ESS连接外界的非无线局域网</li>
<li>功能相当于网桥（见数据链路层设备小节）</li>
</ul>
</li>
<li>拓展服务集标识符ESSID<ul>
<li>ESS的名字（字符串）</li>
</ul>
</li>
<li>关联：移动站加入AP所在BSS，有两种方式（可同时进行加快关联）<ul>
<li>被动扫描<ul>
<li>各AP周期性发出信标帧</li>
<li>移动站选择一个AP，发送关联请求帧</li>
<li>被选的AP发出关联响应帧</li>
</ul>
</li>
<li>主动扫描<ul>
<li>移动站发出探测请求帧</li>
<li>各AP发送探测响应帧</li>
<li>移动站选择一个AP，发送关联请求帧</li>
<li>被选的AP发出关联响应帧</li>
</ul>
</li>
</ul>
</li>
<li>热点：提供WIFI接入服务的地点<ul>
<li>若干热点接入AP，形成热区（一种基本服务区）</li>
</ul>
</li>
</ul>
<h4 id="无固定基础设施"><a href="#无固定基础设施" class="headerlink" title="无固定基础设施"></a>无固定基础设施</h4><p>即移动自组网络</p>
<ul>
<li>各移动站地位平等，都有路由转发分组的能力<ul>
<li>但不使用固定网络已有的路由选择协议</li>
</ul>
</li>
<li>无AP，一般不与外界相连<ul>
<li>不同于移动IP（该技术把漫游的主机接入互联网）</li>
</ul>
</li>
</ul>
<h4 id="MAC层协议"><a href="#MAC层协议" class="headerlink" title="MAC层协议"></a>MAC层协议</h4><p>802.11标准把MAC层按功能从下到上分为</p>
<ul>
<li>分布协调功能DCF<ul>
<li>实现：不采用中心控制算法，把每个节点分布式接入CSMA机制</li>
<li>功能：向上提供争用服务<ul>
<li>必须实现的功能</li>
</ul>
</li>
<li>用到的时间间隔：SIFS和DIFS</li>
</ul>
</li>
<li>点协调功能PCF<ul>
<li>实现：使用集中控制算法，由接入点AP集中控制整个BSS的活动</li>
<li>功能：向上提供无争用服务<ul>
<li>可选功能，比如自组网络就不需要</li>
</ul>
</li>
<li>用到的时间间隔：PIFS</li>
</ul>
</li>
</ul>
<h4 id="MAC帧格式"><a href="#MAC帧格式" class="headerlink" title="MAC帧格式"></a>MAC帧格式</h4><ul>
<li>数据帧<ul>
<li>帧控制：2字节，包含1比特的<strong>去往AP</strong>标识和1比特的<strong>来自AP</strong>标识<ul>
<li>去往AP为1，来自AP为0：该帧当前的下一中间站是AP</li>
<li>去往AP为0，来自AP为1：该帧当前的上一中间站是AP</li>
</ul>
</li>
<li>持续期：2字节，用作信道预约</li>
<li>地址1：下一中间站地址<ul>
<li>去往AP：AP的BSSID</li>
<li>来自AP：目的站MAC地址</li>
</ul>
</li>
<li>地址2：上一中间站地址<ul>
<li>去往AP：源站MAC地址</li>
<li>来自AP：AP的BSSID</li>
</ul>
</li>
<li>地址3：源站或目的站的MAC地址<ul>
<li>去往AP：目的站MAC地址</li>
<li>来自AP：源站的MAC地址</li>
</ul>
</li>
<li>序号：2字节，标志帧的序号</li>
<li>地址4：只在自组移动网使用</li>
<li>帧主体：0-2312字节</li>
<li>FCS：4字节的校验位</li>
</ul>
</li>
<li>RTS帧<ul>
<li>帧控制：2字节</li>
<li>持续期：2字节</li>
<li>接收地址：6字节</li>
<li>发送地址：6字节</li>
<li>FCS：4字节</li>
</ul>
</li>
<li>CTS和ACK帧<ul>
<li>帧控制：2字节</li>
<li>持续期：2字节</li>
<li>接收地址：6字节</li>
<li>FCS：4字节</li>
</ul>
</li>
</ul>
<h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><ul>
<li>VLAN：把较大的局域网划分为多个较小的逻辑上的虚拟局域网<ul>
<li>每个VLAN为一个广播域<ul>
<li>若两个主机不在一个广播域，则通信时需要网络层来路由转发</li>
</ul>
</li>
<li>每个VLAN在物理上可以横跨多个交换机</li>
</ul>
</li>
<li>VLAN标签：4字节<ul>
<li>加入位置：以太网帧的源地址和类型字段之间</li>
<li>功能：指出该帧所属的虚拟局域网</li>
<li>组成<ul>
<li>前2字节：0x8100，表示这个是802.1Q帧</li>
<li>半字节：4位空闲比特</li>
<li>后1.5字节：12位VLAN标识，即VID</li>
</ul>
</li>
</ul>
</li>
<li>802.1Q帧：加入了VLAN标签的帧<ul>
<li>最大帧长从1518字节变成1522字节</li>
<li>交换机把普通帧拓展为802.1Q帧，或把802.1Q帧化简为普通帧<ul>
<li>802.1Q帧只在交换机之间传送</li>
</ul>
</li>
</ul>
</li>
<li>下图可以辅助理解</li>
</ul>
<img src="/2021/11/25/network3/VLAN.png" class title="this is VLAN">
<h2 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>覆盖范围：远超城市级别的范围</li>
<li>连接方式：由多个结点交换机和交换机链路组成<ul>
<li>点到点的连接方式</li>
</ul>
</li>
<li>OSI参考模型层次：物理层、数据链路层、网络层<ul>
<li>协议主要在网络层，主要的问题是路由和转发（见网络层的章节）</li>
</ul>
</li>
<li>广域网是因特网核心部分，和局域网共同组成互联网</li>
<li>广域网强调资源共享，局域网强调数据传输</li>
</ul>
<h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><h4 id="协议组成"><a href="#协议组成" class="headerlink" title="协议组成"></a>协议组成</h4><ul>
<li>封装IP数据报的方法</li>
<li>链路控制协议LCP<ul>
<li>建立、配置、测试和管理数据链路</li>
</ul>
</li>
<li>网络控制协议NCP<ul>
<li>组成：包含多个支持不同网络层协议的协议</li>
<li>功能：使得PPP协议两端可运行不同网络层协议</li>
</ul>
</li>
</ul>
<h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><ul>
<li>首部<ul>
<li>开始标志符<ul>
<li>固定为0x7E</li>
</ul>
</li>
<li>地址字段<ul>
<li>固定为0xFF</li>
</ul>
</li>
<li>控制字段<ul>
<li>固定为0x03</li>
</ul>
</li>
<li>协议字段：2字节<ul>
<li>0x0021：信息部分为IP数据报</li>
<li>0xC021：信息部分为LCP分组</li>
<li>0x8021：信息部分为NCP中的某个协议</li>
</ul>
</li>
</ul>
</li>
<li>信息部分：不超过1500字节<ul>
<li>因为是点对点的传输，没有冲突，不需要争用，因此不限制最短帧长</li>
</ul>
</li>
<li>尾部<ul>
<li>FCS：2字节<ul>
<li>CRC校验字段</li>
</ul>
</li>
<li>结束标志符<ul>
<li>固定为0x7E</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h4><ul>
<li>链路静止<ul>
<li>建立物理连接后，进入<strong>链路建立</strong>状态</li>
</ul>
</li>
<li>链路建立<ul>
<li>一方发送LCP配置请求帧</li>
<li>另一方回应<ul>
<li>配置确认帧：接受所有选项，进入<strong>鉴别</strong>状态</li>
<li>配置否认帧：不接受所有选项，返回<em>*链路静止</em>状态*</li>
<li>配置拒绝帧：无法识别或不接受部分选项，返回<strong>链路建立</strong>状态（继续协商LCP配置）</li>
</ul>
</li>
</ul>
</li>
<li>鉴别<ul>
<li>鉴别成功，进入<strong>网络层协议</strong>状态</li>
<li>鉴别失败，进入<strong>链路终止</strong>状态，最终回到<strong>链路静止</strong>状态</li>
</ul>
</li>
<li>网络层协议<ul>
<li>双方发送NCP中的协议，协商NCP配置<ul>
<li>比如发送NCP中支持IP的协议IPCP</li>
</ul>
</li>
<li>配置完成后进入<strong>链路打开</strong>状态</li>
</ul>
</li>
<li>链路打开<ul>
<li>可以相互发送分组</li>
<li>可以发送回送请求LCP分组和回送回答LCP分组<ul>
<li>检查链路状态</li>
</ul>
</li>
<li>可以发送终止请求LCP分组和终止确认LCP分组<ul>
<li>进入<strong>链路终止</strong>状态，最终回到<strong>链路静止</strong>状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>PPP协议应用在直接连接的两个结点链路上<ul>
<li>是面向字节的点到点协议</li>
</ul>
</li>
<li>不是单纯的数据链路层的协议，也包含物理层和网络层的内容<ul>
<li>默认情况当作数据链路层协议</li>
</ul>
</li>
<li>透明传输<ul>
<li>异步线路（默认）传输时，字符填充法</li>
<li>同步线路（如SONET/SDH）传输时，零比特填充法</li>
</ul>
</li>
<li>提供差错检测，不提供纠错功能<ul>
<li>不可靠传输协议，无序号、无确认</li>
</ul>
</li>
<li>只支持全双工</li>
<li>不同网络协议的两端，可以用PPP协议通信</li>
</ul>
<h2 id="数据链路层设备"><a href="#数据链路层设备" class="headerlink" title="数据链路层设备"></a>数据链路层设备</h2><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><ul>
<li>网桥：连接不同的以太网的设备<ul>
<li>形成更大的以太网</li>
</ul>
</li>
<li>网段：即原本的各以太网<ul>
<li>各网段是隔离开的冲突域</li>
</ul>
</li>
</ul>
<h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><ul>
<li>概念<ul>
<li>本质是多端口的网桥</li>
<li>把网络分成较小的冲突域</li>
<li>对工作站透明</li>
<li>实现VLAN方便（前面介绍过）</li>
</ul>
</li>
<li>原理<ul>
<li>检测帧的源MAC地址、目的MAC地址</li>
<li>和系统内部动态查找表比较<ul>
<li>源MAC地址不在表中，则加入表中</li>
<li>目的MAC地址不在表中，则从所有非输入端口发送（广播）</li>
<li>目的MAC地址在表中，则把帧从相应端口发送</li>
</ul>
</li>
</ul>
</li>
<li>特点<ul>
<li>每个端口连一个主机</li>
<li>可以同时连多个端口<ul>
<li>无碰撞，全双工</li>
</ul>
</li>
<li>转发表通过自学习算法逐步建立</li>
<li>用户通信时独占传输媒体带宽<ul>
<li>比如以太网带宽10 Mb/s，交换机连N个用户，则每个用户10 Mb/s，交换机总容量10N Mb/s</li>
</ul>
</li>
<li>拥有多种速率端口，方便不同需求的用户</li>
</ul>
</li>
<li>交换模式<ul>
<li>直通式<ul>
<li>方法：检查帧目的地址后即可发送</li>
<li>优点：速度快</li>
<li>缺点：不安全、不能支持不同速率的端口</li>
</ul>
</li>
<li>存储转发式<ul>
<li>方法：把帧存到高速缓存器，检查数据正确性，有误则丢弃，否则通过查找表把帧从输出端口发出</li>
<li>优点：安全、支持不同速率的端口</li>
<li>缺点：速度慢</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h2><p><em>本节补充冲突域和广播域的辨析</em></p>
<ul>
<li>冲突域<ul>
<li>定义：可能发生冲突的网卡组成冲突域</li>
<li>举例：一般为一个网段</li>
</ul>
</li>
<li>广播域<ul>
<li>定义：广播能相互收到信息的网卡组成广播域</li>
<li>举例：一般为一个局域网</li>
</ul>
</li>
<li>设备隔离总结<ul>
<li>集线器和中继器：不隔离冲突域、不隔离广播域</li>
<li>网桥和交换机：隔离冲突域、不隔离广播域</li>
<li>路由器：隔离冲突域、隔离广播域</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第四章-网络层</title>
    <url>/2021/11/28/network4/</url>
    <content><![CDATA[<h2 id="网络层的功能"><a href="#网络层的功能" class="headerlink" title="网络层的功能"></a>网络层的功能</h2><h3 id="异构网络互联"><a href="#异构网络互联" class="headerlink" title="异构网络互联"></a>异构网络互联</h3><ul>
<li>中间设备：又叫中间系统、中继系统<ul>
<li>物理层中间设备：中继器、集线器</li>
<li>数据链路层中间设备：网桥、交换机</li>
<li>网络层中间设备：路由器</li>
<li>网络层以上中间设备：网关<ul>
<li>路由器的一种，详见NAT</li>
</ul>
</li>
</ul>
</li>
<li>异构网络：物理结构不同的网络</li>
<li>异构网络互联：把多个<strong>异构网络</strong>用网络层的<strong>中间设备</strong>连接，构成<strong>更大的网络系统</strong><ul>
<li>该更大的网络叫虚拟互联网络（或逻辑互联网络、IP网络）</li>
</ul>
</li>
</ul>
<h3 id="路由和转发"><a href="#路由和转发" class="headerlink" title="路由和转发"></a>路由和转发</h3><p>网络层从上到下分为控制层、数据层，对应路由器的两个功能（当然主机也有这个功能）</p>
<ul>
<li>路由选择（控制层的功能）<ul>
<li>根据路由选择协议，构造路由表（目的地址、子网掩码、下一跳地址）</li>
<li>和相邻路由器交换信息，更新维护路由表</li>
</ul>
</li>
<li>分组转发（数据层的功能）<ul>
<li>输入端口<ul>
<li>从比特流中提取出帧，进一步提取出数据报</li>
</ul>
</li>
<li>交换结构<ul>
<li>根据路由表和ARP表算出转发表（在讨论路由选择时不区分转发表）</li>
<li>根据转发表把分组从适合的端口转发（涉及队列管理、任务调度）</li>
<li>交换有三种硬件实现，即通过存储器、总线、互联网络</li>
</ul>
</li>
<li>输出端口<ul>
<li>把数据报封装为帧，进一步封装为比特流</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="SDN基本概念"><a href="#SDN基本概念" class="headerlink" title="SDN基本概念"></a>SDN基本概念</h3><ul>
<li>原理<ul>
<li>传统网络：路由器分布式的实现控制层、数据层</li>
<li>软件定义网络（SDN）：远程控制器集中式实现控制层，路由器分布式实现数据层<ul>
<li>远程控制器一般由多个服务器组成，掌握整个网络状态，算出最佳路由后把转发表发给路由器</li>
</ul>
</li>
</ul>
</li>
<li>接口<ul>
<li>北向接口：SDN控制器提供给应用开发者的编程接口</li>
<li>南向接口：SDN控制器提供给路由器的双向会话接口</li>
<li>东西向接口：SDN控制器集群内部控制器间的通信接口</li>
</ul>
</li>
<li>优点<ul>
<li>控制层和数据层分离，全局优化路由，高速转发</li>
<li>网络灵活可编程</li>
<li>降低成本</li>
</ul>
</li>
<li>缺点<ul>
<li>控制器崩溃则网络崩溃，不安全</li>
<li>网络规模扩大，控制器成为性能瓶颈</li>
</ul>
</li>
</ul>
<h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><ul>
<li>拥塞<ul>
<li>概念：通信子网中，分组过量导致网络性能下降的现象</li>
<li>坏处：导致分组丢失，甚至网络死锁</li>
</ul>
</li>
<li>拥塞控制<ul>
<li>判断网络是否拥塞<ul>
<li>一般用网络吞吐量（相比正常吞吐量）的下降程度表示拥塞程度</li>
</ul>
</li>
<li>控制拥塞<ul>
<li>开环控制：网络设计时考虑导致拥塞的因素，一种静态预防方法</li>
<li>闭环控制：网络运行时检测系统拥塞的情况，一种动态调整方法</li>
</ul>
</li>
</ul>
</li>
<li>拥塞控制和流量控制的对比<ul>
<li>不同点<ul>
<li>流量控制是两个点之间通信量的控制，希望发送速率不大于接收速率</li>
<li>拥塞控制涉及整个通信子网所有的主机</li>
</ul>
</li>
<li>相同点<ul>
<li>都控制发送方的发送速率（发送窗口）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><h3 id="静态路由和动态路由"><a href="#静态路由和动态路由" class="headerlink" title="静态路由和动态路由"></a>静态路由和动态路由</h3><ul>
<li>静态路由算法（非自适应路由算法）<ul>
<li>由网络管理员手动设置路由信息</li>
<li>简便，开销小，适合小型网络</li>
</ul>
</li>
<li>动态路由算法（自适应路由算法）<ul>
<li>路由器之间交换信息，按算法优化得到路由表项</li>
<li>性能好，但需要复杂的算法，增加网络的负担</li>
<li>常见动态路由算法<ul>
<li>距离-向量路由</li>
<li>链路状态路由</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="距离-向量路由算法"><a href="#距离-向量路由算法" class="headerlink" title="距离-向量路由算法"></a>距离-向量路由算法</h3><p><em>本节只介绍大概的算法思想，具体的算法后面再介绍</em></p>
<ul>
<li>数据结构<ul>
<li>每个结点维护一个向量，表示当前结点到各目的地的距离（比如跳数）</li>
</ul>
</li>
<li>算法思想<ul>
<li>若接收到相邻结点发来的向量，则对自身向量进行更新</li>
<li>若本结点的向量更新，则将其发到所有的相邻结点</li>
</ul>
</li>
<li>特点<ul>
<li>结点给<strong>相邻结点</strong>发送<strong>从自身到所有其他结点</strong>的最低费用估计</li>
<li>有慢收敛现象（在RIP协议再解释），可能导致路由回路问题（分组在两个结点间来回传递）</li>
</ul>
</li>
<li>典型算法<ul>
<li>RIP算法</li>
</ul>
</li>
</ul>
<h3 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h3><p><em>本节只介绍大概的算法思想，具体的算法后面再介绍</em></p>
<ul>
<li>数据结构<ul>
<li>每个结点维护<strong>直接链路状态</strong>和<strong>全局网络拓扑</strong><ul>
<li>直接链路状态即到各相邻路由器的距离、费用、时延等代价度量</li>
<li>全局网络拓扑即整个网络的非负带权图</li>
</ul>
</li>
</ul>
</li>
<li>算法思想<ul>
<li>若接收其他任何结点更新后的直接链路状态，则对本结点的全局网络拓扑进行更新，并用Dijkstra算法重新计算路由</li>
<li>若自身直接链路状态变化时，则将其发送到所有其他的路由器<ul>
<li>洪泛法</li>
</ul>
</li>
</ul>
</li>
<li>特点<ul>
<li>结点给<strong>其他所有结点</strong>发送<strong>从自身到相邻结点</strong>的链路状态</li>
<li>每个结点有全局的网络拓扑信息，能直接算出路由，快速收敛汇聚</li>
</ul>
</li>
<li>典型算法<ul>
<li>OSPF算法</li>
</ul>
</li>
</ul>
<h3 id="层次路由"><a href="#层次路由" class="headerlink" title="层次路由"></a>层次路由</h3><p><em>本节只介绍大概的算法思想，具体的算法后面再介绍</em></p>
<ul>
<li>层次路由<ul>
<li>把整个互联网划分为多个自治系统AS（每个AS可包括若干局域网）</li>
<li>AS内和AS间采用各自的路由协议</li>
</ul>
</li>
<li>内部网关协议IGP（域内路由选择协议）<ul>
<li>即AS内部的路由选择协议</li>
<li>比如RIP、OSPF</li>
</ul>
</li>
<li>外部网关协议EGP（域间路由选择协议）<ul>
<li>即AS之间的路由选择协议</li>
<li>比如BGP</li>
</ul>
</li>
</ul>
<h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><h3 id="分组格式"><a href="#分组格式" class="headerlink" title="分组格式"></a>分组格式</h3><ul>
<li>首部<ul>
<li>版本（半字节）<ul>
<li>IP的版本</li>
</ul>
</li>
<li>首部长度（半字节）<ul>
<li>单位是$4B$</li>
<li>最大值为$15\times 4B=60B$</li>
<li>最常见为$20B$（即首部不采用可选项）</li>
</ul>
</li>
<li>服务类型（1字节）<ul>
<li>比如区分一些要求低时延、高吞吐量的数据报</li>
</ul>
</li>
<li>总长度（2字节）<ul>
<li>指首部和数据部分总长度</li>
<li>单位是$1B$</li>
</ul>
</li>
<li>标识（2字节）<ul>
<li>每个数据报（分组）一个标识</li>
<li>同一个数据报片的各分片标识相同</li>
</ul>
</li>
<li>标志（3位）<ul>
<li>低位MF表示后面是否还有分片</li>
<li>中位DF表示是否禁止对本分组继续分片</li>
<li>高位没用</li>
</ul>
</li>
<li>片偏移（13位）<ul>
<li>表示分片在原数据报的相对位置</li>
<li>单位是8字节（因为分片大小规定是8字节的整数倍）</li>
</ul>
</li>
<li>生存时间TTL（1字节）<ul>
<li>表示数据报在网络中可通过的最大路由器数</li>
<li>路由器收到TTL为0的数据报则丢弃，否则转发并把TTL减1</li>
</ul>
</li>
<li>协议（1字节）<ul>
<li>指出传输层是什么协议</li>
<li>6表示TCP，17表示UDP</li>
</ul>
</li>
<li>首部校验和（2字节）<ul>
<li>网络层只对首部进行差错检测</li>
</ul>
</li>
<li>源地址（4字节）<ul>
<li>最初发送方IP地址</li>
</ul>
</li>
<li>目的地址（4字节）<ul>
<li>最终接收方IP地址</li>
</ul>
</li>
<li>可变长字段<ul>
<li>0-40字节</li>
</ul>
</li>
</ul>
</li>
<li>数据部分<ul>
<li>首部加数据部分长度不超过帧的最大传送单元MTU</li>
</ul>
</li>
</ul>
<h3 id="分组分片"><a href="#分组分片" class="headerlink" title="分组分片"></a>分组分片</h3><ul>
<li>分片<ul>
<li><strong>中间路由器</strong>转发分组时，由于MTU的限制，会<strong>把分组分片</strong></li>
<li>各分片的标识同原始分组</li>
<li>设置分片的标志和片偏移</li>
</ul>
</li>
<li>重组<ul>
<li>在<strong>目的地重组分片</strong></li>
<li>把同标识的分片取出，根据片偏移排序重组为原分组</li>
</ul>
</li>
</ul>
<h3 id="转发流程"><a href="#转发流程" class="headerlink" title="转发流程"></a>转发流程</h3><ul>
<li>提取目的地址D</li>
<li>如果某个直连路由器的网络和D匹配（需要用到该网络的子网掩码），则数据报<strong>直接交付</strong><ul>
<li>否则是间接交付，继续往下执行</li>
</ul>
</li>
<li>如果路由表有D的路由，则转发到下一跳<ul>
<li>否则继续执行</li>
</ul>
</li>
<li>如果路由表有网络和D匹配（需要用到该网络的子网掩码），则转发到下一跳<ul>
<li>否则继续执行</li>
</ul>
</li>
<li>如果路由表有默认路由，则转发到该默认路由器<ul>
<li>否则报告转发出错</li>
</ul>
</li>
</ul>
<p><em>注：路由器转发帧，不改变网络层地址，通过ARP和下一跳地址来修改MAC源地址、目的地址。此外，网桥转发帧时不改变帧的源MAC地址。</em></p>
<h3 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h3><ul>
<li>定义：全球唯一的32位网络层标识符<ul>
<li>简称IP地址</li>
</ul>
</li>
<li>组成<ul>
<li>网络号：整个因特网范围唯一</li>
<li>主机号：网络号对应的网络的范围内唯一</li>
</ul>
</li>
<li>传统网络划分<ul>
<li>A类：0（网络号固定部分）、7位网络号可变部分、24位主机号</li>
<li>B类：10（网络号固定部分）、14位网络号可变部分、16位主机号</li>
<li>C类：110（网络号固定部分）、21位网络号可变部分、8位主机号</li>
<li>D类（多播地址）：1110（网络号固定部分）、多播地址可变部分</li>
<li>E类：1111（网络号固定部分）、保留将来使用</li>
</ul>
</li>
<li>IP地址划分<ul>
<li>网络号全0，主机号全0<ul>
<li><strong>本网络</strong>的本主机</li>
<li>DHCP协议用到</li>
<li>注：网络号全0指的是网络号的可变部分全0，下同</li>
</ul>
</li>
<li>网络号全0，主机号非全0非全1<ul>
<li><strong>本网络</strong>的某主机</li>
</ul>
</li>
<li>网络号全0，主机号全1<ul>
<li><strong>本网络</strong>的广播</li>
</ul>
</li>
<li>网络号非全0，主机号全0<ul>
<li><strong>网络号对应</strong>的网络本身</li>
</ul>
</li>
<li>网络号非全0，主机号非全0非全1<ul>
<li><strong>网络号对应</strong>网络的某主机</li>
</ul>
</li>
<li>网络号非全0，主机号全1（等价于本网络的广播，因为路由器隔离广播域）<ul>
<li>网络号非全1：网络号对应的网络的广播地址（全称直接广播地址）</li>
<li>网络号全1：整个TCP/IP网络的广播（全称受限广播地址）</li>
</ul>
</li>
<li>127.x.x.x，且主机号x.x.x非全0非全1<ul>
<li>环回自检地址，表示主机本身</li>
<li>主机检查自身端口状况时使用，带该地址的数据报不会出现在网络层</li>
</ul>
</li>
</ul>
</li>
<li>特点<ul>
<li>网络号由IP地址管理机构分配，主机号由得到网络的单位自行分配</li>
<li>路由器每个端口一个IP地址，一般至少两个IP地址</li>
<li>交换机连接的各局域网，其主机IP地址网络号相同，但主机号不同</li>
</ul>
</li>
</ul>
<h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><ul>
<li>设计目的<ul>
<li>节省公用IP地址的消耗<ul>
<li>一个公用IP让多个主机访问因特网</li>
</ul>
</li>
<li>隐藏内部网络结构，更安全<ul>
<li>多个私有IP在外界看来是一个公用IP</li>
</ul>
</li>
</ul>
</li>
<li>工作原理<ul>
<li>把IP地址划分为公有IP和私有IP</li>
<li>公有IP给外界的因特网（广域网WAN）使用</li>
<li>私有IP给内部的专用网（局域网LAN）使用<ul>
<li>又叫可重用地址，因为不同局域网的私有IP可以重复</li>
<li>网段包括10.x.x.x、127.16-31.x.x、192.168.x.x</li>
</ul>
</li>
<li>通过<strong>网关NAT路由器</strong>实现两种地址的转换<ul>
<li>转换表项是（私有IP，端口号）和（公有IP，端口号）之间的映射</li>
<li>转换表项由管理员手动添加</li>
</ul>
</li>
</ul>
</li>
<li>转换步骤<ul>
<li>从LAN到WAN<ul>
<li>转换源IP和源端口</li>
</ul>
</li>
<li>从WAN到LAN<ul>
<li>转换目的IP和目的端口</li>
</ul>
</li>
</ul>
</li>
<li>网关NAT路由器<ul>
<li>工作在传输层，因为使用到传输层的端口号</li>
</ul>
</li>
</ul>
<h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><ul>
<li>定长子网划分：把两级IP地址（网络号、主机号）变成三级IP地址（网络号、子网号、主机号）<ul>
<li>把主机号分成子网号和主机号</li>
<li>划分后的主机号全0表示子网，全1表示子网的广播</li>
<li>划分后的各子网长度相等，有着相同的子网掩码</li>
</ul>
</li>
<li>变长子网划分<ul>
<li>给出各子网的32位IP地址和子网掩码</li>
<li>划分后的子网大小不完全相同，有着不同的子网掩码</li>
</ul>
</li>
</ul>
<h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><ul>
<li>32位二进制串，高位若干1，低位若干0<ul>
<li>1为网络号和子网号的位数</li>
<li>0为主机号的位数</li>
</ul>
</li>
<li>IP地址和子网掩码进行位运算“与”，得到子网的地址</li>
<li>默认子网掩码<ul>
<li>255.0.0.0</li>
<li>255.255.0.0</li>
<li>255.255.255.0</li>
</ul>
</li>
</ul>
<h3 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h3><ul>
<li>定义：无分类域间路由选择CIDR是基于子网掩码的网络划分方法<ul>
<li>两级IP地址（网络前缀、主机号）</li>
<li>网络前缀的长度不固定<ul>
<li>消除了传统A、B、C网络地址（网络号定长）的概念</li>
</ul>
</li>
<li>主机号可以进一步划分成一些子网<ul>
<li>子网的<strong>网络前缀变长</strong></li>
</ul>
</li>
</ul>
</li>
<li>斜线记法（CIDR记法）<ul>
<li>IP地址/网络前缀的比特数</li>
</ul>
</li>
<li>CIDR地址块：网络前缀相同的IP地址的集合</li>
<li>路由聚合<ul>
<li>按需要<strong>缩短网络前缀</strong>，使得多个IP地址的网络前缀相同</li>
<li>把这些IP地址用一个CIDR块表示，节约路由表的表项</li>
</ul>
</li>
<li>最长前缀匹配（最佳匹配）<ul>
<li>路由表中，匹配网络前缀最长的表项</li>
</ul>
</li>
</ul>
<h3 id="有关协议"><a href="#有关协议" class="headerlink" title="有关协议"></a>有关协议</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><ul>
<li>地址解析协议ARP<ul>
<li>网络层协议</li>
<li>每个主机维护一个ARP高速缓存（ARP表），完成本局域网各IP地址到MAC地址的映射</li>
</ul>
</li>
<li>工作原理<ul>
<li>ARP表中有下一跳的IP地址，则映射为MAC地址，封装为帧发送</li>
<li>ARP表中没有下一跳的IP地址，则广播<strong>ARP请求分组</strong>（MAC地址为全1）<ul>
<li>下一跳设备收到ARP请求后，发出<strong>ARP响应分组</strong>，包含其IP地址到MAC地址的映射</li>
<li>原设备收到后更新ARP表，然后根据映射封装并发送帧即可 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h4><ul>
<li>动态主机配置协议DHCP<ul>
<li>基于UDP的应用层协议<ul>
<li>工作方式为客户-服务器方式（应用层部分会介绍）</li>
</ul>
</li>
<li>给主机动态的分配IP地址<ul>
<li>分配是临时的，分配时长叫做<strong>租用期</strong></li>
</ul>
</li>
</ul>
</li>
<li>步骤原理<ul>
<li>第一步：客户机广播<strong>DHCP发现报文</strong><ul>
<li>源IP全0，目的IP全1</li>
<li>广播域中可以有多个DHCP服务器</li>
</ul>
</li>
<li>第二步：服务器收到后<ul>
<li>若数据库中有该计算机配置信息，则发送此配置信息</li>
<li>否则广播<strong>DHCP提供报文</strong>，包括提供给客户机的IP地址（服务器从地址池中取出）和配置信息</li>
</ul>
</li>
<li>第三步：客户机收到后，如果接受则广播<strong>DHCP请求报文</strong><ul>
<li>一般只接受第一个收到的提供报文</li>
<li>请求报文中包括请求的IP地址</li>
</ul>
</li>
<li>第四步：服务器收到后，广播<strong>DHCP确认报文</strong><ul>
<li>包括提供的IP地址和配置信息</li>
</ul>
</li>
</ul>
</li>
<li>使用广播的原因<ul>
<li>第一步：服务器地址未知</li>
<li>第二步：客户机还没有IP地址</li>
<li>第三步：告知所有DHCP服务器，客户机将选择某服务器</li>
<li>第四步：客户机还没有IP地址</li>
</ul>
</li>
<li>重新登陆<ul>
<li>客户机重新登陆时从第三步开始，发送请求报文</li>
<li>服务器接收到后<ul>
<li>若同意客户继续使用IP地址，则发送确认报文</li>
<li>否则发送<strong>否定报文NACK</strong>，客户机要从第一步开始</li>
</ul>
</li>
</ul>
</li>
<li>更新租约<ul>
<li>在租用期过半时，客户从第三步开始，发送请求报文，更新租约</li>
</ul>
</li>
</ul>
<h4 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h4><ul>
<li>网际控制报文协议ICMP<ul>
<li>报告差错和异常情况</li>
<li>ICMP报文作为IP的数据部分，加上IP头部组成IP数据报</li>
</ul>
</li>
<li>ICMP差错报告报文<ul>
<li>终点不可达<ul>
<li>包括网络无路由、主机不可达、端口不可达等多种子情况</li>
</ul>
</li>
<li>源点抑制<ul>
<li>用于拥塞控制</li>
</ul>
</li>
<li>时间超过<ul>
<li>路由器发送情况：收到TTL为0的分组，丢弃</li>
<li>终点主机发送情况：等待数据报分片超时，丢弃已接收的分片</li>
</ul>
</li>
<li>参数问题<ul>
<li>数据报的头部有错误字段</li>
</ul>
</li>
<li>改变路由（重定向）<ul>
<li>路由器告知主机更好的路由</li>
</ul>
</li>
</ul>
</li>
<li>不发送的ICMP差错报告情况<ul>
<li>ICMP差错报告报文所在的数据报</li>
<li>第一个分片后面所有分片的数据报</li>
<li>有组播地址的数据报</li>
<li>有特殊地址（如127.0.0.0和0.0.0.0）的数据报</li>
</ul>
</li>
<li>ICMP询问报文<ul>
<li>回送请求和回答报文<ul>
<li>测试目的主机的可达状态</li>
</ul>
</li>
<li>时间戳请求和回答报文</li>
<li>地址掩码请求和回答报文</li>
<li>路由器询问和通告报文</li>
</ul>
</li>
<li>应用<ul>
<li>路由追踪命令（Traceroute/Tracert）<ul>
<li>工作层：网络层</li>
<li>原理：依次发送TTL为1、2、3的报文，通过接收的<strong>ICMP时间超过报文</strong>，推测路由信息</li>
</ul>
</li>
<li>分组网间探测命令（PING）<ul>
<li>工作层：应用层，不使用传输层</li>
<li>原理：通过<strong>ICMP回送请求和回答报文</strong>测试连通性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul>
<li>16字节的IP地址</li>
<li>拓展的地址层次，查路由更快<ul>
<li>第一级：全球级</li>
<li>第二级：单个场点级</li>
<li>第三级：单个网络接口级</li>
</ul>
</li>
<li>灵活且简化的首部格式<ul>
<li>从12个固定项变成8个固定项</li>
<li>一些固定项变成选项</li>
</ul>
</li>
<li>协议允许继续扩充</li>
<li>即插即用（自动配置IP）</li>
<li>支持资源预分配</li>
<li>只能在源点才能分片（不能路由分片）</li>
<li>首部长度是8字节整数倍<ul>
<li>固定长度40字节</li>
</ul>
</li>
<li>身份验证和保密功能</li>
</ul>
<h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><ul>
<li>目的地址类型<ul>
<li>单播：目的站是一个计算机</li>
<li>多播：目的站是一组计算机的每个</li>
<li>任播：目的站是一组计算机的某一个（通常是最近的一个）</li>
</ul>
</li>
<li>地址表示<ul>
<li>16字节分成8组，每组2字节<ul>
<li>写成16进制</li>
</ul>
</li>
<li>组间用分号隔开，若有连续的0，有一次机会写成双分号<ul>
<li>举例：4BF5::BA5F:39A:A:2176省去了0:0:0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="从IPv4到IPv6"><a href="#从IPv4到IPv6" class="headerlink" title="从IPv4到IPv6"></a>从IPv4到IPv6</h3><ul>
<li>IPv6和IPv4不兼容<ul>
<li>IPv6系统不能和IPv4系统直接通信</li>
</ul>
</li>
<li>采用逐步演进法过渡<ul>
<li>IPv6系统能接收、路由和转发IPv4的分组</li>
</ul>
</li>
<li>过渡策略<ul>
<li>双协议栈<ul>
<li>一台设备同时安装IPv4和IPv6的协议栈</li>
</ul>
</li>
<li>隧道技术<ul>
<li>把IPv6作为IPv4的数据部分进行封装</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><h3 id="自治系统"><a href="#自治系统" class="headerlink" title="自治系统"></a>自治系统</h3><ul>
<li>即AS，内部的所有路由器在AS内都是连通的</li>
<li>AS内采用<strong>域内路由</strong>，AS间采用<strong>域间路由</strong></li>
</ul>
<h3 id="域内路由和域间路由"><a href="#域内路由和域间路由" class="headerlink" title="域内路由和域间路由"></a>域内路由和域间路由</h3><ul>
<li>内部网关协议IGP<ul>
<li>如RIP和OSPF</li>
</ul>
</li>
<li>外部网关协议EGP<ul>
<li>如BGP-4</li>
</ul>
</li>
</ul>
<h3 id="RIP路由协议"><a href="#RIP路由协议" class="headerlink" title="RIP路由协议"></a>RIP路由协议</h3><ul>
<li>路由信息协议RIP<ul>
<li>应用层协议<ul>
<li>RIP封装在UDP中，基于UDP</li>
</ul>
</li>
<li>基于距离-向量路由算法<ul>
<li>距离定义为跳数</li>
</ul>
</li>
</ul>
</li>
<li>规定<ul>
<li>一条路径最多15个网络，距离为16表示不可达<ul>
<li>说明只适合小型网</li>
</ul>
</li>
<li><strong>相邻的</strong>路由器<strong>默认隔30秒</strong>交换<strong>整个路由表</strong>的信息<ul>
<li>网络拓扑改变时也交换信息</li>
<li>3分钟没收到相邻路由器的信息，则将其标记为不可达（距离设为16）</li>
</ul>
</li>
<li>主机只接收路由信息不发送路由信息</li>
<li>路由表表项：网络、最短距离、下一跳地址<ul>
<li>不包括子网掩码，因此域内网络的子网掩码要求相同</li>
<li>最新的RIP2支持变长子网掩码和CIDR</li>
</ul>
</li>
</ul>
</li>
<li>算法：收到邻居的路由表后，对于每个表项<ul>
<li>最短距离加1，下一跳改成邻居</li>
<li>若网络在本地路由表找不到<ul>
<li>则把表项插入本地路由表</li>
</ul>
</li>
<li>若网络在本地路由表找到<ul>
<li>当下一跳相同，则用新表项代替原表项</li>
<li>当下一跳不同，则新旧表项中，选择距离较小的</li>
</ul>
</li>
</ul>
</li>
<li>特点<ul>
<li>实现简单，开销小</li>
<li>只适合小型网<ul>
<li>规模太大时，路由表太大</li>
</ul>
</li>
<li>有路由回路问题<ul>
<li>相邻的两个路由器互相认为到达某网络的下一跳为对方</li>
</ul>
</li>
<li>慢收敛<ul>
<li>路由出故障需要较长时间才能把正确路由传送到全局</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="OSPF路由协议"><a href="#OSPF路由协议" class="headerlink" title="OSPF路由协议"></a>OSPF路由协议</h3><ul>
<li>开放最短路径优先协议OSPF<ul>
<li>网络层协议<ul>
<li>OSPF封装在IP中，基于IP</li>
</ul>
</li>
<li>基于链路状态路由算法</li>
</ul>
</li>
<li>规定<ul>
<li>在<strong>链路状态变化</strong>时，向<strong>所有</strong>路由器发送<strong>到相邻路由器</strong>的链路状态信息<ul>
<li>泛洪法</li>
<li>链路状态信息即各边和各边的代价（包含32位序号，序号大，状态新）</li>
<li>只发送相邻的链路状态，网络可以规模很大</li>
</ul>
</li>
<li>不同的IP<strong>服务类型</strong>TOS，计算不同的路由</li>
<li>到同一个网络的多个同代价路径，可以<strong>负载平衡</strong></li>
<li>通过<strong>鉴别</strong>功能，保证链路状态信息发送给可信的路由器</li>
<li>支持变长子网掩码和CIDR</li>
<li>每个路由器有一个<strong>链路状态数据库</strong>（AS的网络拓扑图）<ul>
<li>同步：使得各路由器的链路状态数据库保持一致</li>
</ul>
</li>
</ul>
</li>
<li>算法原理<ul>
<li>数据库建立：当新路由器开始工作<ul>
<li>每个路由器发送<strong>数据库描述分组</strong>（全部链路的摘要信息）给邻居</li>
<li>邻居回应<strong>链路状态请求分组</strong>，请求所缺链路的详细信息</li>
</ul>
</li>
<li>数据库维护<ul>
<li>默认每隔10秒，和邻居交换<strong>问候分组</strong>，确认可达性</li>
<li>默认每隔30分钟，刷新一次数据库</li>
</ul>
</li>
<li>数据库同步（泛洪法）<ul>
<li>链路状态改变时，向邻居（认为在下游）发送<strong>链路状态更新分组</strong></li>
<li>下游邻居收到后，继续向下游转发、更新数据库、向上游回应<strong>链路状态确认分组</strong>（仅一次）</li>
</ul>
</li>
<li>路由表更新<ul>
<li>根据数据库对应的全网拓扑图，用Dijkstra算法算出最优路径，更新路由表</li>
</ul>
</li>
</ul>
</li>
<li>区域<ul>
<li>定义：AS进一步的划分，使得区域成为泛洪法的范围</li>
<li>目的：链路状态数据库是区域内的网络拓扑图，减少通信量</li>
<li>分层：区域中有一个是主干区域<ul>
<li>通过区域边界路由器，连接AS内的其他（下层）区域</li>
<li>通过AS边界路由器，连接其他AS</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="BGP路由协议"><a href="#BGP路由协议" class="headerlink" title="BGP路由协议"></a>BGP路由协议</h3><ul>
<li>边界网关协议BGP<ul>
<li>应用层协议<ul>
<li>BGP封装在TCP中，基于TCP</li>
</ul>
</li>
<li>基于路径-向量路由算法</li>
</ul>
</li>
<li>规定<ul>
<li>AS内的路由器分为<strong>边界网关</strong>和<strong>内部路由器</strong><ul>
<li>边界网关可以有多个，但不会太多</li>
<li>AS之间通过各自的边界网关直连</li>
</ul>
</li>
<li>BGP会话（建立TCP连接后才能进行BGP会话）<ul>
<li>eBGP会话：边界网关和其他AS的边界网关交换信息</li>
<li>iBGP会话：边界网关和自身AS的内部路由器交换信息</li>
</ul>
</li>
<li>BGP路由表：只记录跨AS的目的网络的路由信息</li>
<li>边界网关的BGP路由表项格式<ul>
<li>目标的网络前缀（说明BGP支持CIDR）</li>
<li>经过的AS序列（不允许重复）</li>
<li>下一跳</li>
</ul>
</li>
<li>内部路由器的BGP路由表项格式<ul>
<li>目标的网络前缀</li>
<li>下一跳</li>
</ul>
</li>
<li>路由信息交换的时机<ul>
<li>BGP启动时，和邻居交换路由表所有信息</li>
<li>路由发生变化时，只交换路由表的变化部分信息</li>
</ul>
</li>
</ul>
</li>
<li>算法原理<ul>
<li>边界网关给其他AS的边界网关发送路由表信息前<ul>
<li>把自身插入AS序列</li>
<li>把下一跳改成自身</li>
</ul>
</li>
<li>边界网关收到其他AS的边界网关发送路由表信息后<ul>
<li>拒绝不符合规定的路由交换信息</li>
<li>更新本地BGP路由表</li>
<li>转发符合规定的路由交换信息（不作修改的发给AS内的路由器）</li>
</ul>
</li>
<li>内部路由器收到边界网关的交换信息后（不考虑路由选择）<ul>
<li>根据内部网关协议，计算到边界网关的下一跳</li>
<li>更新本地BGP路由表</li>
</ul>
</li>
<li>路由选择（考虑同一个目的地有多个路径时，内部路由器采取的选择策略）<ul>
<li>本地偏好：管理员给AS内每个网关一个偏好值，选择偏好值最高的网关所在路径</li>
<li>最少AS跳数：选择AS序列最短的路径</li>
<li>热土豆法：选择最近的网关所在路径（最近的评判标准由内部网关协议给定）</li>
</ul>
</li>
</ul>
</li>
<li>BGP-4报文类型<ul>
<li>打开报文：边界网关发送给邻居（对等端），请求建立BGP会话</li>
<li>更新报文：发送路由信息或撤销路由信息</li>
<li>保活报文：回应打开报文，并周期性的证实会话的连通性</li>
<li>通知报文：发送检测到的差错</li>
</ul>
</li>
</ul>
<h2 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>组播（多播）：源主机发送<strong>单个分组</strong>到达<strong>一组目标主机（多播组）</strong><ul>
<li>单个分组<ul>
<li>在路由器分叉时，复制为多个分组</li>
<li>到达局域网时，则不用复制，由硬件实现组播</li>
</ul>
</li>
<li>同一组主机使用一个组播地址<ul>
<li>IPv4的D类地址就是组播地址</li>
<li>IPv6也有地址空间保留给组播地址</li>
</ul>
</li>
<li>一个主机可以加入多个多播组</li>
<li>组播只给UDP提供服务</li>
</ul>
</li>
<li>组（多）播路由器<ul>
<li>支持组播路由选择协议的路由器（后面会介绍此协议）</li>
</ul>
</li>
<li>组（多）播数据报<ul>
<li>目的地址为组播地址（后面会介绍此地址）</li>
</ul>
</li>
<li>需要的协议<ul>
<li>因特网组管理协议IGMP<ul>
<li>让<strong>本局域网的多播路由器</strong>知道<strong>本局域网是否有主机</strong>参与或退出某个多播组</li>
</ul>
</li>
<li>组播路由选择协议<ul>
<li>让不同局域网的多播路由器协作，使得多播数据报能送到组中所有的主机</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="IP组播地址"><a href="#IP组播地址" class="headerlink" title="IP组播地址"></a>IP组播地址</h3><p>IPv4的组播地址共32位</p>
<ul>
<li>前4位是1110，总地址范围是224.0.0.0-239.255.255.255</li>
<li>第5-9位不使用</li>
<li>只使用低23位<ul>
<li>唯一对应一个MAC组播地址<ul>
<li>在最终局域网内硬件多播时使用</li>
<li>范围是01-00-5E-00-00-00到01-00-5E-7F-FF-FF</li>
<li>和IP组播地址有相同的低23位</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h3><ul>
<li>网络层协议 <ul>
<li>封装在IP数据报中，首部协议字段为2</li>
</ul>
</li>
<li>工作原理<ul>
<li>第一阶段<ul>
<li>某主机向本地多播路由器，发送带有IGMP的多播IP数据报</li>
<li>本地多播路由器收到后，将该主机加入对应多播组</li>
<li>调用<strong>组播路由选择协议</strong>，把消息发给其他多播路由器</li>
</ul>
</li>
<li>第二阶段<ul>
<li>本地多播路由器周期性探询本地主机，判断其是否还是组中成员</li>
<li>如果本地主机是组中成员，收到探询后需要回复响应</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="组播路由选择协议"><a href="#组播路由选择协议" class="headerlink" title="组播路由选择协议"></a>组播路由选择协议</h3><ul>
<li>本质作用<ul>
<li>给定源点和目标多播组</li>
<li>找到以该源点为根，以组播路由器为结点的组播转发树<ul>
<li>叶子对应的组播路由器和多播组的某成员在一个局域网</li>
<li>树的特性保证不会出现路由环路</li>
</ul>
</li>
</ul>
</li>
<li>路由算法<ul>
<li>基于距离向量算法</li>
<li>基于链路状态算法</li>
<li>协议无关组播PIM</li>
</ul>
</li>
</ul>
<h2 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>定义<ul>
<li>保证移动结点在跨网段漫游时<strong>保持IP地址和网络权限不变</strong></li>
</ul>
</li>
<li>有关概念<ul>
<li>移动结点：指跨网段漫游的主机</li>
<li>永久地址（归属地址）：移动结点原始的IP地址</li>
<li>归属网络：移动结点原始连接的网络</li>
<li>本地代理（归属代理）：归属网络中实现<strong>代理</strong>功能的路由器或主机<ul>
<li>代理作为一个应用层的功能，结合后面的通信过程理解</li>
</ul>
</li>
<li>外地网络（被访网络）：移动结点离开归属网络后，处于外地网络</li>
<li>外部代理：外部网络中实现<strong>代理</strong>功能的路由器或主机</li>
<li>转交地址：移动结点在外部网络的临时IP地址</li>
</ul>
</li>
</ul>
<h3 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h3><ul>
<li>移动结点在本地网络，按传统TCP/IP方式通信</li>
<li>移动结点漫游到第一个外地网络（锚外地网络）<ul>
<li>在该外地网络发现外地代理（锚外地代理）</li>
<li>外地代理记录移动结点的MAC地址，并为其注册转交地址<ul>
<li>该地址仅供外地代理、归属代理、移动结点使用，在互联网中不需要唯一</li>
</ul>
</li>
<li>外地代理把转交地址通知移动结点的归属代理</li>
<li>归属代理登记移动结点的转交地址信息<ul>
<li>同时构建一条通往外地代理的隧道</li>
</ul>
</li>
</ul>
</li>
<li>某主机发分组给移动结点<ul>
<li>首先到达归属代理</li>
<li>归属代理把分组的归属地址改成转交地址，发给外地代理</li>
<li>外地代理把分组的转交地址改成归属地址，并进一步改成移动结点的MAC地址</li>
<li>移动结点收到分组</li>
</ul>
</li>
<li>移动结点发分组给某主机<ul>
<li>源地址为归属地址，目的地址为相应IP地址，直接发送即可<ul>
<li>不经过归属代理</li>
</ul>
</li>
</ul>
</li>
<li>移动结点漫游到其他外地网络<ul>
<li>移动结点把之前的外地代理中的转交地址注销<ul>
<li>归属代理处的旧转交地址不需要由之前的外地代理注销，后面会被新转交地址替代</li>
</ul>
</li>
<li>在新的外地网络中发现外地代理，后面和锚外地网络同理</li>
</ul>
</li>
<li>移动结点回到本地网<ul>
<li>注销外地代理和归属代理的转交地址，按传统TCP/IP方式通信</li>
</ul>
</li>
</ul>
<h2 id="网络层设备"><a href="#网络层设备" class="headerlink" title="网络层设备"></a>网络层设备</h2><p><em>本节和前面的网络层功能路由和转发的互为补充</em></p>
<h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><ul>
<li>组成<ul>
<li>路由选择部分（控制部分）<ul>
<li>路由选择处理机（含有路由表）</li>
</ul>
</li>
<li>分组转发部分<ul>
<li>输入端口</li>
<li>交换结构（含有转发表）</li>
<li>输出端口</li>
</ul>
</li>
</ul>
</li>
<li>功能<ul>
<li>可以连接不同协议的各网络，隔离广播域</li>
<li>核心的功能是路由和转发（本章前面已有介绍）</li>
</ul>
</li>
<li>实现OSI模型的层包括<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
</ul>
</li>
</ul>
<h3 id="路由表和路由转发"><a href="#路由表和路由转发" class="headerlink" title="路由表和路由转发"></a>路由表和路由转发</h3><ul>
<li>路由表项的默认列<ul>
<li>目的网络IP地址</li>
<li>子网掩码</li>
<li>下一跳IP地址<ul>
<li>若直连则直接交付，不需要填下一跳</li>
</ul>
</li>
<li>接口</li>
</ul>
</li>
<li>转发表的默认列<ul>
<li>目的网络IP地址<ul>
<li>以太网交换机中的转发表，没有该项</li>
</ul>
</li>
<li>下一跳MAC地址</li>
<li>接口</li>
</ul>
</li>
<li>路由<ul>
<li>由软件实现</li>
<li>在数据达到前可以提前计算、更新路由</li>
</ul>
</li>
<li>转发<ul>
<li>一般由硬件实现，也可以软件实现</li>
<li>在数据达到后才进行转发<ul>
<li>更新转发表：根据输入端口传来的数据报的目的IP地址，用路由表和ARP表得到出转发表项</li>
<li>硬件实现交换：输入<strong>目的IP地址</strong>，把数据报和<strong>下一跳MAC地址</strong>发送到相应<strong>接口</strong>（将来在输出端口组装为帧和比特流）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第三章-存储器层次结构</title>
    <url>/2021/10/25/ComputerOrganization-3/</url>
    <content><![CDATA[<h2 id="存储器概述"><a href="#存储器概述" class="headerlink" title="存储器概述"></a>存储器概述</h2><ul>
<li>存储元：一个二进制物理器件</li>
<li>存储单元：多个存储元组成，一般是一次存取的单位</li>
<li>存储体：若干存储单元</li>
</ul>
<h3 id="存储器分类"><a href="#存储器分类" class="headerlink" title="存储器分类"></a>存储器分类</h3><ul>
<li>按作用/层次分类<ul>
<li>主存储器<ul>
<li>即内存，存放计算机运行期间的数据和程序</li>
<li>CPU可以直接进行访问，也可以和Cache和辅存交换数据</li>
<li>容量较小，速度较快，价格较高</li>
</ul>
</li>
<li>辅助存储器<ul>
<li>即外存，存放暂时不用的数据和程序，或需要长期保存的信息。</li>
<li>CPU不能直接访问</li>
<li>容量大，速度慢，成本低</li>
</ul>
</li>
<li>高速缓冲存储器<ul>
<li>即Cache，位于主存和CPU之间，存放正在执行的程序段和数据，加速CPU访问数据</li>
<li>CPU可以直接进行访问，可以和内存交换数据</li>
<li>容量小，价格高，存取速度和CPU速度匹配</li>
</ul>
</li>
</ul>
</li>
<li>按存取方式分类<ul>
<li>随机存储器RAM<ul>
<li>存取时间和位置无关，可随机存取，使用方便</li>
<li>常用于主存和缓冲存储器</li>
<li>可分为静态RAM（SRAM），动态RAM（DRAM）</li>
</ul>
</li>
<li>只读存储器ROM<ul>
<li>只能随机读出，不能写入</li>
<li>通常存放不变的程序、字库、常数，和RAM共同作为主存的一部分</li>
</ul>
</li>
<li>串行访问存储器<ul>
<li>顺序存取存储器SAM：只能按某种顺序存取，存取时间和位置有关，速度慢，如磁带</li>
<li>直接存取存储器DAM：不是全局随机存取，也不是完全顺序存取，折中方案。先确定数据所在小区域，在区域内顺序查找，如磁盘、光盘（详见第7章笔记）</li>
</ul>
</li>
</ul>
</li>
<li>按存储介质分类<ul>
<li>磁表面存储器<ul>
<li>磁盘</li>
<li>磁带</li>
</ul>
</li>
<li>磁芯存储器</li>
<li>半导体存储器<ul>
<li>MOS型存储器</li>
<li>双极型存储器</li>
</ul>
</li>
<li>光存储器<ul>
<li>光盘</li>
<li>比如CD-ROM是只读型光盘，串行访问存储器，不是只读存储器ROM</li>
<li>详见第7章笔记</li>
</ul>
</li>
</ul>
</li>
<li>按信息的可保存性分类<ul>
<li>易失性存储器<ul>
<li>断电后存储信息就会消失</li>
<li>如RAM</li>
</ul>
</li>
<li>非易失性存储器<ul>
<li>断电后存储信息不会消失</li>
<li>如ROM、磁表面存储器、光存储器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="存储器性能指标"><a href="#存储器性能指标" class="headerlink" title="存储器性能指标"></a>存储器性能指标</h3><ul>
<li>存储容量<ul>
<li>存储字数$\times$字长</li>
<li>字数是地址空间大小，字长是一次存取的数据量</li>
</ul>
</li>
<li>单位成本：总成本/总容量</li>
<li>存储速度<ul>
<li>存取时间$T_a$：启动一次存储器操作到完成操作所需时间，具体区分为读出时间、写入时间</li>
<li>存取周期$T_m$<ul>
<li>两次独立访存之间所需最小时间间隔，即完整一次读写操作需要的时间</li>
<li>存取周期分为存取时间和恢复时间（有的存取是有破坏性的，需要恢复），因此一般情况$T_m&gt;T_a$</li>
</ul>
</li>
<li>数据宽度$W$：一个周期内可以从存储器进出的数据量</li>
<li>数据传输率$B_m$：<ul>
<li>又叫主存带宽，是单位时间内从主存进出的最大数据量</li>
<li>$B_m=\frac{W}{T_m}$，单位可以是字/秒、B/s、b/s</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="层次化存储器的基本结构"><a href="#层次化存储器的基本结构" class="headerlink" title="层次化存储器的基本结构"></a>层次化存储器的基本结构</h2><ul>
<li>多级存储系统的目的：解决存储器大容量、高速度、低成本的矛盾，上层作为下层的高速缓存（数据是副本），使得CPU访问速度接近最上层，容量和成本接近最下层，性价比大幅度提高</li>
<li>层级结构从上到下：<ul>
<li>寄存器、Cache、主存、磁盘、磁带或光盘</li>
<li>速度和成本递减，容量递增</li>
</ul>
</li>
<li>主要层次<ul>
<li>Cache-主存层次<ul>
<li>构成高速缓冲存储器，解决CPU和主存速度不匹配的问题</li>
<li>速度接近Cache，容量和成本接近主存</li>
<li>数据调动由硬件自动完成，对所有程序员透明（看不见）</li>
</ul>
</li>
<li>主存-辅存层次<ul>
<li>构成虚拟存储系统，解决存储系统的容量问题</li>
<li>速度接近主存，容量和成本接近辅存</li>
<li>数据调动由硬件和操作系统共同完成，对应用程序员透明（看不见）</li>
</ul>
</li>
</ul>
</li>
<li>CPU、Cache、主存相互之间可以直接交换信息，辅存只能和主存交换信息</li>
</ul>
<h2 id="半导体随机存取存储器"><a href="#半导体随机存取存储器" class="headerlink" title="半导体随机存取存储器"></a>半导体随机存取存储器</h2><ul>
<li>RAM（全称random-access memory）和ROM（全称read-only memory）都属于半导体存储器</li>
<li>前者支持随机存储，后者部分支持随机存储</li>
</ul>
<h3 id="SRAM存储器"><a href="#SRAM存储器" class="headerlink" title="SRAM存储器"></a>SRAM存储器</h3><ul>
<li>又叫做静态随机存储器，常用于实现Cache</li>
<li>易失性存储器</li>
<li>存储元一般是双稳态触发器（六晶体管MOS），非破坏性读出</li>
<li>行列独立技术，组织成数组，地址信号一次传送</li>
<li>相比DRAM价格高，存取快，集成度低，容量较小，功耗大</li>
<li>不需要刷新（后面会解释刷新）</li>
</ul>
<h3 id="DRAM存储器"><a href="#DRAM存储器" class="headerlink" title="DRAM存储器"></a>DRAM存储器</h3><ul>
<li>又叫做动态随机存储器，常用于实现主存储器</li>
<li>易失性存储器</li>
<li>存储元一般是栅极电容（单晶体管），比SRAM密度高很多，大都是破坏性读出</li>
<li>行列地址复用技术，组织成矩阵，地址信号分行列两次传送</li>
<li>相比SRAM价格低，存取慢，集成度高，容量大，功耗低</li>
<li>DRAM为了维持电荷，需要在刷新周期内（通常2ms）刷新<ul>
<li>刷新方法<ul>
<li>集中刷新：停止读写，用一段固定时间（少于刷新周期）刷新，读写不受刷新影响但期间不能访问存储器（称为死区）</li>
<li>分散刷新：每个存储周期内（通常微秒级别，且存取时间和刷新时间各占存储周期的一半）刷新一行，分多个周期刷新，没有死区但存取周期长</li>
<li>异步刷新：前两个方法的结合，根据刷新周期/行数，得到两次刷新行操作需要的时间间隔t，利用逻辑电路t时间产生一次刷新请求进行刷新，比集中刷新的死区短，比分散刷新的刷新次数少</li>
</ul>
</li>
<li>刷新说明<ul>
<li>以行为单位进行刷新，<strong>所有存储芯片</strong>的同一行同时刷新</li>
<li>刷新对CPU透明，芯片内部自行生成行地址</li>
<li>刷新内部本质类似于读操作，一次刷新时间等于一次访存时间</li>
<li>不是易失性存储器都需要刷新，比如SRAM不需要，DRAM需要</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ROM存储器"><a href="#ROM存储器" class="headerlink" title="ROM存储器"></a>ROM存储器</h3><ul>
<li>和RAM一样都是支持随机存取的存储器，但只供读出</li>
<li>非易失性半导体存储器，可靠性高</li>
<li>结构简单，位密度比可读写存储器高</li>
<li>类型包括<ul>
<li>掩模式只读存储器MROM<ul>
<li>半导体制造厂按用户要求在生产时写入，此后无法改变</li>
<li>可靠性高、集成度高、便宜，但不灵活</li>
</ul>
</li>
<li>一次可编程只读存储器PROM<ul>
<li>可以实现一次性编程的只读存储器</li>
<li>写入后无法改变</li>
</ul>
</li>
<li>可擦除可编程只读存储器EPROM<ul>
<li>可以由编程器写入信息</li>
<li>写入后可以先擦除全部内容再修改</li>
<li>分为紫外线擦除UVEPROM和电擦除EEPROM</li>
<li>虽然可读可写，但是编程次数有限，写入时间很长，无法代替RAM</li>
</ul>
</li>
<li>闪速存储器Flash Memory<ul>
<li>在EPROM和EEPROM基础上发展起来的</li>
<li>具备EPROM价格便宜，集成度高的特点</li>
<li>具备EEPROM的性能，且可以快速读取、快速擦除和重写</li>
<li>断电后可长期保存信息</li>
<li>反复写后会磨损</li>
<li>比如U盘和MP3</li>
<li>具体分为两种<ul>
<li>NOR Flash：读取速度快，用户能直接运行NOR Flash中代码，适合小容量存储器</li>
<li>NAND Flash：一次读一个块，价格便宜，用户不能直接运行NAND Flash中代码，适合大容量存储器</li>
</ul>
</li>
</ul>
</li>
<li>固态硬盘Solid State Drive（SSD）<ul>
<li>基于闪存技术，用固态电子存储芯片阵列制成（固体电容称作Solid）</li>
<li>和U盘本质差不多，但容量更大，存取性能更好</li>
<li>由控制单元（Flash翻译层）和存储单元（Flash芯片或DRAM芯片）组成</li>
<li>和Flash存储器一样可长期保存信息、可快速擦除重写</li>
<li>比传统磁盘读写快、质量轻、功耗低、体积小、抗震性好、安全性高、无噪音</li>
<li>缺点是价格高、容量不算很大、寿命短、容易磨损、数据破坏后难恢复</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="主存储器的组成"><a href="#主存储器的组成" class="headerlink" title="主存储器的组成"></a>主存储器的组成</h3><ul>
<li>地址寄存器：和CPU的MAR通过地址线相连</li>
<li>地址译码器：对地址寄存器内容进行译码，选择相应存储单元</li>
<li>存储体：字数个存储单元组成，每个存储单元是字长个存储元件（0和1）</li>
<li>读写控制电路：接收CPU中读写控制信号，控制存储体和CPU的MDR交换信息</li>
<li>MAR和MDR的位数对应存储器中的字数的位数和字的位数（即字长）</li>
</ul>
<h3 id="DRAM芯片和内存条"><a href="#DRAM芯片和内存条" class="headerlink" title="DRAM芯片和内存条"></a>DRAM芯片和内存条</h3><h4 id="DRAM存储芯片"><a href="#DRAM存储芯片" class="headerlink" title="DRAM存储芯片"></a>DRAM存储芯片</h4><ul>
<li>内部结构<ul>
<li>存储体：即存储矩阵，由行选择线、列选择线访问单元。</li>
<li>地址译码器：根据地址驱动相应读写电路</li>
<li>读写控制逻辑（IO控制电路）：控制被选中的存储单元的输入和输出</li>
</ul>
</li>
<li>外部引脚<ul>
<li>地址线：位数和存储空间大小有关</li>
<li>数据线：位数和存储单元大小有关</li>
<li>读写控制线：2位线（读线$\overline{RD}$、写线$\overline{WE}$，若共用$\overline{WE}$则只需要1位线）</li>
<li>片选信号线：1位CS线，存储器一般用多个芯片进行拓展，访问时需要片选信号控制是否选该片</li>
<li>电源线和地线 </li>
</ul>
</li>
<li>DRAM芯片需要定时刷新、地址线采用复用技术（地址线为正常的一半，容易忽略）</li>
<li>常见的DRAM芯片有<ul>
<li>EDORAM：extend data output RAM</li>
<li>DDR RAM：double data rate RAM，也叫DDR SDRAM。一个时钟读写两次，传输速度加倍</li>
<li>SDRAM：synchronous dynamic RAM</li>
</ul>
</li>
<li>DRAM芯片读写周期<ul>
<li>读写周期表示DRAM芯片两次连续读写操作所必须间隔的时间</li>
<li>读出（写入）时间比如读写周期小，从地址有效开始，并要求CS地址片选信号有效</li>
<li>RAS有效后将行地址送入引脚</li>
<li>CAS有效后将列地址送入引脚</li>
<li>读周期时$\overline{WE}$为高电平，需要在CAS有效前建立</li>
<li>写周期时$\overline{WE}$为低电平，需要在CAS有效前建立；写数据在CAS有效前保持稳定</li>
</ul>
</li>
</ul>
<img src="/2021/10/25/ComputerOrganization-3/T.png" class title="this is period of DRAM chip">
<h4 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h4><ul>
<li>对容量较小的单个芯片进行拓展，将多个芯片集成到一个内存条上，再由多个内存条和主板的ROM芯片组成主存空间</li>
<li>拓展的方法有<ul>
<li>位拓展<ul>
<li>加大字长</li>
<li>各芯片读写信号相连，接CPU读写控制线</li>
<li>各芯片地址线相连，接系统地址总线</li>
<li>各芯片的片选线相同，保证同时选中（各芯片的同位置单元）</li>
<li>各芯片单独引出各自的数据线，连接数据总线的各对应位</li>
</ul>
</li>
<li>字拓展<ul>
<li>加大字数</li>
<li>各芯片读写信号相连，接CPU读写控制线</li>
<li>各芯片地址线相连，接系统地址总线的<strong>低位</strong></li>
<li>各芯片的片选线不同，由系统地址总线的<strong>高位</strong>译码得到（后面将提到片选信号的译码方法）</li>
<li>各芯片的数据线，连接数据总线</li>
</ul>
</li>
<li>字位同时拓展<ul>
<li>加大字数和字长，各芯片分组，组内进行位拓展，组间进行字拓展</li>
<li>各芯片读写信号相连，接CPU读写控制线 </li>
<li>各芯片地址相连，接系统地址总线低位</li>
<li>各芯片片选线组间不同、组内相同。由系统地址总线的高位译码得到</li>
</ul>
</li>
</ul>
</li>
<li>片选信号的译码方法<ul>
<li>线选法<ul>
<li>高位的每位各自直接（或经过反相器）接到各芯片的片选端口，高位的各位中只能有一个1（或一个0）。</li>
<li>优点是不需要地址译码器，线路简单</li>
<li>缺点是地址不连续，空间利用不充分即地址资源存在浪费</li>
</ul>
</li>
<li>译码法<ul>
<li>需要地址译码器，$n$个高位对应$2^n$个输出线，接到对应的片的片选信号端口</li>
<li>地址连续</li>
<li>根据高位是否全部被使用进行译码，进一步分为全译码法和部分译码法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="主存和CPU之间的连接"><a href="#主存和CPU之间的连接" class="headerlink" title="主存和CPU之间的连接"></a>主存和CPU之间的连接</h3><ul>
<li>主存储器通过数据总线、地址总线、控制总线连接到CPU的MDR、MAR、读写控制信号</li>
<li>数据总线的位数就是数据宽度（前面存储器性能小节中提到过），当存储芯片位数不足数据宽度时需要用多个芯片进行位拓展</li>
<li>地址总线的位数决定了可寻址最大空间<ul>
<li>一般地址总线高位接到主存的地址译码器，一般是74LS138译码器。译码器的输入还需要接CPU的访存控制信号$\overline{MREQ}$，低电平有效，比如访问io时为高电平，表示不需要访问存储</li>
<li>一般地址总线低位接到每个芯片的地址线</li>
</ul>
</li>
<li>控制总线指出了总线周期的类型（读或写）和本次操作完成的时刻。<ul>
<li>如果读写只用一根线$\overline{WE}$，一般高电平为读，低电平为写</li>
<li>如果读写各自用一根线，则读命令线$\overline{RD}$和写命令线$\overline{WE}$都是低电平有效</li>
</ul>
</li>
</ul>
<h3 id="双端口RAM和多模块存储器"><a href="#双端口RAM和多模块存储器" class="headerlink" title="双端口RAM和多模块存储器"></a>双端口RAM和多模块存储器</h3><ul>
<li>为了提高CPU访存速度，采用双端口RAM（空间并行）、多模块存储器（时间并行）</li>
<li>双端口RAM<ul>
<li>存储器左右两个独立端口，有独立的数据线、地址线、控制线</li>
<li>两个控制器允许同时异步的访问存储单元</li>
<li>如果对不同地址读写，或对同一地址读，无冲突</li>
<li>如果对同一地址写则有写冲突；如果对同一地址读和写，则有读冲突</li>
<li>解决冲突的方法<ul>
<li>把$\overline{BUSY}$信号置0，相当于暂时关闭一个端口，延迟其访问</li>
<li>对每个存储看单元的数据进行CPU的权限分配</li>
</ul>
</li>
</ul>
</li>
<li>多模块存储器<ul>
<li>单体多字存储器<ul>
<li>一个存储体，每个存储单元多个字，比如m个</li>
<li>总线宽度也是m个字，一次并行读出</li>
<li>一个存取周期能取出m个指令，每隔1/m周期CPU向主存取一条指令，带宽增加</li>
<li>缺点是只能处理连续情况，遇到转移指令，效果不明显</li>
</ul>
</li>
<li>多体并行存储器（多体交叉存储器）<ul>
<li>多个存储体模块，每个模块有独立的控制电路、地址寄存器、数据寄存器，可并行</li>
<li>高位交叉编址：高位表示体号，低位表示体内地址，本质还是顺序访问，吞吐量基本不能提高</li>
<li>低位交叉编址：低位表示体号，高位表示体内地址，此时可以流水线并行存取，提高存储器带宽。设模块字长等于总线宽度，模块存取周期是T，总线传送周期是r（每隔至少r启动流水线下一模块，一般取r），模块数（交叉存取度）不小于T/r，使得每个模块的启动间隔大于T。因此，连续存取m个字需要时间T+(m-1)r，小于顺序存取时间mT，带宽明显提高。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="外部存储器"><a href="#外部存储器" class="headerlink" title="外部存储器"></a>外部存储器</h2><h3 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h3><ul>
<li>利用磁记录技术在涂有磁记录介质的旋转圆盘上进行数据存储</li>
<li>一般用于辅助存储器</li>
<li>由磁盘、磁盘驱动器、磁盘控制器构成</li>
<li>磁盘一般装在磁盘驱动器上，其数据的定位类似于柱坐标（盘面层号对应高度、扇区号对应角度、磁道号对应半径）</li>
<li>磁盘驱动器即磁盘机，是驱动磁盘转动并在盘面上通过磁头进行读写的装置</li>
<li>磁盘控制器即磁盘驱动器适配器，属于磁盘面向计算机的接口设备，接受计算机命令，向磁盘驱动器发出控制信号</li>
<li>存储容量大、数据传输率高、可长期保存</li>
<li>计组笔记第7章输入输出系统、操作系统的输入输出管理的外存管理部分也有介绍</li>
</ul>
<h3 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h3><ul>
<li>参考前面ROM存储器的固态硬盘内容</li>
</ul>
<h2 id="高速缓冲存储器Cache"><a href="#高速缓冲存储器Cache" class="headerlink" title="高速缓冲存储器Cache"></a>高速缓冲存储器Cache</h2><h3 id="程序访问局部性原理"><a href="#程序访问局部性原理" class="headerlink" title="程序访问局部性原理"></a>程序访问局部性原理</h3><ul>
<li>时间局部性：最近要用的信息可能是现在正在用的信息</li>
<li>空间局部性：最近要用的信息在存储空间里和正在用的信息是相邻的</li>
<li>利用程序局部性原理，把程序正在使用的部分存放的高速、容量较小的Cache中，使得访存操作通过Cache进行，提高程序速度</li>
</ul>
<h3 id="Cache基本原理"><a href="#Cache基本原理" class="headerlink" title="Cache基本原理"></a>Cache基本原理</h3><ul>
<li>通常由SRAM构成</li>
<li>主存和Cache划分为相等的块，Cache块又叫Cache行，每块有若干字节，块长度被称为块长或Cache行长</li>
<li>Cache块数远小于主存块数，仅保存主存最活跃的部分块</li>
<li>CPU发出读请求时<ul>
<li>如果命中Cache，则地址转换为Cache地址，直接对Cache读</li>
<li>如果没命中Cache，则需要访问主存，并把该字所在块从主存调入Cache<ul>
<li>如果Cache未满，则直接调入</li>
<li>如果Cache已满，根据替换算法，进行Cache中块的替换</li>
</ul>
</li>
<li>CPU和Cache交换字，主存和Cache交换块</li>
</ul>
</li>
<li>CPU发出写请求时<ul>
<li>如果命中Cache，则要考虑Cache数据和内存数据的一致性问题，采取一定的写策略，如<ul>
<li>全写法</li>
<li>写回法</li>
</ul>
</li>
<li>如果未命中Cache，则根据块是否调入Cache，可以分为<ul>
<li>写分配法</li>
<li>非写分配法</li>
</ul>
</li>
</ul>
</li>
<li>Cache命中率指的是CPU欲访问信息在Cache中的比率，越接近1越好</li>
<li>假设$t_c$是命中情况的Cache访问时间，$t_m$是未命中情况的访问时间（有可能比访问内存时间长，因为要先检查是否命中Cache），$H$是命中率，则$H\times t_c+(1-H)\times t_m$是Cache-内存系统平均访问时间</li>
<li>Cache的结构为<ul>
<li>存储主存信息的数据块</li>
<li>有效位：表示内容是否有用</li>
<li>标记位：标记该Cache行对应主存哪个块，位数和地址映射方式有关</li>
<li>块修改标记：提供写策略使用</li>
<li>替换标记：提供替换策略使用</li>
</ul>
</li>
</ul>
<h3 id="Cache和主存间映射方式"><a href="#Cache和主存间映射方式" class="headerlink" title="Cache和主存间映射方式"></a>Cache和主存间映射方式</h3><ul>
<li>映射指的是从主存地址映射到Cache地址</li>
<li>Cache中的每个块都标记了其在内存中对应的块位置（块号），并有一个块有效位</li>
<li>主要方法有<ul>
<li>直接映射<ul>
<li>主存每个块映射到Cache唯一位置。如果冲突直接替换，不需要替换算法</li>
<li>实现简单但不灵活。</li>
<li>主存块号$p_{mem}$的低c位是Cache行号$p_{cache}$，即$p_{cache}=p_{mem}\ mod\ 2^{c}$，高t位存入对应Cache行的标记中</li>
<li>主存地址的结构是：主存区号（作为Cache标记）、主存区内块号（等于Cache行号）、块内地址，前两者合并就是主存块号</li>
<li>访存先根据Cache行号对比Cache行的标记和主存地址的高t位是否一致，一致且有效位是1则命中，根据块内地址存取Cache行信息；否则不命中，先从主存读该地址对应的块到Cache中，并设置有效位为1，并标记高t位，然后将地址对应的数据送到CPU</li>
</ul>
</li>
<li>全相联映射<ul>
<li>主存块可以映射到Cache任何一位置，CPU访存需要和所有Cache行标记对比</li>
<li>灵活、冲突率低、空间利用率高、命中率高，但是标记比较速度慢，一般要用高成本的相联存储器（<strong>通常按内容寻址，也可以按地址寻址</strong>）进行映射</li>
<li>主存的地址结构是：主存块号（作为Cache标记）、块内地址</li>
</ul>
</li>
<li>组相联映射<ul>
<li>把Cache空间分组，组间直接映射，组内全相联，访存需要和对应组的所有Cache行标记对比</li>
<li>主存的地址结构是：主存区号、组内块号、组号、块内地址。前两者作为标记存入Cache；前三者就是主存块号</li>
<li>注意主存地址的组号是主存块号的低位，位数由组数来确定。这意味着主存中连续的块，在Cache中对应不同的分组</li>
<li>n路组相联，表示每个组有n个块；n为1（即组数为Cache块数）则变为直接映射；n为Cache块数（即组数为1）则变为全相联</li>
<li>访存先根据组号找到Cache组，再对比组内每个Cache块的标记。然后相等且有效位为1则命中，否则不命中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Cache中主存块替换算法"><a href="#Cache中主存块替换算法" class="headerlink" title="Cache中主存块替换算法"></a>Cache中主存块替换算法</h3><ul>
<li>对应全相联和组相联，当需要把主存块调入已满的Cache时，需要进行替换</li>
<li>常见的有<ul>
<li>随机算法RAND<ul>
<li>随即确定替换块，实现简单</li>
<li>未考虑程序局部性原理，命中率可能低</li>
</ul>
</li>
<li>先进先出算法FIFO<ul>
<li>选最早进入的块替换，实现简单</li>
<li>未考虑程序局部性原理，命中率可能低</li>
</ul>
</li>
<li>近期最少用算法LRU<ul>
<li>选最久没使用的块替换，考虑局部性原理，命中率比FIFO高</li>
<li>设置一个计数器，最近访问的Cache块（可能是新调入的，或命中原本Cache的）的计数器置0，Cache中已有的其他块计数器加1</li>
<li>计数器的位数等于组内块数对应的位数，即计数器的值小于组内块数，当计数器的值自增达到上限后，不再自增</li>
<li>如果Cache已满需要替换，则移出计数器值最大（等于组内块数减1）的块</li>
<li>当集中访问的、映射到同一组的存储块数超过了组内块数，很可能出现命中率很低的情况，称为抖动现象</li>
</ul>
</li>
<li>最不经常使用LFU算法<ul>
<li>选近期访问次数最少的块替换</li>
<li>每行设置一个计数器，新建的块从0开始计数</li>
<li>每命中一次计数器加1，替换时把计数器最小的块移出</li>
<li>和LRU类似思想但又有不同</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Cache写策略"><a href="#Cache写策略" class="headerlink" title="Cache写策略"></a>Cache写策略</h3><ul>
<li>写策略主要处理Cache和主存数据的一致性问题</li>
<li>当Cache写命中时<ul>
<li>全写法（写直通法、写直达法、write through）<ul>
<li>数据同时写入Cache和主存</li>
<li>好处是实现简单，替换块时不需要写回，随时保证主存数据准确</li>
<li>坏处是增加访存次数，降低Cache效率</li>
<li>可以在Cache和主存间加一个写缓冲，数据同时写入Cache和写缓冲器，一定程度解决速度不匹配问题，但也存在缓冲器溢出问题</li>
</ul>
</li>
<li>写回法（write back）<ul>
<li>只修改Cache</li>
<li>当块被替换掉时再写回主存</li>
<li>Cache行设置脏位，标记该块是否改过</li>
<li>减少访存次数，但有数据不一致的风险</li>
</ul>
</li>
</ul>
</li>
<li>当Cache未命中时<ul>
<li>写分配法（write-allocate）<ul>
<li>加载主存的块到Cache中，然后更新这个Cache块</li>
<li>和写回法配合使用，缺点是每次不命中都需要读取主存的块</li>
</ul>
</li>
<li>非写分配法（not-write-allocate）<ul>
<li>只更新主存，不调块到Cache</li>
<li>和全写法配合使用，缺点是未考虑程序空间局部性</li>
</ul>
</li>
<li>现代计算机往往采用多级Cache（通常3级）<ul>
<li>按离CPU从近到远分为L1 Cache、L2 Cache、L3 Cache等，速度递减，容量递增</li>
<li>比如两级Cache系统中，L1 Cache和L2 Cache采用全写法，因为访问L2 Cache速度比访问主存快，没有缓冲器溢出问题；L2 Cache和主存采用写回法，减少访存的次数。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h2><h3 id="虚拟存储器的基本概念"><a href="#虚拟存储器的基本概念" class="headerlink" title="虚拟存储器的基本概念"></a>虚拟存储器的基本概念</h3><ul>
<li>虚拟存储器由主存和辅存共同构成，具有前者的速度和后者的空间</li>
<li>虚地址<ul>
<li>又叫逻辑地址、程序地址，是编程允许涉及的地址</li>
<li>对应的存储空间为虚拟空间（程序空间）</li>
<li>虚地址=虚存页号+页内字地址</li>
</ul>
</li>
<li>实地址<ul>
<li>又叫物理地址，是实际的主存单元地址</li>
<li>对应的存储空间为实地址空间（主存地址空间）</li>
<li>实地址=主存页号+页内字地址</li>
</ul>
</li>
<li>辅存地址<ul>
<li>辅存的单元地址</li>
<li>对应的存储空间为辅存空间</li>
<li>辅存地址=磁盘号+盘面号+磁道号+扇区号</li>
</ul>
</li>
<li>CPU使用虚地址时，先由辅助软硬件找到虚地址和实地址的关系，判断该地址对应存储单元是否装入主存<ul>
<li>若在主存，则通过地址变换，CPU直接访问主存对应单元</li>
<li>若不在主存，则把该字的一个页或一个段调入主存后再由CPU访问；若主存已满则需要使用替换算法。</li>
</ul>
</li>
</ul>
<h3 id="页式虚拟存储器"><a href="#页式虚拟存储器" class="headerlink" title="页式虚拟存储器"></a>页式虚拟存储器</h3><ul>
<li>基本原理<ul>
<li>页式存储器以页为基本单位，虚拟空间和主存空间划分为同样大小的页，分别叫虚页和实页（也可以叫页框、页帧、块）。外存中也按同样大小划分，叫块</li>
<li>虚拟地址分为虚页号和页内地址，由页表转换为物理地址</li>
</ul>
</li>
<li>页表<ul>
<li>随着进程的建立，对应进程页表被建立</li>
<li>长期保存在主存中<ul>
<li>进程切换运行时，页表被调入主存</li>
<li>页表首地址和长度（用于越界检查）保存在进程控制块中，在进程执行时，存入页表基址寄存器PTR</li>
</ul>
</li>
<li>每个页表项包含<ul>
<li>有效位（装入位、状态位）：对应页是否在主存</li>
<li>脏位（修改位）：页面是否被修改过，一般结合回写策略，在页面从主存中被替换时写回磁盘</li>
<li>引用位（访问字段）：配合替换策略进行设置，比如帮助实现FIFO或LRU策略</li>
<li>物理页号或磁盘地址</li>
</ul>
</li>
</ul>
</li>
<li>虚拟地址转换到物理地址步骤<ul>
<li>查页表前先进行越界检查</li>
<li>然后通过虚页号（虚拟地址高位，作为页表的索引）和页表首地址找到页表项</li>
<li>如果有效则取出物理页号，和虚拟地址低位页内地址拼接，成为物理地址</li>
<li>如果无效则缺页，需要操作系统先进行缺页处理</li>
</ul>
</li>
<li>优点是页长固定，页表简单，调入方便；缺点是程序不一定是页整数倍，最后一页可能有空间浪费，同时页没有逻辑含义，不方便处理、保护、共享</li>
<li>快表TLB<ul>
<li>专门存放主存中页表的部分表项的缓冲表（类似于Cache）</li>
<li>通常是全相联或组相联</li>
<li>TLB表项包括：页表表项内容、TLB标记</li>
<li>TLB标记表示该TLB表项来自主存页表的哪一个表项<ul>
<li>全相联方式，TLB标记就是虚页号</li>
<li>组相联方式，TLB标记是虚页号的高位，虚页号的低位是TLB的组号</li>
</ul>
</li>
<li>如果查表时标记相等且有效位为1则命中，直接用TLB进行地址转换</li>
<li>如果不命中，则TLB缺失，需要访问主存查页表<ul>
<li>如果TLB未满，则把主存页表中相应表项调入TLB页表</li>
<li>如果TLB已满，则需要替换策略</li>
</ul>
</li>
</ul>
</li>
<li>多级页表<ul>
<li>考虑页表需要在内存中分配连续空间，页表较大时应当采用多级索引的方式</li>
<li>比如IA-32（因特尔32位架构）中采取二级索引，虚页号进一步分成页目录索引、页表索引两个部分。先用页目录物理首地址（存放在用户不可见的控制寄存器CR3中）和页目录索引确定页表物理首地址，再结合页表索引确定物理页号</li>
</ul>
</li>
<li>具有TLB和Cache的多级存储系统<ul>
<li>首先进行虚拟地址到物理地址的转换，（涉及快表TLB、多级页表、缺页处理）</li>
<li>然后根据物理地址，在Cache-主存系统中存取相应的数据</li>
<li>可能发生的缺失<ul>
<li>TLB缺失：硬件或软件（操作系统）处理，需要访问主存</li>
<li>缺页：软件（操作系统)处理，需要访问辅存（磁盘）</li>
<li>Cache缺失：硬件处理，需要访问内存</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="段式虚拟存储器"><a href="#段式虚拟存储器" class="headerlink" title="段式虚拟存储器"></a>段式虚拟存储器</h3><ul>
<li>主存按程序的逻辑分段，以段为主存和辅存的调度单位，各段长不一定</li>
<li>虚拟地址分为段号和段内地址（由用户显式提供，实际设计一般是编译器实现），物理地址分为物理段号和段内地址</li>
<li>页式虚拟地址是一维的（可以分解为页号和页内地址），段式虚拟地址是二维的（段号和段内地址必须分别给出），是因为页大小固定，段大小不固定</li>
<li>段表<ul>
<li>指出各段在主存中的首地址</li>
<li>包括段号、段长、段起始地址（高位相当于物理段号）、有效位（装入位）、段访问方式和标记等</li>
<li>段表的首地址和长度（用于越界检查）存放在段表寄存器</li>
</ul>
</li>
<li>虚拟地址转换到物理地址步骤<ul>
<li>查段表前先进行越界检查</li>
<li>再通过段表基地址和段号找到对应段表项</li>
<li>如果有效且段内偏移量不越界，则把段表项的段起始地址 + 段内地址（偏移量），得到物理地址</li>
</ul>
</li>
<li>优点是段的分界和程序分界对应，易于编译、管理、修改、保护、共享；缺点是段长度可变，分配空间不便，主存中容易产生段内碎片的浪费</li>
</ul>
<h3 id="段页式虚拟存储器"><a href="#段页式虚拟存储器" class="headerlink" title="段页式虚拟存储器"></a>段页式虚拟存储器</h3><h4 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h4><ul>
<li>程序按逻辑分段，段内划分为固定大小的页，主存空间也划分为大小相等的页</li>
<li>主存和辅存以页为调度单位</li>
<li>每个程序对应一个段表，每段对应一个页表。</li>
<li>段的长度是页长整数倍，段的起点是页的起点</li>
<li>虚地址分为段号、段内页号、页内地址（二维的，段号和段内地址分别给出）</li>
<li>地址转换<ul>
<li>根据段表寄存器的段表长检查是否越界</li>
<li>根据段号和段表寄存器中的段起始地址找到段表项，取出该段的页表首地址和页表长度</li>
<li>根据页表长度和段内页号判断是否越界</li>
<li>根据页表首地址和段内页号找到对应页表项</li>
<li>从页表项中取出实页号和页内地址拼接为物理地址</li>
</ul>
</li>
<li>优点是兼备段式和页式存储器的优点，可以按段共享和保护、按页进行存储调度</li>
<li>缺点是需要2次查表，开销较大</li>
</ul>
<h4 id="IA-32设计实例"><a href="#IA-32设计实例" class="headerlink" title="IA-32设计实例"></a>IA-32设计实例</h4><p><em>上一节是教科书中的经典段页式虚拟存储器的设计思路，下面给出英特尔32位架构（IA-32）/linux中的虚拟存储设计实例</em></p>
<ul>
<li>相关概念<ul>
<li>控制寄存器CR0中<ul>
<li>PE=1，进入保护模式</li>
<li>PG=1，启动分页</li>
</ul>
</li>
<li>段寄存器SR<ul>
<li>段包括：数据段DS，代码段CS，栈堆段SS、附加段ES、FS、GS</li>
<li><strong>实模式</strong>是在32位机器推出后，对16位机器模式的一种说法，16位段寄存器保存的是段起始地址的高位，需要左移4位后加上段内偏移量，算出20位的物理地址。这种模式目前很少使用，只在开机的时候短暂的处于实模式。</li>
<li><strong>保护模式</strong>把寻址空间从20位拓展到32位，段寄存器拓展为96位，但只有16位指令可见。这16位就是下面介绍的<strong>段选择符</strong>。</li>
<li>段寄存器的作用是直接（实模式）或间接（保护模式）的确定一个段的基地址（起始线性地址）</li>
</ul>
</li>
<li>段描述符：共64位8字节，存放一个段的有关信息，比如起始<strong>线性地址</strong>（如果不分页，则该线性地址就是物理地址）</li>
<li>段选择符：共16位，包括13位段描述符表索引INDEX、1位判断是否为局部描述符表的标记TI、2位的特权级别RPL</li>
<li>全局描述符表GDT<ul>
<li>一个处理器一个表，各个表项是各个段的段描述符，存放到内存里。</li>
<li>通常会有GDT描述符Cache来加速访问。</li>
</ul>
</li>
<li>局部描述符表LDT<ul>
<li>一个任务一个表，存在内存里。</li>
<li>LDT本身是一个段，其段描述符就是GDT的一个项。</li>
</ul>
</li>
<li>全局描述符表寄存器GDTR：存放全局描述符表的起始<strong>线性地址</strong></li>
<li>局部描述符表寄存器LDTR：存放局部描述符表的<strong>段选择符</strong>，在进程切换时由OS进行更新</li>
</ul>
</li>
<li>逻辑地址的计算<ul>
<li>CPU通过指令计算出操作数的有效地址EA（EA的计算参考下一章笔记的寻址方式部分）</li>
<li>有效地址作为32位段内偏移量，对应的段寄存器存放的是16位段选择符，共48位称为逻辑地址</li>
</ul>
</li>
<li>线性地址的计算（分段机制）<ul>
<li>当操作数的段寄存器（16位段选择符）的TI=0，使用全局描述符表<ul>
<li>GDTR（存的是GDT的线性首地址）和 INDEX（16位段选择符的高13位）定位一个段描述符的线性地址（若开启了分页需要进一步转成物理地址）</li>
<li>从段描述符中取出该段在线性存储空间中的首地址</li>
<li>该首地址加上32位段内偏移量得到线性地址</li>
</ul>
</li>
<li>当操作数的段寄存器（16位段选择符）的TI=1，使用局部描述符表<ul>
<li>GDTR（存的是GDT的线性首地址）和 LDTR（16位段选择符）的高13位定位LDT的段描述符的线性位置（如果开启了分页，需要转换到物理地址）</li>
<li>从LDT段描述符中取出LDT的线性起始地址，和操作数的段寄存器（16位段选择符）的高13位定位操作数的段描述符的线性地址（如果开启了分页，需要转换到物理地址）</li>
<li>从段描述符中取出操作数的线性起始地址，和操作数的段内偏移量（即有效地址EA）相加，得到操作数的线性地址</li>
</ul>
</li>
</ul>
</li>
<li>物理地址的计算（分页机制）<ul>
<li>线性地址分成10位页目录索引、10位页表索引、12位页内地址</li>
<li>页目录基址寄存器CR3（存放页目录内存首地址），结合页目录索引，定位页目录项（每项32位4字节，共1024项，刚好4KB，即页目录恰好占一页存储空间）</li>
<li>在页目录项中找到页表的物理首地址，结合页表索引，定位页表项（每项32位4字节，共1024项，刚好4KB，即页表恰好占一页存储空间）</li>
<li>在页表项中取出对应页的物理页号，结合页内地址，得到物理地址</li>
</ul>
</li>
<li>32位linux采用“扁平模式”<ul>
<li>线性地址的段首地址都设置为0，等于逻辑地址就是线性地址，所有数据都看作在一个段中。</li>
<li>这样做是因为不想使用16位系统中遗留下来的分段机制，但又保持了兼容性</li>
</ul>
</li>
</ul>
<h3 id="虚拟存储器和Cache比较"><a href="#虚拟存储器和Cache比较" class="headerlink" title="虚拟存储器和Cache比较"></a>虚拟存储器和Cache比较</h3><ul>
<li>相同之处<ul>
<li>都为了提高系统性能、具有容量、速度、价格的梯度</li>
<li>数据都划分为小的信息块，作为传递单位，虚存系统的信息块更大</li>
<li>都涉及地址的映射、替换算法、更新策略</li>
<li>都依据程序局部性原理来应用快速缓存的思想，把活跃的数据保存在高速的部件中</li>
</ul>
</li>
<li>不同之处<ul>
<li>Cache主要解决CPU和主存存取速度不匹配问题，虚拟存储器是解决主存容量问题</li>
<li>Cache由硬件实现，对所有程序员透明；虚拟存储器由OS和硬件实现，对系统程序员不透明，对应用程序员透明</li>
<li>因为CPU的速度约是Cache 10倍，主存速度约是硬盘100倍，所以虚拟存储器不命中时对性能影响更大</li>
<li>CPU和Cache都和主存有直接访问的通路，辅存和CPU没有直接通路</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第五章-中央处理器</title>
    <url>/2021/10/31/ComputerOrganization-5/</url>
    <content><![CDATA[<h2 id="CPU的功能和基本结构"><a href="#CPU的功能和基本结构" class="headerlink" title="CPU的功能和基本结构"></a>CPU的功能和基本结构</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>指令控制：即程序顺序控制。完成取指令、分析指令、执行指令的操作</li>
<li>操作控制：管理由内存取出的指令，并产生操作信号送往相应部件，控制这些部件动作</li>
<li>时间控制：对操作的时间进行限制，为每条指令按时间顺序提供应有的控制信号</li>
<li>数据加工：对数据进行算术和逻辑运算</li>
<li>中断处理：对计算机运行的异常和特殊请求进行处理</li>
</ul>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul>
<li>运算器：接受从控制器传来的命令并执行相应的动作，对数据进行加工、处理。组成为<ul>
<li>算术逻辑单元（ALU）：进行算术逻辑运算</li>
<li>暂存寄存器：暂存主存的数据，对应用程序员透明</li>
<li>累加寄存器（ACC）：暂存ALU结果，也可以作为加法的一个输入</li>
<li>通用寄存器组：比如EAX、EBX等，详见第4章笔记的x86汇编指令入门</li>
<li>程序状态字寄存器（PSW）：即条件码，如OF、SF、ZF、CF</li>
<li>移位器：对操作数或计算结果进行移位运算</li>
<li>计数器：控制乘除操作的步数</li>
</ul>
</li>
<li>控制器：类型有硬布线控制和微程序控制器。作用是协调和控制计算机各部件执行程序指令序列，包括取指令、分析指令、执行指令，组成为<ul>
<li>程序计数器（PC）：存放下一条执行指令的地址，取指令时使用，有自增功能</li>
<li>指令寄存器（IR）：保存正在执行的指令</li>
<li>指令译码器：对操作码译码， 给控制器提供特定操作信号</li>
<li>存储地址寄存器（MAR）：存放要访问数据的内存地址</li>
<li>存储数据寄存器（MDR）：存放要访问的数据</li>
<li>时序系统：产生时序信号，由时钟CLOCK分频得到</li>
<li>微操作信号发生器：根据IR、PSW和时序信号，产生控制整个计算机的控制信号，结构有<ul>
<li>组合逻辑型：对应硬布线控制器</li>
<li>存储逻辑型：对应微程序控制器</li>
</ul>
</li>
</ul>
</li>
<li>寄存器<ul>
<li>可以说CPU由运算器和控制器组成，事实上也可以说由运算器、控制器、寄存器组成</li>
<li>寄存器按用途分类<ul>
<li>通用寄存器：比如EAX、EBX、ECX、EDX、ESI、EDI、EBP</li>
<li>专用寄存器：比如段寄存器（CS、DS、SS、ES、FS、GS）、EIP、PSW、IR、MAR、MDR</li>
<li>控制寄存器：CR0-CR3</li>
<li>栈顶寄存器ESP可以认为是通用寄存器或专用寄存器</li>
</ul>
</li>
<li>寄存器按权限分类<ul>
<li>用户可见寄存器：通用寄存器、PSW、EIP、段寄存器</li>
<li>用户不可见寄存器：MAR、MDR、IR、控制寄存器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="指令执行过程"><a href="#指令执行过程" class="headerlink" title="指令执行过程"></a>指令执行过程</h2><h3 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h3><ul>
<li>从主存取出并执行一条指令的时间为指令周期</li>
<li>指令周期分为若干机器周期（CPU周期），不同指令不一定。<ul>
<li>机器周期可以看作指令执行过程的基准时间</li>
<li>通常以最复杂指令功能的时间，即内存读一个指令字的最短时间作为机器周期（存取周期）</li>
<li>如果指令字长等于存储字长，则取指周期可以看作机器周期</li>
</ul>
</li>
<li>机器周期分为若干时钟周期（节拍、振荡周期）</li>
<li>每条微操作至少需要一个时钟周期</li>
<li>如果总线不冲突，多个微操作可以在一个周期内并行（后面详见数据通路小节）。</li>
<li>机器速度除了和主频有关，也和机器周期的时钟数、指令周期的机器周期数、是否采用流水线方式等有关</li>
<li>最完整的指令周期包括四个机器周期<ul>
<li>取指周期：访存取指令、译码、更新PC</li>
<li>间指周期：访存取有效地址</li>
<li>执行周期：访存取操作数、执行操作</li>
<li>中断周期：访存保存程序断点、形成中断服务程序的入口地址、关中断</li>
</ul>
</li>
<li>各种指令的指令周期<ul>
<li>非访存指令<ul>
<li>取指周期</li>
<li>执行周期</li>
</ul>
</li>
<li>直接访存指令<ul>
<li>取指周期</li>
<li>执行周期</li>
</ul>
</li>
<li>间接访存指令<ul>
<li>取指周期</li>
<li>间指周期</li>
<li>执行周期</li>
</ul>
</li>
<li>转移指令<ul>
<li>取指周期</li>
<li>执行周期</li>
</ul>
</li>
<li>间接转移指令<ul>
<li>取指周期</li>
<li>间址周期</li>
<li>执行周期</li>
</ul>
</li>
</ul>
</li>
<li>4个标志触发器用来区分四个机器周期，为1表示状态有效<ul>
<li>FE：fetch</li>
<li>IND：indirect</li>
<li>EX：execute</li>
<li>INT：interupt</li>
</ul>
</li>
</ul>
<h3 id="指令周期的数据流"><a href="#指令周期的数据流" class="headerlink" title="指令周期的数据流"></a>指令周期的数据流</h3><h4 id="取指周期"><a href="#取指周期" class="headerlink" title="取指周期"></a>取指周期</h4><ul>
<li>任务是根据PC取指令放到IR中</li>
<li>数据流如下：<ul>
<li>发送指令地址给主存：PC-&gt;MAR-&gt;地址总线-&gt;主存</li>
<li>发送读信号给主存：CPU控制器-&gt;控制总线-&gt;主存</li>
<li>接收主存的指令数据：主存-&gt;数据总线-&gt;MDR-&gt;IR</li>
<li>更新程序计数器：默认是PC+1</li>
</ul>
</li>
</ul>
<h4 id="间指周期"><a href="#间指周期" class="headerlink" title="间指周期"></a>间指周期</h4><ul>
<li>任务是取操作数的有效地址</li>
<li>数据流如下（以一次间址为例）<ul>
<li>发送间接地址给主存：IR（地址字段）-&gt;MAR-&gt;地址总线-&gt;主存（若是多次间址，也可以是MDR-&gt;MAR-&gt;地址总线-&gt;主存）</li>
<li>发送读信号给主存：CPU控制器-&gt;控制总线-&gt;主存</li>
<li>接收主存的有效地址：主存-&gt;数据总线-&gt;MDR-&gt;IR</li>
</ul>
</li>
</ul>
<h4 id="执行周期"><a href="#执行周期" class="headerlink" title="执行周期"></a>执行周期</h4><ul>
<li>任务是根据操作码和操作数通过ALU产生执行结果</li>
<li>不同指令执行周期的数据流不一定</li>
</ul>
<h4 id="中断周期"><a href="#中断周期" class="headerlink" title="中断周期"></a>中断周期</h4><ul>
<li>任务是处理中断请求，需要保存程序断点</li>
<li>数据流如下<ul>
<li>控制器发送减1后的ESP给主存：ESP-&gt;MAR-&gt;地址总线-&gt;主存</li>
<li>发送写信号给主存：CPU控制器-&gt;控制总线-&gt;主存</li>
<li>程序断点存入主存：PC-&gt;MDR-&gt;数据总线-&gt;主存</li>
<li>更新PC：CPU控制器（中断程序入口）-&gt;PC</li>
</ul>
</li>
</ul>
<h3 id="指令执行方案"><a href="#指令执行方案" class="headerlink" title="指令执行方案"></a>指令执行方案</h3><ul>
<li>单指令周期<ul>
<li>对所有指令选用相同的执行时间完成，指令周期取决于耗时最长的指令</li>
<li>每个指令需要的时钟周期数固定</li>
<li>前一条指令完成后，下一条指令才能开始，即串行执行</li>
</ul>
</li>
<li>多指令周期<ul>
<li>对不同指令用不同执行步骤完成，不要求执行时间相同</li>
<li>不同指令的时钟周期数可不同</li>
<li>前一条指令完成后，下一条指令才能开始，即串行执行</li>
</ul>
</li>
<li>流水线方案<ul>
<li>指令之间并行执行，理想情况是每个时钟周期都能有一条指令完成</li>
<li>在每个时钟周期启动一条指令，多个指令同时运行，各自处于不同执行的步骤</li>
</ul>
</li>
</ul>
<h2 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a>数据通路</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>数据通路指的是功能部件之间传送数据的路径</li>
<li>功能部件有例如：ALU、通用寄存器、状态寄存器、异常中断处理逻辑等</li>
<li>通路的建立由控制信号控制，控制信号来自控制单元CU的输出端<ul>
<li>每个时钟周期内控制信号认为是不变的</li>
<li>部件名称加上op后缀，表示<strong>操作选择</strong>控制信号</li>
<li>部件名称加上in或out后缀，表示<strong>允许输入</strong>或<strong>允许输出</strong>控制信号</li>
<li>寄存器的允许输入信号in具体的可以叫写使能信号，<strong>受时钟驱动</strong>，因为寄存器是由触发器组成<ul>
<li>对应器件有时钟端口</li>
<li>每个时钟周期到来的时候，寄存器的值更新</li>
</ul>
</li>
<li>允许输出控制信号out所控制的部件称为三态门，不受时钟驱动<ul>
<li>信号高天平表示单向输出</li>
<li>信号低电平表示阻断</li>
</ul>
</li>
<li>内存读写的控制信号也受到时钟控制</li>
<li>PC自动更新受到控制信号PC+1的控制</li>
</ul>
</li>
<li>CPU中有一个多路选择器的一端输入是常数，大小是PC自动更新的字节数</li>
<li>一般用BUS表示数据总线</li>
</ul>
<h3 id="基本结构-1"><a href="#基本结构-1" class="headerlink" title="基本结构"></a>基本结构</h3><ul>
<li>CPU内部单总线方式：CPU中连接各部件的总线只有一条，结构简单但传输容易冲突，需要用到锁存器，是早期的选择</li>
<li>CPU内部多总线方式：CPU中有多条总线，也可以是具体指出二总线、三总线。总线数越多，需要的锁存器（暂存器）越少，需要的周期数越少，成本越高。</li>
<li>专用数据通路方式：不共享总线，根据数据通路情况设置专用的线路，现代计算机主要选择</li>
</ul>
<h3 id="微操作序列"><a href="#微操作序列" class="headerlink" title="微操作序列"></a>微操作序列</h3><ul>
<li>使用微操作序列可以描述具体的取指令、译码、执行指令过程中的数据流向</li>
<li>一般分两列写<ul>
<li>第一列的每行是每个周期（节拍）进行的微操作（用箭头指出数据流向，详见控制器功能的微操作命令分析）</li>
<li>若没有总线冲突，每行可以有多个微操作。</li>
<li>第二列的每行是微操作对应的控制信号情况</li>
<li>控制信号需要考虑的有in信号、out信号、op信号、PC+1信号、内存读信号R、内存写信号W</li>
</ul>
</li>
</ul>
<h2 id="控制器的功能和基本原理"><a href="#控制器的功能和基本原理" class="headerlink" title="控制器的功能和基本原理"></a>控制器的功能和基本原理</h2><h3 id="微操作命令分析"><a href="#微操作命令分析" class="headerlink" title="微操作命令分析"></a>微操作命令分析</h3><h4 id="取指周期-1"><a href="#取指周期-1" class="headerlink" title="取指周期"></a>取指周期</h4><ul>
<li>PC-&gt;MAR-&gt;DB（PC传给地址寄存器，传给数据总线）</li>
<li>1-&gt;R（读信号传给内存储器）</li>
<li>M(MAR)-&gt;MDR（内存中读指令到数据寄存器）</li>
<li>MDR-&gt;IR（指令放到IR中）</li>
<li>OP(IR)-&gt;CU（指令操作码给CU进行译码）</li>
<li>(PC)+1-&gt;PC（更新PC）    </li>
</ul>
<h4 id="间址周期"><a href="#间址周期" class="headerlink" title="间址周期"></a>间址周期</h4><ul>
<li>Ad(IR)-&gt;MAR（指令地址码给数据寄存器）</li>
<li>1-&gt;R（读信号传给内存储器）</li>
<li>M(MAR)-&gt;MDR（内存中读有效地址到数据寄存器）</li>
<li>MDR-&gt; Ad(IR)（有效地址传给IR）</li>
</ul>
<h4 id="执行周期-1"><a href="#执行周期-1" class="headerlink" title="执行周期"></a>执行周期</h4><ul>
<li>非访存指令<ul>
<li>CLA（清空ACC）：$0\rightarrow ACC$</li>
<li>COM（取反ACC）：$\overline{ACC}\rightarrow ACC$</li>
<li>SHR（算术右移）：<ul>
<li>$L(ACC)\rightarrow R(ACC)$</li>
<li>$ACC_0\rightarrow ACC_0$</li>
</ul>
</li>
<li>CSL（循环左移）：<ul>
<li>$R(ACC)\rightarrow L(ACC)$</li>
<li>$ACC_0\rightarrow ACC_n$</li>
</ul>
</li>
<li>STP（停机指令）：$0\rightarrow G$</li>
</ul>
</li>
<li>访存指令<ul>
<li>ADD X（加法指令）：<ul>
<li>$Ad(IR)\rightarrow MAR$</li>
<li>$1\rightarrow R$</li>
<li>$M(MAR)\rightarrow MDR$</li>
<li>$(ACC)+(MDR)\rightarrow ACC$</li>
</ul>
</li>
<li>STA X（存数指令）：<ul>
<li>$Ad(IR)\rightarrow MAR$</li>
<li>$1\rightarrow W$</li>
<li>$ACC\rightarrow MDR$</li>
<li>$MDR\rightarrow M(MAR)$</li>
</ul>
</li>
<li>LDA X（取数指令）：<ul>
<li>$Ad(IR)\rightarrow MAR$</li>
<li>$1\rightarrow R$</li>
<li>$M(MAR)\rightarrow MDR$</li>
<li>$MDR\rightarrow ACC$</li>
</ul>
</li>
</ul>
</li>
<li>转移指令<ul>
<li>JMP X（无条件转移）：$Ad(IR)\rightarrow PC$</li>
<li>BAN X（条件转移之最近的计算结果是负则转）：$A_0\cdot Ad(IR)+\overline{A_0}\cdot(PC)\rightarrow PC$</li>
</ul>
</li>
</ul>
<h4 id="中断周期-1"><a href="#中断周期-1" class="headerlink" title="中断周期"></a>中断周期</h4><ul>
<li>保存程序断点<ul>
<li>程序断点存入<strong>“0”地址</strong><ul>
<li>0-&gt;MAR</li>
<li>1-&gt;W</li>
<li>PC-&gt;MDR</li>
<li>MDR-&gt;M(MAR)</li>
</ul>
</li>
<li>程序断点<strong>进栈</strong><ul>
<li>(SP)-1-&gt;MAR</li>
<li>1-&gt;W</li>
<li>PC-&gt;MDR</li>
<li>MDR-&gt;M(MAR)</li>
</ul>
</li>
</ul>
</li>
<li>形成中断服务程序的入口地址<ul>
<li>硬件向量法：向量地址-&gt;PC</li>
<li>软件查询法：中断识别程序入口地址M-&gt;PC</li>
</ul>
</li>
<li>关中断<ul>
<li>0-&gt;EINT</li>
</ul>
</li>
</ul>
<h3 id="控制器结构和功能"><a href="#控制器结构和功能" class="headerlink" title="控制器结构和功能"></a>控制器结构和功能</h3><ul>
<li>不同于CPU内总线，系统总线用于连接计算机硬件系统五大部件，包括控制器、运算器、存储器、输入输出</li>
<li>系统总线分为<ul>
<li>Data Bus 数据总线</li>
<li>Address Bus 地址总线</li>
<li>Control Bus 控制总线</li>
</ul>
</li>
<li>五大部件和系统总线的连接结构<ul>
<li>控制器<ul>
<li>DB到MDR到IR：从DB接收指令信息</li>
<li>PC到MAR到AB：把指令地址送到AB</li>
<li>CU到CB：控制单元CU通过CB提供控制信号给其他部件</li>
<li>运算器到PC：从运算器接收指令转移地址</li>
</ul>
</li>
<li>运算器：连向数据总线，以和内存、输入、输出设备传送数据</li>
<li>存储器（指内存）、输入设备、输出设备<ul>
<li>用DB传送数据</li>
<li>从AB接收地址</li>
<li>从CB接收控制信号</li>
</ul>
</li>
<li>输入输出设备需要通过接口和总线相连</li>
</ul>
</li>
<li>控制器的功能<ul>
<li>取指令（从主存），并指出下一条指令地址</li>
<li>译码，产生相应操作控制信号</li>
<li>执行指令，指挥并控制CPU、主存、IO的数据流向</li>
</ul>
</li>
<li>控制器的两种分类（PC和IR相同；指令执行步骤的确定方法和控制信号的给出方案不同）<ul>
<li>硬布线控制器</li>
<li>微程序控制器</li>
</ul>
</li>
</ul>
<h3 id="控制单元的功能"><a href="#控制单元的功能" class="headerlink" title="控制单元的功能"></a>控制单元的功能</h3><ul>
<li>输入<ul>
<li>IR的操作码在经过译码产生的指令信息</li>
<li>时钟信号。每个时钟脉冲CU发出一个（或一组同时执行的）操作命令</li>
<li>标志，即执行单元的反馈信息。比如条件转移指令的控制。</li>
<li>来自系统总线的控制信号，如中断请求，DMA请求，HRQ总线请求</li>
</ul>
</li>
<li>输出<ul>
<li>CPU内部控制信号，如<ul>
<li>$R_i\rightarrow R_j$</li>
<li>$(PC)+1\rightarrow PC$</li>
<li>$ALU$操作选择信号op，如$+,-,and,or$</li>
</ul>
</li>
<li>到系统控制总线的控制信号<ul>
<li>访存控制信号$\overline{MREQ}$</li>
<li>访IO/存储器控制信号$\overline{IO}/M$</li>
<li>读内存命令$\overline{RD}$</li>
<li>写内存命令$\overline{WR}$</li>
<li>中断响应信号$INTA$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="控制方式"><a href="#控制方式" class="headerlink" title="控制方式"></a>控制方式</h3><ul>
<li>同步控制方式<ul>
<li>任一微操作由统一基准时标的时序信号控制</li>
<li>以最长的微操作序列、最复杂的微操作作为标准</li>
<li>采取完全统一的、相同时钟周期数、相同时间间隔的机器周期运行不同指令</li>
</ul>
</li>
<li>异步控制方式<ul>
<li>无基准时标信号</li>
<li>无固定的周期节拍，无严格的时钟同步</li>
<li>采用应答方式联络</li>
</ul>
</li>
<li>联合控制方式<ul>
<li>同步和异步结合</li>
<li>大部分指令的微操作同步控制，少部分指令的微操作异步控制</li>
</ul>
</li>
<li>人工控制方式<ul>
<li>Reset</li>
<li>连续或单条指令的执行转换开关</li>
<li>符合条件即停机开关</li>
</ul>
</li>
</ul>
<h3 id="硬布线控制器"><a href="#硬布线控制器" class="headerlink" title="硬布线控制器"></a>硬布线控制器</h3><p><em>又叫组合逻辑控制器</em></p>
<h4 id="单元框图"><a href="#单元框图" class="headerlink" title="单元框图"></a>单元框图</h4><img src="/2021/10/31/ComputerOrganization-5/CU.png" class title="this is CU">
<ul>
<li>输出$C_i$表示控制信号</li>
<li>同时为1的输出信号表示对应操作可以在一个周期内完成</li>
<li>时钟信号控制节拍发生器产生节拍</li>
<li>节拍宽度等于时钟周期，每个节拍内机器完成一个或几个同时执行的操作</li>
<li>如下图的例子，一个机器周期，包括了四个节拍<img src="/2021/10/31/ComputerOrganization-5/CLK.jpg" class title="this is clk">
</li>
</ul>
<h4 id="单元设计步骤"><a href="#单元设计步骤" class="headerlink" title="单元设计步骤"></a>单元设计步骤</h4><ul>
<li>列出微操作的操作时间表。表中每一行说明了在各个机器工作周期、节拍下，包含该行微操作命令信号的指令（硬件实现上操作码表示指令）的情况</li>
<li>微操作信号综合。微操作控制信号=该微操作对应的所有行的逻辑表达式的或，每行逻辑表达式=机器周期 and 节拍 and 脉冲 and 操作码 and 机器状态条件</li>
<li>绘制微操作命令逻辑图。即根据上一步的逻辑表达式绘制出每个微信号的逻辑电路图，使用逻辑门电路实现。</li>
</ul>
<h3 id="微程序控制器"><a href="#微程序控制器" class="headerlink" title="微程序控制器"></a>微程序控制器</h3><p><em>又叫存储逻辑控制器</em></p>
<h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>微程序<ul>
<li>把机器指令编写成微程序<ul>
<li>每条机器指令对应一个微程序</li>
<li>所有微程序存放在<strong>控制存储器</strong>中，寻址方法同用户程序寻址</li>
<li>各个机器指令的执行周期编写为各自的微程序</li>
<li>取值周期、间址周期和中断周期单独编写为微程序（都是不同机器指令的公共微程序）</li>
<li>公共微程序中的取值微程序是必须的，即n条机器指令至少需要在控制寄存器中存入n+1个微程序</li>
</ul>
</li>
<li>微程序有若干<strong>微指令</strong></li>
<li>每个微指令有若干<strong>微命令</strong></li>
<li>微程序是计算机设计者事先编址并放在控制存储器中的，对程序员透明</li>
</ul>
</li>
<li>微命令<ul>
<li>前面提到过微操作是计算机中最基本的不可分解的操作</li>
<li>微命令和微操作一一对应，指的是微操作的控制信号</li>
<li>微操作是微命令的执行过程</li>
<li>硬布线控制器中也有微命令的概念，不是微程序控制器中独有的概念</li>
</ul>
</li>
<li>微指令<ul>
<li>前面提到过，如果每个节拍内的微命令线路不冲突，则可以并行执行（相容微命令）</li>
<li>不可同时产生和完成的微命令是互斥微命令</li>
<li>这些并行的微命令可以合并成一条微指令，一个节拍对应一条微指令</li>
<li>微指令基本格式<ul>
<li>操作控制字段（微操作码字段）：产生各自微操作控制信号</li>
<li>顺序控制字段（微地址码字段、下地址字段）：产生下一条待执行的微指令的地址</li>
</ul>
</li>
</ul>
</li>
<li>控制存储器：相比于CPU外部的，用RAM实现的主存储器，控制存储器CM在CPU内部（控制器的CU里），用ROM实现</li>
</ul>
<h4 id="单元框图-1"><a href="#单元框图-1" class="headerlink" title="单元框图"></a>单元框图</h4><ul>
<li>下图是微程序控制器的CU框图</li>
<li>包括<ul>
<li>控制存储器CM：存放微程序，由ROM构成</li>
<li>控制存储器地址寄存器CMAR（也叫微地址寄存器）：存放微指令的地址</li>
<li>控制存储器数据寄存器CMDR（也叫微指令寄存器μIR）：存放控制寄存器中取出的微指令</li>
<li>微地址形成部件：产生初始微地址和后继微地址</li>
<li>顺序逻辑：根据时钟、标志、CMDR，从微地址形成部件中选出正确的地址，传给CMAR</li>
</ul>
</li>
</ul>
<img src="/2021/10/31/ComputerOrganization-5/CU2.png" class title="this is CU2">
<h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><ul>
<li>运行公共微程序，比如取指微程序<ul>
<li>将取指微程序的入口（一般是CM的0号单元）送到CMAR</li>
<li>从CM中读出微指令送入CMDR</li>
<li>微程序完成后，主存中的机器指令存入了IR中</li>
</ul>
</li>
<li>微地址形成部件根据机器指令操作码字段产生对应微程序入口地址，送入CMAR</li>
<li>从CM中读出微指令送入CMDR，并执行</li>
<li>执行完一个机器指令对应的微程序，回到第一步，继续进行公共微程序，取指微操作。</li>
</ul>
<h4 id="微指令编码方式"><a href="#微指令编码方式" class="headerlink" title="微指令编码方式"></a>微指令编码方式</h4><ul>
<li>又叫微指令控制方式，对应微指令<strong>操作控制字段</strong>的编码方式，以形成控制信号</li>
<li>分类为<ul>
<li>直接编码方式（直接控制方式）<ul>
<li>每一位表示一个微命令是否有效，可以直接发出控制信号</li>
<li>简单直观并行性好，但微指令字长过长</li>
</ul>
</li>
<li>字段直接编码方式<ul>
<li>把微指令分成各个小字段，每小字段经过译码后才能发出（一个）控制信号</li>
<li>互斥微命令（在一个互斥类中）放到一个小字段中，显式编码（每小字段位数不能太多，否则译码太慢）</li>
<li>相容微命令放到不同的小字段中，各小字段编码单独定义</li>
<li>可以缩减微指令字长，但需要译码才能发出微命令，速度慢</li>
<li>注意，比如某小字段有3位，只能表示8-1=7个互斥的微命令，因为需要留一个状态表示不进行微操作。</li>
</ul>
</li>
<li>字段间接编码方式（隐式编码方式）<ul>
<li>一个字段的某些微命令需要由另一个字段某些微命令解释</li>
<li>进一步缩短微指令字长，但是削弱了并行控制能力</li>
</ul>
</li>
<li>混合编码<ul>
<li>直接编码间接编码混合使用</li>
<li>字段间接编码一般是字段直接编码的辅助手段</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="微指令地址形成方式"><a href="#微指令地址形成方式" class="headerlink" title="微指令地址形成方式"></a>微指令地址形成方式</h4><ul>
<li>基本方式<ul>
<li>由微指令的下地址字段指出，称为断定方式</li>
<li>有时下地址字段没有指出，可以根据机器指令的操作码，经过微地址形成部件形成（该机器指令操作微程序的首地址）</li>
</ul>
</li>
<li>补充方式<ul>
<li>增量计数器法，即(CMAR)+1-&gt;CMAR，适合后继指令地址连续的情况</li>
<li>分支转移法<ul>
<li>把顺序控制字段进一步划分为转移方式的标志和转移地址（下地址）</li>
<li>标志为0表示不跳转，执行(CMAR)+1-&gt;CMAR</li>
<li>标志为1表示跳转，根据转移地址确定下一条微指令地址</li>
</ul>
</li>
<li>测试网络法<ul>
<li>把下地址字段进一步划分为高位字段和低位字段</li>
<li>低位字段由测试源（状态、条件）经过测试网络进行变换，得到测试地址；高位字段不变，作为非测试地址</li>
<li>非测试地址和测试地址拼接，形成下一条微指令地址</li>
<li>适合微程序小范围的微指令跳转</li>
</ul>
</li>
<li>由硬件直接产生微程序入口地址<ul>
<li>电源通电后，第一条微指令地址（取指微程序入口地址）可以由专门硬件电路产生</li>
<li>如果有中断或间址周期，其微程序首地址可以由硬件产生</li>
</ul>
</li>
</ul>
</li>
<li>根据微指令地址形成方式，把CU框图的<strong>顺序逻辑</strong>展开，如下图</li>
</ul>
<img src="/2021/10/31/ComputerOrganization-5/CU3.png" class title="this is CU3">
<h4 id="微指令格式"><a href="#微指令格式" class="headerlink" title="微指令格式"></a>微指令格式</h4><ul>
<li>水平型微指令<ul>
<li>格式为操作控制、顺序控制（包括判断字段、后地址字段）</li>
<li>一次能定义并执行多个并行操作</li>
<li>比如直接编码、字段直接编码、字段间接编码、混合编码</li>
<li>优点是灵活性强、可并行、微程序短、每条微指令执行时间短、不需要译码或需要简单译码</li>
<li>和机器指令差别大</li>
</ul>
</li>
<li>垂直型微指令<ul>
<li>类似于机器指令操作码的方式：微操作码、 目的地址、源地址</li>
<li>一次只能定义和执行一个基本操作</li>
<li>优点是格式简单规整、编写微程序方便、微指令短</li>
<li>接近机器指令</li>
</ul>
</li>
<li>混合微指令<ul>
<li>以垂直型为基础，增加不复杂的并行操作</li>
<li>便于编程、微程序不长、执行速度有所提高</li>
</ul>
</li>
</ul>
<h4 id="静态微程序设计和动态微程序设计"><a href="#静态微程序设计和动态微程序设计" class="headerlink" title="静态微程序设计和动态微程序设计"></a>静态微程序设计和动态微程序设计</h4><ul>
<li>静态：微程序无需改变，采用ROM</li>
<li>动态：通过改变微指令和微程序改变机器指令，利于仿真、采用EPROM</li>
</ul>
<h4 id="毫微程序设计"><a href="#毫微程序设计" class="headerlink" title="毫微程序设计"></a>毫微程序设计</h4><ul>
<li>微程序设计：用微程序解释机器指令</li>
<li>毫微程序设计：用毫微程序解释微指令</li>
<li>毫微程序设计本质上是一种二级结构<ul>
<li>毫微程序放在毫微控制器中</li>
<li>毫微程序由毫微指令组成，由毫微指令来控制硬件</li>
<li>二级结构中毫微指令一般是水平型，微指令一般是垂直型</li>
</ul>
</li>
<li>毫微程序控控制器的基本组成如下图<img src="/2021/10/31/ComputerOrganization-5/UCU.png" class title="this is UCU">
</li>
</ul>
<h4 id="微程序控制方式"><a href="#微程序控制方式" class="headerlink" title="微程序控制方式"></a>微程序控制方式</h4><ul>
<li>串行微程序控制：串行方式</li>
<li>并行微程序控制：流水方式</li>
</ul>
<h4 id="单元设计步骤-1"><a href="#单元设计步骤-1" class="headerlink" title="单元设计步骤"></a>单元设计步骤</h4><ul>
<li>写出对应机器指令的微操作和节拍安排<ul>
<li>微操作命令需要由CMDR的操作字段分析后发出控制信号</li>
<li>在之前微操作分析的基础上，在每条微操作前增加<strong>把下一条微指令地址送到CMAR</strong>的微操作</li>
<li>比如取指阶段的微操作序列为<ul>
<li>节拍0：PC-&gt;MAR，1-&gt;R（本节拍微操作的微指令地址可以由硬件生成）</li>
<li>节拍1：Ad(CMDR)-&gt;CMAR（把下一节拍的微指令的地址送到CMAR）</li>
<li>节拍2：M(MAR)-&gt;MDR，(PC)+1-&gt;PC</li>
<li>节拍3：Ad(CMDR)-&gt;CMAR（把下一节拍的微指令的地址送到CMAR）</li>
<li>节拍4：MDR-&gt;IR</li>
<li>节拍5：OP(IR)-&gt;微地址形成部件-&gt;CMAR（把下一机器周期第一个节拍的微指令地址送到CMAR）</li>
</ul>
</li>
</ul>
</li>
<li>确定微指令的格式，包括<ul>
<li>微指令编码方式：根据微操作个数确定编码方式和操作控制字段位数</li>
<li>后继微指令地址形成方式：根据控制存储器的微指令个数确定顺序控制字段位数</li>
<li>微指令字长：操作控制字段和顺序控制字段位数确定微指令字长</li>
</ul>
</li>
<li>编写每条微指令的码点（每条微指令的具体编码和在控制存储器中的位置）</li>
</ul>
<h3 id="硬布线和微程序控制器对比"><a href="#硬布线和微程序控制器对比" class="headerlink" title="硬布线和微程序控制器对比"></a>硬布线和微程序控制器对比</h3><ul>
<li>工作原理<ul>
<li>硬布线控制器由组合逻辑电路根据当前的指令码、状态、时序，即时产生微操作控制信号</li>
<li>微程序控制器以微程序的方式，通过存储在控制存储器的微指令产生微操作控制信号</li>
</ul>
</li>
<li>执行速度<ul>
<li>硬布线控制器快</li>
<li>微程序控制器慢</li>
</ul>
</li>
<li>规整性<ul>
<li>硬布线控制器繁琐</li>
<li>微程序控制器规整</li>
</ul>
</li>
<li>应用场合<ul>
<li>硬布线控制器应用于RISC CPU</li>
<li>微程序控制器应用于CISC CPU</li>
</ul>
</li>
<li>易拓展性<ul>
<li>硬布线控制器难修改</li>
<li>微程序控制器容易扩充、修改</li>
</ul>
</li>
</ul>
<h2 id="异常和中断机制"><a href="#异常和中断机制" class="headerlink" title="异常和中断机制"></a>异常和中断机制</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>程序中断指的是计算机执行程序时，出现某些急需处理的异常或特殊请求，CPU暂时中断现行的程序，对异常情况或特殊请求进行处理，处理完后再返回原程序断点处继续执行。</li>
<li>程序中断的作用有<ul>
<li>实现CPU和IO的并行</li>
<li>处理硬件故障、软件错误</li>
<li>实现人机交互</li>
<li>实现多道程序的切换、分时操作等</li>
<li>实现实时处理</li>
<li>实现用户态到内核态的切换，即<strong>（广义的）软中断</strong></li>
<li>多处理器系统的处理器信息交流和任务切换</li>
</ul>
</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>广义上的中断包含<strong>内部中断</strong>和<strong>外部中断</strong></li>
<li>内部中断包括软件中断（狭义的软中断）和异常（内中断一定是不可屏蔽中断），外部中断包括可屏蔽中断和不可屏蔽中断</li>
<li>软件中断指的是CPU内部的指令请求<ul>
<li>又叫可编程中断，是软件主动发起的中断</li>
<li>软件中断实现从用户态到内核态的系统调用，完成后回到中断指令的下一条继续运行</li>
<li>比如linux的int 0x80系统调用</li>
</ul>
</li>
<li><p>异常指的是CPU内部异常产生的意外事件，包括</p>
<ul>
<li>故障Fault<ul>
<li>程序性事故</li>
<li>比如溢出、非法操作码、除数为0、缺页</li>
<li>故障被动性的导致用户态切换到内核态，故障是有可能修复处理的，比如缺页处理后可以继续执行</li>
<li>修复完成后从出故障的指令处重新运行（而不是运行下一条指令）</li>
</ul>
</li>
<li>陷阱Trap<ul>
<li>人为设置的中断，又叫自陷</li>
<li>主要用于断点调试</li>
<li>执行Trap指令主动导致用户态切换到内核态，处理完陷阱后会返回用户态继续执行下一条指令</li>
</ul>
</li>
<li>终止Abort<ul>
<li>当指令发送不可修复的故障，程序只能终止</li>
<li>操作系统把程序的进程从进程表去除</li>
</ul>
</li>
</ul>
</li>
<li><p>外部中断简称外中断，是狭义上的中断，指的是CPU外部和指令执行无关的事件引起的中断，包括</p>
<ul>
<li>可屏蔽中断：通过INTR(Interrupt Require)信号线发出的中断请求，受到中断允许寄存器和中断屏蔽位的控制（后面会介绍两者的功能和区别），比如IO设备中断（键盘输入、打印机缺纸）</li>
<li>不可屏蔽中断：通过NMI（Nonmaskable Interrupt）信号线发出的中断请求，比如电源掉电、内存读写错误、总线奇偶校验错误、时钟中断</li>
</ul>
</li>
</ul>
<h3 id="检测和响应"><a href="#检测和响应" class="headerlink" title="检测和响应"></a>检测和响应</h3><h4 id="中断请求"><a href="#中断请求" class="headerlink" title="中断请求"></a>中断请求</h4><p><em>中断源如何提出中断请求</em></p>
<ul>
<li>外中断请求的识别一般由<strong>硬件完成</strong><ul>
<li>每个中断源设置一个INTR中断请求触发器，1位，表示是否请求中断</li>
<li>INTR可以分散在各个中断源接口电路</li>
<li>INTR也可以集中在CPU内部中断系统中，由多个INTR触发器组成中断请求寄存器</li>
</ul>
</li>
<li>内中断请求的识别一般由<strong>软件完成</strong><ul>
<li>CPU设置一个异常状态寄存器</li>
<li>操作系统使用统一的异常查询程序，按一定优先级查询异常状态寄存器</li>
<li>先查询到的先被处理</li>
</ul>
</li>
<li>软中断、故障、陷阱等内中断请求也可以不通过专门的查询程序识别，而是在某指令执行时识别，转到内核态进行异常处理</li>
</ul>
<h4 id="中断判优"><a href="#中断判优" class="headerlink" title="中断判优"></a>中断判优</h4><p><em>多个中断源同时提出中断请求时如何进行优先级排队</em></p>
<ul>
<li><strong>硬件实现</strong>的排队器，具体有两种做法<ul>
<li>链式排队器：分散在各个中断源的接口电路中</li>
<li>集中在CPU内</li>
</ul>
</li>
<li><strong>软件实现</strong>的排队器，用程序查询的方式<ul>
<li>先查询高优先级的中断源是否有中断请求</li>
<li>是则跳转到对应中断服务程序入口地址，否则继续查询低优先级中断源是否有中断请求</li>
</ul>
</li>
<li>通常的优先级安排如下：<ul>
<li>硬件故障优先级最高，其次是软件中断，这些都是不可屏蔽中断</li>
<li>不可屏蔽中断优先级高于可屏蔽中断（可屏蔽中断一定是外中断，但不是所有外中断都可屏蔽）</li>
<li>DMA请求优先级高于IO设备的中断请求，高速设备优先于低速设备、输入设备优先于输出设备、实时设备优先于普通设备</li>
</ul>
</li>
</ul>
<h4 id="响应条件"><a href="#响应条件" class="headerlink" title="响应条件"></a>响应条件</h4><p><em>CPU什么条件下响应（外）中断</em></p>
<ul>
<li>中断源发出中断请求，即存在中断请求触发器INTR为1的中断源（INTR的设置要求中断源的中断屏蔽触发器为0，详见后面多重中断部分）</li>
<li>CPU允许中断（允许中断触发器EINT=1），即开中断（linux中是中断标志IF=1）</li>
<li>一条指令执行完毕时，且没有更紧迫任务（比如内中断）</li>
</ul>
<h4 id="响应操作"><a href="#响应操作" class="headerlink" title="响应操作"></a>响应操作</h4><p><em>CPU响应（外）中断具体要进行的操作是什么</em></p>
<ul>
<li>CPU响应中断时完成的操作是<strong>中断隐指令</strong></li>
<li>中断隐指令由硬件实现，并不是真的指令系统的指令</li>
<li>中断隐指令包括的操作有<ul>
<li>关中断<ul>
<li>如果有中断请求（INTR不全为0）且允许中断（EINT=1)，则中断标记触发器INT设置为1，表示进入中断周期（在前面指令周期的笔记中提到过INT），此后EINT设置为0</li>
<li>关中断保证不响应更高级别的可屏蔽中断，但不可屏蔽中断依然需要响应</li>
</ul>
</li>
<li>保存断点：包括PC和PSW的现场信息</li>
<li>转向中断服务程序：取出中断服务程序的入口地址传给PC</li>
</ul>
</li>
</ul>
<h4 id="中断入口"><a href="#中断入口" class="headerlink" title="中断入口"></a>中断入口</h4><p><em>如何确定中断服务程序的入口地址</em></p>
<ul>
<li>中断向量：中断服务程序的入口地址</li>
<li>中断向量地址：中断服务程序入口地址所存放的地址</li>
<li>中断向量表：存储器中集中存放中断向量的区域</li>
<li>硬件向量法<ul>
<li>把中断优先级排队器输出，输入到向量地址形成部件，得到中断向量地址</li>
<li>根据中断向量地址到中断向量表中确定中断向量，即入口地址</li>
</ul>
</li>
<li>软件查询法：PC先转到中断识别程序入口地址，由中断识别程序给出中断入口地址，灵活，识别程序相比硬件实现更容易修改</li>
</ul>
<h4 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h4><p><em>进入中断周期后的处理过程</em></p>
<ul>
<li>硬件（中断隐指令）完成的过程<ul>
<li>关中断</li>
<li>保存断点</li>
<li>转向中断服务程序</li>
</ul>
</li>
<li>中断服务程序完成的过程<ul>
<li>保存现场和屏蔽字<ul>
<li>现场主要是一些工作寄存器，PUSH到堆栈中</li>
<li>屏蔽字在后面的多重中断的笔记中会介绍</li>
</ul>
</li>
<li>开中断：允许更高级别的中断响应，实现中断嵌套</li>
<li>执行中断服务程序：中断请求的目的</li>
<li>关中断：保证恢复现场和屏蔽字时不被打断</li>
<li>恢复现场和屏蔽字：从堆栈中POP出</li>
<li>开中断</li>
<li>中断返回：一般是中断服务程序的最后一条指令IRET，用于返回原程序继续执行</li>
</ul>
</li>
</ul>
<h4 id="多重中断"><a href="#多重中断" class="headerlink" title="多重中断"></a>多重中断</h4><p><em>在执行中断服务程序时又出现新的更高级别的中断请求怎么办</em></p>
<ul>
<li>单重中断：不响应新的中断请求    </li>
<li>多重中断：响应新的中断请求，又叫中断嵌套</li>
<li>多重中断使用中断屏蔽技术<ul>
<li>每个中断源有一个中断屏蔽触发器，表示是否屏蔽该中断源，屏蔽后INTR无法置1</li>
<li>所有中断屏蔽触发器组合构成一个屏蔽字寄存器，不同的中断服务程序运行时，屏蔽字寄存器的内容不同（该内容是根据中断源优先级设置屏蔽字的）</li>
<li>屏蔽字寄存器的内容叫做屏蔽字</li>
</ul>
</li>
<li>中断允许寄存器和中断屏蔽字寄存器的功能区别<ul>
<li>前者是总的中断的允许开关，决定CPU在有中断请求时是否进入中断周期</li>
<li>后者是对中断源之间的优先级关系的表示。高优先级中断源的中断服务程序运行时，低优先级的中断源在屏蔽字寄存器中所对应位（即低优先级中断源屏蔽触发器）为1，表示屏蔽掉对应优先级较低的中断请求</li>
</ul>
</li>
<li>多重中断需要满足的条件<ul>
<li>中断允许寄存器满足的条件：在中断服务程序中设置开中断</li>
<li>中断屏蔽字寄存器满足的条件：仅较高优先级的中断源有权中断较低优先级的中断源</li>
</ul>
</li>
<li>中断响应排队优先级和中断源处理优先级的区别<ul>
<li>中断响应排队优先级不可改变</li>
<li>中断源处理优先级可以通过重设屏蔽字来改变</li>
<li>例如下面两个图，表示ABCD四个中断请求同时到来后的响应情况。排队优先级按ABCD降序，处理优先级第一个图为ABCD降序，第二个图改为ADCB降序<img src="/2021/10/31/ComputerOrganization-5/MW.png" class title="this is MW">
</li>
</ul>
</li>
</ul>
<h2 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h2><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>一条指令的执行分为若干阶段，每个阶段用到的功能部件不同。将各个阶段看作流水段（对应一个部件），指令的执行过程构成了指令流水线</li>
<li>指令流水线是一种硬件层面的并行处理技术（进程的并行属于软件层面的并行处理技术），能明显提高计算机运行速度</li>
<li>指令流水线不包含生成控制信号的控制部件</li>
</ul>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><ul>
<li>比如指令分为取指令、分析指令（译码和间址）、执行指令三个阶段，多条指令在执行时可以是顺序执行方式或流水线执行方式</li>
<li>顺序执行方式指在完成一条指令后，才开启下一条指令。设每阶段时间为t，共n条指令，则总时间为3nt</li>
<li>流水线执行方式指的是一条指令开启第i个阶段时（i=2,3），下一条指令开启第i-1个阶段。设每阶段时间为t，共n条指令，则总时间为2t+nt</li>
<li>k级流水指的是，流水线有k个流水段。前面的例子，有三个执行阶段，即三级流水。</li>
<li>设计时，流水段的个数以最复杂的指令需要的阶段数为准，流水段的长度以最复杂的操作需要时间为准</li>
</ul>
<h3 id="流水线表示方法"><a href="#流水线表示方法" class="headerlink" title="流水线表示方法"></a>流水线表示方法</h3><ul>
<li>采用时空图，横坐标为时间，各个流水段时间相等，纵坐标的每行对应一个流水段部件，每条指令形式上为斜线</li>
<li>也可以是横坐标为时间，各个流水段时间相等，纵坐标的每行对应每条指令，每个流水段部件形式上为斜线</li>
</ul>
<h3 id="流水线方式特点"><a href="#流水线方式特点" class="headerlink" title="流水线方式特点"></a>流水线方式特点</h3><ul>
<li>把一个指令任务分解为多个子任务阶段，由不同功能部件并行完成</li>
<li>流水线每个功能段部件后有一个缓冲寄存器或锁存器，用来保存本段的执行结果，供下一段使用</li>
<li>流水线各功能段的时间尽量相等，防止堵塞和断流</li>
<li>流水线处理的尽量是连续任务</li>
<li>流水线需要装入和排空时间。前者是第一条任务进入流水线到完成的时间，后者是最后一条任务进入流水线到完成的时间。</li>
</ul>
<h3 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h3><ul>
<li>按流水线使用级别分类<ul>
<li>部件功能级：运算操作流水线</li>
<li>处理机级别：指令流水线</li>
<li>处理机间级别：宏流水线，涉及多个处理机</li>
</ul>
</li>
<li>按功能分类<ul>
<li>单功能：只能实现固定功能</li>
<li>多功能：通过各个流水段的不同连接方式，可以同时或不同时的实现多个功能</li>
</ul>
</li>
<li>按连接方式（多功能流水线的分类）<ul>
<li>静态流水线：各个段同时各自只能实现一个功能，多功能实现需要等任务排空后重连流水线，当连续输入不同运算时，静态流水线等同于顺序执行方式</li>
<li>动态流水线：各个段同时各自实现多个功能，效率高，控制复杂</li>
<li>下图是静态和动态流水时空图<img src="/2021/10/31/ComputerOrganization-5/D.png" class title="this is D"></li>
</ul>
</li>
<li>按功能段是否有反馈信号<ul>
<li>线性流水线:每段只经过一次，没有反馈回路</li>
<li>非线性流水线：有反馈回路，某些段多次经过，适合线性递归的运算</li>
</ul>
</li>
</ul>
<h3 id="影响流水线的因素"><a href="#影响流水线的因素" class="headerlink" title="影响流水线的因素"></a>影响流水线的因素</h3><ul>
<li>流水线无法正确执行指令引起的阻塞、停顿，称为流水线冲突，或者冒险。</li>
<li>流水线冲突有三种：资源冲突、数据冲突、控制冲突</li>
<li>资源冲突（结构冒险）<ul>
<li>指的是，不同流水段对硬件资源的竞争冲突</li>
<li>比如取指令和取数据都要访存</li>
<li>解决方法有<ul>
<li>指令停顿：让后续指令暂停一个时钟周期</li>
<li>存储器分离：单独设置数据存储器和指令存储器</li>
<li>指令预取技术：适合访存周期短的情况，提前把指令取到缓存区</li>
</ul>
</li>
<li>现代操作系统通过采用数据Cache和指令Cache分离的方式，避免资源冲突</li>
</ul>
</li>
<li>数据冲突（数据相关、数据冒险）<ul>
<li>指的是下一条指令用到当前指令计算结果确定</li>
<li>具体分为<ul>
<li>写后读RAW：可能读到错误的旧值</li>
<li>读后写WAR：可能读到错误的新值</li>
<li>写后写WAW：可能先写新值，再写入旧值</li>
</ul>
</li>
<li>解决方法有<ul>
<li>后推法：设置时钟周期的暂停，比如硬件阻塞stall和软件插入NOP指令</li>
<li>数据旁路技术：对于RAW，设置专用通路，直接把ALU计算结果作为输入。</li>
<li>编译器优化相关指令，调整指令顺序。</li>
</ul>
</li>
</ul>
</li>
<li>控制冲突（控制相关、控制冒险）<ul>
<li>指的是，下一条指令的地址由当前指令来确定，从而造成断流</li>
<li>如果不处理，将会存在控制损失，即跳转条件成立后，流水线原先按顺序执行的一些指令都是无效的。</li>
<li>解决方法有<ul>
<li>对转移指令的分支进行预测，提前生成转移目标地址。静态（简单）预测总是预测条件不满足；动态预测根据历史执行情况，动态预测调整，预测准确率较高</li>
<li>预取转移成功和不成功两个控制流方向的目标指令</li>
<li>加快和提前形成条件码</li>
<li>提高转移方向的猜准率</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul>
<li>吞吐率TP<ul>
<li>吞吐率指的是单位时间流水线完成的指令数量/输出结果数量</li>
<li>计算时考虑完成n条指令需要的时间，设$k$级流水，每段$t$时间，完成$n$条任务，需要时间$kt+(n-1)t=(k+n-1)t$</li>
<li>实际吞吐量为$\frac{n}{(k+n-1)t}$，最大吞吐率（任务很多，n为极限情况）为$\frac{1}{t}$</li>
</ul>
</li>
<li>加速比SP<ul>
<li>加速比指的是，同一批任务，不使用流水线的时间比使用流水线的时间</li>
<li>实际加速比是$\frac{kn}{k+n-1}$，最大加速比（任务很多，n为极限情况）是$k$</li>
</ul>
</li>
<li>效率E<ul>
<li>效率指的是流水线硬件设备的利用率</li>
<li>就是时空图中，工作时空区比总的时空区</li>
<li>实际效率为$\frac{knt}{k(k+n-1)t}=\frac{n}{k+n-1}$，最大效率（任务很多，n为极限情况）是$1$</li>
</ul>
</li>
</ul>
<h3 id="超标量流水线"><a href="#超标量流水线" class="headerlink" title="超标量流水线"></a>超标量流水线</h3><ul>
<li><p>超标量流水线技术</p>
<ul>
<li>每时钟周期并发多条独立的指令</li>
<li>配置多个功能部件，需要多个流水线</li>
<li>不能调整指令执行顺序，需要通过编译优化，把可并行的指令搭配起来</li>
<li>如下图是3个流水线并行工作<img src="/2021/10/31/ComputerOrganization-5/SS.png" class title="this is SS">
</li>
</ul>
</li>
<li><p>超流水线技术</p>
<ul>
<li>又叫超流水技术</li>
<li>把一个时钟周期内继续分段；一个时钟周期内，一个部件使用多次</li>
<li>不能调整指令执行顺序，需要通过编译优化</li>
<li>如下图是一个时钟周期分为3段<img src="/2021/10/31/ComputerOrganization-5/SS2.png" class title="this is SS2">
</li>
</ul>
</li>
<li><p>超长指令字技术</p>
<ul>
<li>由编译程序挖掘指令间潜在并行性</li>
<li>把多条可并行指令组合成一条具有多个操作码字段的超长指令字（可几百位）</li>
<li>采用多个处理部件，比如下图是三个<img src="/2021/10/31/ComputerOrganization-5/SS3.png" class title="this is SS3">
</li>
</ul>
</li>
</ul>
<h2 id="多处理器基本概念"><a href="#多处理器基本概念" class="headerlink" title="多处理器基本概念"></a>多处理器基本概念</h2><h3 id="SISD、SIMD、MIMD、向量处理器概念"><a href="#SISD、SIMD、MIMD、向量处理器概念" class="headerlink" title="SISD、SIMD、MIMD、向量处理器概念"></a>SISD、SIMD、MIMD、向量处理器概念</h3><p><em>本节介绍计算机体系结构的划分</em></p>
<ul>
<li>单指令单数据流SISD<ul>
<li>传统串行结构</li>
<li>包含一个处理器、一个存储器</li>
<li>使用指令流水方式，SISD处理器可采用多个功能部件，SISD存储器多采用多模块交叉存储器</li>
</ul>
</li>
<li>单指令多数据流SIMD<ul>
<li>一条指令，多个数据流，又叫数据级并行技术</li>
<li>包含一个控制器、多个处理单元，每个处理单元处理的数据不同，但处理的指令都是同一个</li>
<li>适合处理for循环处理数组或向量数据运算</li>
</ul>
</li>
<li>多指令单数据流MISD：不存在</li>
<li>多指令多数据流MIMD<ul>
<li>多条指令，多个数据流，线程级（或线程级以上）并行技术</li>
<li>分为<ul>
<li>多计算机系统（消息传递MIMD）：各系统有各自的存储器、独立的主存空间，通过消息传递进行数据传输</li>
<li>多处理器系统（共享存储MIMD）：全称是共享存储多处理器SMP，共享地址空间，各处理器通过共享变量通信，通过存取指令访问存储器，</li>
</ul>
</li>
</ul>
</li>
<li>向量处理器<ul>
<li>SIMD的变种</li>
<li>实现了可直接操作向量指令集的CPU</li>
<li>理念是把存储器收集的数据按顺序放到向量寄存器中，流水方式依次操作，结果写回寄存器</li>
</ul>
</li>
</ul>
<h3 id="硬件多线程基本概念"><a href="#硬件多线程基本概念" class="headerlink" title="硬件多线程基本概念"></a>硬件多线程基本概念</h3><ul>
<li>传统CPU线程切换开销较大，需要和存储器交换数据</li>
<li>支持硬件多线程的CPU，每个线程有独立的通用寄存器组、PC，线程切换只需要激活选中的寄存器</li>
<li>硬件多线程有3种实现方式<ul>
<li>细粒度多线程<ul>
<li>各线程间指令无关</li>
<li>每个时钟周期切换线程</li>
</ul>
</li>
<li>粗粒度多线程<ul>
<li>只在遇到阻塞时才切换线程，如Cache缺失</li>
<li>流水线需要清空和重装，切换线程开销高</li>
</ul>
</li>
<li>同时多线程<ul>
<li>又叫SMT，例如因特尔处理器的超线程</li>
<li>同一时钟周期，不同线程多条指令同时执行</li>
<li>同时实现指令级并行和线程级并行</li>
</ul>
</li>
</ul>
</li>
<li>下图是硬件多线程3种实现的示例图<img src="/2021/10/31/ComputerOrganization-5/MuL.jpg" class title="this is MuL">
</li>
</ul>
<h3 id="多核处理器基本概念"><a href="#多核处理器基本概念" class="headerlink" title="多核处理器基本概念"></a>多核处理器基本概念</h3><ul>
<li>多个处理单元（核）集中到一个CPU</li>
<li>每个核可以有各自的Cache，也可以共享Cache</li>
<li>各核是对称的，共享主存，可以认为多核处理器是SMP的简化版</li>
<li>多核处理器的多线程是并行的（同一时刻多个线程运行），而单核的多线程是并发的（交错执行，但同一时刻只有一个线程执行）</li>
</ul>
<h3 id="共享内存多处理器SMP的基本概念"><a href="#共享内存多处理器SMP的基本概念" class="headerlink" title="共享内存多处理器SMP的基本概念"></a>共享内存多处理器SMP的基本概念</h3><ul>
<li>多个处理器共享一个物理地址空间，通过存取指令访问存储器</li>
<li>处理器间的通信通过存储器的共享变量</li>
<li>分类有<ul>
<li>统一存储访问（UMA）多处理器<ul>
<li>每个处理器访存时间接近，所有CPU的地位是对称的</li>
<li>根据处理器和共享存储的连接方式，分为基于总线、基于交叉开关网络、基于多级交换网络连接几种多处理器</li>
</ul>
</li>
<li>非统一存储访问（NUMA）多处理器<ul>
<li>某些处理器访存请求较快完成</li>
<li>根据处理器是否带一致性高速缓存，分为NC-NUMA和CC-NUMA</li>
</ul>
</li>
</ul>
</li>
<li>共享变量可以通过加锁的方式实现互斥访问</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识总结】 第二章-进程管理</title>
    <url>/2021/11/10/operatingSystem2/</url>
    <content><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="进程基本概念"><a href="#进程基本概念" class="headerlink" title="进程基本概念"></a>进程基本概念</h3><ul>
<li>进程的定义<ul>
<li>具有独立功能的程序在一个数据集合上的一次执行过程（活动）</li>
<li>资源分配和调度的基本单位</li>
</ul>
</li>
<li>进程控制块PCB<ul>
<li>描述进程基本情况和运行状态的数据结构</li>
<li>系统通过PCB感知进程、控制和管理进程</li>
<li>创建进程时创建PCB，撤销进程时撤销PCB，PCB是进程存在的唯一标志</li>
<li>PCB包括进程的描述信息、控制管理信息、资源分配清单、处理机有关信息</li>
<li>状态相同的各进程的PCB可以用索引表统一管理，每个表项指向一个PCB</li>
</ul>
</li>
<li>进程的特征<ul>
<li>动态性：有动态的生命周期，比如：创建、活动、暂停、终止</li>
<li>并发性：多个进程实体在同一段时间内，在内存中运行，并发是引入进程的目的</li>
<li>独立性：进程实体能独立运行、获得资源、调度</li>
<li>异步性：各进程按不可预测的速度推进</li>
<li>结构性：每个进程一个PCB，进程实体包括程序段、数据段、PCB</li>
</ul>
</li>
</ul>
<h3 id="进程状态和转换"><a href="#进程状态和转换" class="headerlink" title="进程状态和转换"></a>进程状态和转换</h3><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul>
<li>运行态：进程正在处理机上运行，单处理机同时刻最多只能支持一个进程运行</li>
<li>就绪态：进程获得了除了处理机外的一切资源，等待处理机资源</li>
<li>阻塞态：进程等待某资源（不是处理机）或输入输出完成</li>
<li>创建态：进程被创建时的状态，创建过程：申请空白PCB、填写控制信息和管理信息、系统给进程分配资源、进程转入就绪态</li>
<li>结束态：进程被结束时的状态，结束过程：把进程设置为结束态、资源释放和回收</li>
</ul>
<h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><ul>
<li>新建态-&gt;就绪态：创建进程的过程</li>
<li>就绪态-&gt;运行态：就绪的进程获得CPU资源后开始运行</li>
<li>运行态-&gt;就绪态：进程时间片用完后只能让出CPU，进入就绪态，进程被动的中断</li>
<li>运行态-&gt;阻塞态：运行的进程需要申请等待某非CPU资源，或等某事件发生，进程主动的中断（系统调用）</li>
<li>阻塞态-&gt;就绪态：进程等待的时间到来，中断处理程序把进程状态改为就绪</li>
</ul>
<h3 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h3><ul>
<li>进程控制块：详见前面进程基本概念</li>
<li>程序段：由进程调度程序调度到CPU执行的代码，可被多个进程共享</li>
<li>数据段：进程对应程序的原始数据、中间数据或最终结果</li>
</ul>
<h3 id="进程的控制"><a href="#进程的控制" class="headerlink" title="进程的控制"></a>进程的控制</h3><ul>
<li>原语：进程控制的程序段，执行期间不可中断、不可分割的执行单位</li>
<li>进程创建<ul>
<li>子进程由父进程创建，拥有父进程的资源</li>
<li>父进程撤销前先撤销所有子进程；子进程撤销后归还资源给父进程</li>
<li>创建原语<ul>
<li>分配进程标识号</li>
<li>申请空白PCB，没PCB则创建失败</li>
<li>分配资源，没资源则创建完进入阻塞态</li>
<li>初始化PCB</li>
<li>插入就绪队列</li>
</ul>
</li>
</ul>
</li>
<li>进程阻塞<ul>
<li>进程因为等待某非CPU资源，主动的从运行态转换到阻塞态</li>
<li>阻塞原语（block）<ul>
<li>找到正在运行的待阻塞进程的PCB</li>
<li>保护现场，状态设置为阻塞态，停止运行</li>
<li>把PCB插入阻塞等待队列</li>
<li>CPU资源调度给其他就绪进程</li>
</ul>
</li>
</ul>
</li>
<li>进程唤醒<ul>
<li>阻塞的进程等待的事件发生，该进程重新进入就绪态</li>
<li>唤醒原语（wakeup）<ul>
<li>找到PCB</li>
<li>PCB移出等待队列，状态设置为就绪态</li>
<li>PCB插入就绪队列</li>
</ul>
</li>
</ul>
</li>
<li>进程切换<ul>
<li>根据处理机的调度决策，用就绪队列中的进程替换正在运行的进程的操作</li>
<li>切换过程<ul>
<li>保存处理机上下文到该进程的内核堆栈中，包括PC和其他寄存器</li>
<li>更新当前运行的进程PCB</li>
<li>把进程PCB移入就绪或阻塞队列</li>
<li>选择另一个进程执行，更新其PCB</li>
<li>更新内存管理的数据结构</li>
<li>从新进程的内核堆栈中恢复处理机上下文</li>
</ul>
</li>
</ul>
</li>
<li>进程终止<ul>
<li>终止的情况<ul>
<li>正常终止：进程任务完成</li>
<li>异常终止：进程过程异常</li>
<li>外界干预终止：用户请求、父进程请求、父进程终止</li>
</ul>
</li>
<li>撤销原语<ul>
<li>检索PCB读进程状态</li>
<li>进程在执行则停止执行并释放CPU</li>
<li>有子进程则终止子进程</li>
<li>释放所有资源</li>
<li>从队列中移除PCB</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><ul>
<li>共享内存<ul>
<li>含义<ul>
<li>进程间存在共享的存储空间</li>
<li>进程对该空间读写来交换信息</li>
<li>操作系统提供同步互斥工具</li>
</ul>
</li>
<li>分类<ul>
<li>低级共享：对数据结构共享</li>
<li>高级共享：对存储区共享</li>
</ul>
</li>
</ul>
</li>
<li>消息传递<ul>
<li>含义<ul>
<li>进程通过操作系统提供的发送消息、接收消息原语进行数据交换</li>
<li>消息是格式化的</li>
</ul>
</li>
<li>分类<ul>
<li>直接通信：发送进程把信息放到接收进程的消息缓冲区</li>
<li>间接通信（信箱通信）：发送进程把信息放到中间实体（信箱）</li>
</ul>
</li>
</ul>
</li>
<li>管道通信<ul>
<li>管道是连接读进程和写进程的共享文件</li>
<li>管道通信是共享内存方式的改进<ul>
<li>管道本质是固定大小的缓冲区</li>
<li>同步、互斥功能由管道本身提供</li>
<li>半双工通信，同一时刻只能单向传输</li>
</ul>
</li>
<li>当管道为空，读进程阻塞，等待写进程把管道写满</li>
<li>当管道写满，写进程阻塞，等待读进程把管理读空</li>
</ul>
</li>
</ul>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程基本概念"><a href="#线程基本概念" class="headerlink" title="线程基本概念"></a>线程基本概念</h3><ul>
<li>线程的定义<ul>
<li>进程中的实体，同进程内可以有多个线程共享进程资源</li>
<li>引入线程后，进程是资源分配的基本单位，线程是处理机调度分配的基本单位</li>
</ul>
</li>
<li>线程和进程的比较<ul>
<li>调度<ul>
<li>同进程内的线程切换的开销较小</li>
<li>不同进程的线程切换引起进程切换</li>
<li>引入线程后，线程是调度基本单位</li>
</ul>
</li>
<li>资源拥有<ul>
<li>进程拥有资源，是资源分配的单位</li>
<li>线程不拥有资源，同进程的线程共享进程的资源，这些线程切换开销小</li>
</ul>
</li>
<li>并发性<ul>
<li>进程和线程都可以并发，操作系统并发现提高</li>
</ul>
</li>
<li>系统开销<ul>
<li>进程创建、切换、撤销开销大</li>
<li>同进程的线程切换开销小（因为不拥有资源）</li>
<li>同进程的线程同步通信容易（因为共享进程的地址空间）</li>
</ul>
</li>
<li>地址空间<ul>
<li>不同进程的地址空间独立</li>
<li>同进程的线程的地址空间共享</li>
</ul>
</li>
<li>通信<ul>
<li>进程间存在通信，通过系统调用，由操作系统考虑同步、互斥</li>
<li>同进程的各线程不存在通信，直接读写进程数据段即可，但是也需要考虑同步和互斥</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="线程状态和转换"><a href="#线程状态和转换" class="headerlink" title="线程状态和转换"></a>线程状态和转换</h3><h4 id="状态-1"><a href="#状态-1" class="headerlink" title="状态"></a>状态</h4><ul>
<li>运行态：在处理机上运行</li>
<li>就绪态：已获得除CPU外所有资源，等待CPU</li>
<li>阻塞态：执行时因为某事件受阻，暂停</li>
</ul>
<h4 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h4><p>同进程转换</p>
<h3 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h3><ul>
<li>内核级线程KLT<ul>
<li>内核支持的线程</li>
<li>内核进行线程管理，线程表在内核态</li>
<li>一对一模型<ul>
<li>一个用户级线程通过编程接口对应一个内核级线程</li>
<li>优点：一个线程阻塞后，同进程的其他线程可以运行；多处理器系统中同进程的多个线程可以并行执行</li>
<li>缺点：线程管理在内核空间，开销大</li>
</ul>
</li>
</ul>
</li>
<li>用户级线程ULT<ul>
<li>线程库支持的线程</li>
<li>用户进行线程管理，内核意识不到线程的概念，线程表在用户态</li>
<li>多对一模型<ul>
<li>多个用户级线程通过由用户支持的线程库对应一个内核级进程</li>
<li>优点：线程管理在用户空间，开销小；调度算法用户自行实现，进程专用</li>
<li>缺点：一个线程阻塞后，整个进程都被阻塞；多处理器系统只分配一个处理器给进程，进程内线程无法并行</li>
</ul>
</li>
</ul>
</li>
<li>混合多线程<ul>
<li>内核与线程库组合支持的线程</li>
<li>用户完成线程创建、同步、调度，线程的切换、撤销需要内核参与</li>
<li>多对多模型<ul>
<li>m个用户级线程通过由内核支持的线程库对应n个内核级线程（n不大于m）</li>
<li>优缺点是一对一和多对一模型的折中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="线程组织和控制"><a href="#线程组织和控制" class="headerlink" title="线程组织和控制"></a>线程组织和控制</h3><ul>
<li>线程控制块TCB包括<ul>
<li>线程标识符</li>
<li>程序计数器、状态寄存器、通用寄存器</li>
<li>线程状态</li>
<li>优先级</li>
<li>线程切换时保存现场的专用存储区</li>
<li>堆栈指针</li>
</ul>
</li>
<li>线程创建<ul>
<li>由<strong>初始化线程</strong>调用<strong>线程创建函数</strong>创建新线程</li>
<li>线程创建函数需要提供参数，比如入口地址、堆栈大小、线程优先级</li>
<li>线程创建函数返回线程标识符</li>
</ul>
</li>
<li>线程终止<ul>
<li>由<strong>终止线程</strong>调用线程终止函数**终止线程</li>
<li>线程终止后通常不释放资源</li>
<li>同进程其他线程执行分离函数，被终止线程与资源分离，其他线程才可用释放后资源</li>
</ul>
</li>
</ul>
<h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="调度基本概念"><a href="#调度基本概念" class="headerlink" title="调度基本概念"></a>调度基本概念</h3><ul>
<li>调度：资源请求者数多于资源数时，资源请求者竞争资源的排队过程</li>
<li>进程调度：进程数多于处理器数时，进程竞争处理器的排队过程</li>
<li>调度层次<ul>
<li>作业调度<ul>
<li>高级调度</li>
<li>后备队列：连向就绪队列（<strong>作业调度</strong>）；资源请求者是外存作业；资源有内存、IO设备等</li>
</ul>
</li>
<li>内存调度<ul>
<li>中级调度</li>
<li>挂起操作：进程从内存移到外存</li>
<li>激活操作：进程从外存移到主存</li>
<li>就绪挂起队列：连向就绪队列（<strong>内存调度</strong>、激活操作）；资源请求者是被挂起的就绪进程；资源是内存（在内存紧张时，内存调度把不能运行的进程移到外存，提高内存利用率）</li>
<li>阻塞挂起队列：连向就绪挂起队列；资源请求者是被挂起的阻塞进程；资源是非处理器资源或等待某事件的发生</li>
</ul>
</li>
<li>进程调度<ul>
<li>低级调度</li>
<li>就绪队列：连向处理器（<strong>进程调度</strong>）和就绪挂起队列（挂起操作）；资源请求者是就绪进程；资源是处理器</li>
<li>阻塞队列：连向就绪队列和阻塞挂起队列（挂起操作）；资源请求者是阻塞进程；资源是非处理器资源或等待某事件的发生</li>
</ul>
</li>
</ul>
</li>
<li>调度从高级到低级频率递增</li>
</ul>
<h3 id="调度的目标"><a href="#调度的目标" class="headerlink" title="调度的目标"></a>调度的目标</h3><ul>
<li>CPU利用率：CPU使用时间比总时间</li>
<li>系统吞吐量：单位时间完成作业数量</li>
<li>周转时间：作业从提交到完成的时间</li>
<li>平均周转时间：多个作业周转时间的均值</li>
<li>带权周转时间：作业周转时间比作业实际运行时间</li>
<li>平均带权周转时间：多个作业带权周转时间的均值</li>
<li>等待时间：作业等待处理机的时间</li>
<li>响应时间：作业提交到首次响应的时间</li>
</ul>
<h3 id="调度的实现"><a href="#调度的实现" class="headerlink" title="调度的实现"></a>调度的实现</h3><h4 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h4><ul>
<li>又叫调度程序（scheduler），是操作系统中用于调度CPU的组件</li>
<li>包括<ul>
<li>排队器：把就绪进程插入就绪队列</li>
<li>分派器：从就绪队列中取出新进程，分配CPU</li>
<li>上下文切换器<ul>
<li>保存当前进程上下文，装入分派器进程的上下文，分派程序执行</li>
<li>移出分派器进程的上下文，装入新进程的上下文，新进程执行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="调度时机"><a href="#调度时机" class="headerlink" title="调度时机"></a>调度时机</h4><ul>
<li>不可调度的情况<ul>
<li>中断处理时</li>
<li>进程访问内核的临界区时，为了尽快释放临界区资源，需要加锁阻止并行</li>
<li>进行原子操作时，需要屏蔽中断，显然不可调度</li>
</ul>
</li>
<li>应进行调度的情况<ul>
<li>满足调度条件，且当前进程无法继续运行</li>
<li>调度采用剥夺方式，且出现更高优先级的进程</li>
<li>中断或自陷处理结束后，中断返回前，发现置上了请求调度标志</li>
</ul>
</li>
</ul>
<h4 id="调度方式"><a href="#调度方式" class="headerlink" title="调度方式"></a>调度方式</h4><ul>
<li>调度方式：根据高优先级进程进入就绪队列后，对当前进程的处理</li>
<li>非抢占式（非剥夺调度方式）：当前进程继续运行直至进入阻塞态，高优先级进程才运行</li>
<li>抢占式（剥夺调度方式）：当前进程停止运行进入就绪态，高优先级进程运行</li>
</ul>
<h4 id="闲逛进程"><a href="#闲逛进程" class="headerlink" title="闲逛进程"></a>闲逛进程</h4><ul>
<li>定义：当就绪队列为空时，使用CPU的进程</li>
<li>特点：<ul>
<li>无阻塞态：不需要除了CPU的其他资源</li>
<li>优先级最低：就绪队列不空立刻让出CPU</li>
</ul>
</li>
</ul>
<h4 id="内核级线程和用户级线程调度"><a href="#内核级线程和用户级线程调度" class="headerlink" title="内核级线程和用户级线程调度"></a>内核级线程和用户级线程调度</h4><ul>
<li>详见前面线程实现小节的笔记</li>
</ul>
<h3 id="典型调度算法"><a href="#典型调度算法" class="headerlink" title="典型调度算法"></a>典型调度算法</h3><h4 id="先来先服务调度"><a href="#先来先服务调度" class="headerlink" title="先来先服务调度"></a>先来先服务调度</h4><ul>
<li>简称：FCFS</li>
<li>适用范围：作业调度、进程调度</li>
<li>算法思想：先进入队列的先分配资源</li>
<li>调度方式：非抢占式</li>
<li>特点<ul>
<li>算法简单</li>
<li>效率低</li>
<li>有利于长作业，不利于短作业</li>
<li>有利于CPU繁忙型作业，不利于IO繁忙型作业</li>
</ul>
</li>
</ul>
<h4 id="短作业优先调度"><a href="#短作业优先调度" class="headerlink" title="短作业优先调度"></a>短作业优先调度</h4><ul>
<li>简称：SJF</li>
<li>适用范围：一般默认是作业调度；进程调度的版本叫短进程优先调度SPF</li>
<li>算法思想：队列中预估运行时间最短的先分配资源</li>
<li>调度方式：一般默认是非抢占式；抢占式的版本叫做最短剩余时间优先调度SRTF</li>
<li>特点<ul>
<li>有利于短作业，不利于长作业，有饥饿现象</li>
<li>未考虑任务的紧迫性</li>
<li>运行时间的预估不一定准确</li>
<li>平均等待时间和平均周转时间最少</li>
</ul>
</li>
</ul>
<h4 id="时间片轮转调度"><a href="#时间片轮转调度" class="headerlink" title="时间片轮转调度"></a>时间片轮转调度</h4><ul>
<li>简称：RR</li>
<li>适用范围：进程调度</li>
<li>算法思想：按先来先服务的顺序，每个进程只能运行一个时间片，然后释放处理器给下一个进程</li>
<li>调度方式：抢占式</li>
<li>时间片大小设置应适当<ul>
<li>时间片很大时，算法退化为先来先服务算法</li>
<li>时间片很小时，频繁切换进程的开销很大</li>
</ul>
</li>
</ul>
<h4 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h4><ul>
<li>又叫优先权调度</li>
<li>适用范围：作业调度、进程调度</li>
<li>算法思想：选优先级最高的进程执行</li>
<li>调度方式：抢占式、非抢占式</li>
<li>按<strong>优先级是否可变</strong>分类<ul>
<li>静态优先级：不可变</li>
<li>动态优先级：可变</li>
</ul>
</li>
<li>优先级设置原则<ul>
<li>系统进程&gt;用户进程</li>
<li>交互型进程&gt;非交互型进程</li>
<li>IO型进程&gt;计算型进程</li>
</ul>
</li>
</ul>
<h4 id="高响应比调度"><a href="#高响应比调度" class="headerlink" title="高响应比调度"></a>高响应比调度</h4><ul>
<li>简称：HRRF</li>
<li>适用范围：主要用于作业调度</li>
<li>算法思想：选择响应比（周转时间比执行时间）最高的作业执行</li>
<li>调度方式：非抢占式</li>
<li>特点：<ul>
<li>等待时间相同时，执行时间越短，响应比越高</li>
<li>执行时间相同时，等待时间越长，响应比越高</li>
<li>FCFS和SJF的折中，兼顾了等待时间和执行时间，克服了饥饿现象</li>
</ul>
</li>
</ul>
<h4 id="多级队列调度"><a href="#多级队列调度" class="headerlink" title="多级队列调度"></a>多级队列调度</h4><ul>
<li>简称：MLQ</li>
<li>适用范围：进程调度</li>
<li>算法思想<ul>
<li>多个就绪队列，队列间设置优先级</li>
<li>每个队列内有各自的调度算法，</li>
<li>进程执行完后，回到原队列</li>
</ul>
</li>
<li>调度方式：根据具体的调度算法考虑</li>
</ul>
<h4 id="多级反馈队列调度"><a href="#多级反馈队列调度" class="headerlink" title="多级反馈队列调度"></a>多级反馈队列调度</h4><ul>
<li>简称：MLFQ</li>
<li>适用范围：进程调度</li>
<li>算法思想<ul>
<li>多个就绪队列，从第1级到第n级的优先级递增，优先级较高队列为空才考虑调度优先级较低的队列</li>
<li>每个队列设置一个时间片，优先级高的队列时间片短，是相邻的低优先级队列的时间片的一半</li>
<li>最后一级队列，按RR方式，进程时间片用完后，回到最后一级队列（通常因为时间片较大，相当于FCFS）</li>
<li>其他级队列，按FCFS的顺序，进程时间片用完后，进入下一级队列</li>
</ul>
</li>
<li>调度方式：抢占式（注意当第i级队列处理时，高优先级的队列出现进程，会立刻抢占CPU）</li>
<li>特点<ul>
<li>短交互作业（终端型作业）：一般在第1级队列可完成</li>
<li>短批处理作业：一般可在前几个队列完成，周转时间短</li>
<li>长批处理作业：在前几个队列部分处理，响应时间短，但是可能有饥饿现象</li>
</ul>
</li>
</ul>
<h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><p>又叫横道图，绘制方法如下 </p>
<ul>
<li>横坐标绘制合适的时间间隔</li>
<li>纵坐标是程序的名称</li>
<li>在各时间位置，画平行于纵坐标的虚线</li>
<li>用不同的线表示各资源（CPU、打印机等），在各个程序位置，画平行于横坐标的线</li>
<li>各资源对应线的上方标注资源的名称</li>
</ul>
<h3 id="上下文和切换机制"><a href="#上下文和切换机制" class="headerlink" title="上下文和切换机制"></a>上下文和切换机制</h3><ul>
<li>详见前面进程的控制小节中，进程切换部分</li>
</ul>
<h2 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>临界资源：一次只允许一个进程访问的资源，如打印机</li>
<li>临界资源访问步骤<ul>
<li>进入区<ul>
<li>检查进程是否可以进入临界区</li>
<li>可进入的进程设置正访问临界区标识，阻止其他进程进入临界区</li>
</ul>
</li>
<li>临界区（临界段）：进程使用临界资源的代码</li>
<li>退出区：清除正访问临界区标识</li>
<li>剩余区：代码剩余部分</li>
</ul>
</li>
<li>同步：多个进程为了同一个任务，协调工作次序、等待传递信息的<strong>直接制约关系</strong></li>
<li>互斥：当一个进程进入临界区，其他进程需要等其退出临界区才能访问临界资源的<strong>间接制约关系</strong></li>
<li>同步机制准则<ul>
<li>空闲让进（必须实现）：临界区空闲允许进程进入</li>
<li>忙则等待（必须实现）：临界区占用则其他进程等待</li>
<li>有限等待（必须实现）：进程等有限时间后可以进临界区</li>
<li>让权等待（建议实现）：进程不能进入临界区时，释放处理器资源</li>
</ul>
</li>
</ul>
<h3 id="临界区访问方法"><a href="#临界区访问方法" class="headerlink" title="临界区访问方法"></a>临界区访问方法</h3><h4 id="软件方法"><a href="#软件方法" class="headerlink" title="软件方法"></a>软件方法</h4><p>以两个进程访问临界区为例</p>
<ul>
<li>单标志法<ul>
<li>算法思想<ul>
<li>一个标志表示哪个进程可用临界区</li>
<li>进程用完后把标志取反</li>
</ul>
</li>
<li>缺点<ul>
<li>一定只能交替进入临界区</li>
<li>违背“空闲让进”</li>
</ul>
</li>
</ul>
</li>
<li>双标志法（先检查）<ul>
<li>算法思想<ul>
<li>两个标志分别表示两个进程是否可以使用临界区</li>
<li>先检查另一方的标志是否为0，为0则设置自己标志为1</li>
<li>使用结束后把自己的标志设置为0</li>
</ul>
</li>
<li>缺点<ul>
<li>双方可能先检查，都认为对方为0，然后都设置自己为1</li>
<li>违背“忙则等待”</li>
</ul>
</li>
</ul>
</li>
<li>双标志法（后检查）<ul>
<li>算法思想<ul>
<li>两个标志分别表示两个进程是否想使用临界区</li>
<li>先设置自己的标志为1，后检查另一方的标志是否为0，为0则使用临界区</li>
<li>使用结束后把自己的标志设置为0</li>
</ul>
</li>
<li>缺点<ul>
<li>双方可能先设置自己的标志为1，都认为对方不为0，都无法使用临界区</li>
<li>违背“有限等待”</li>
</ul>
</li>
</ul>
</li>
<li>彼得森算法<ul>
<li>算法思想<ul>
<li>两个标志分别表示两个进程是否想使用临界区</li>
<li>再设置一个标志turn表示双方的谦让态度</li>
<li>先设置自己的标志为1（提出想法），再设置turn为另一方（表达谦让）</li>
<li>如果对方标志为1且turn为另一方则等待（即对方有想法就谦让给对方）</li>
<li>最后一次的被谦让方可以访问临界区</li>
<li>使用结束后设置自己的标志为0</li>
</ul>
</li>
<li>缺点<ul>
<li>进程等待时未让出CPU资源</li>
<li>违背“让权等待”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="硬件方法"><a href="#硬件方法" class="headerlink" title="硬件方法"></a>硬件方法</h4><p>硬件方法又叫低级方法、元方法，包括</p>
<ul>
<li>中断屏蔽法<ul>
<li>步骤<ul>
<li>关中断</li>
<li>访问临界区</li>
<li>开中断</li>
</ul>
</li>
<li>特点：简单但只适用于内核进程、单处理器（中断是针对一个处理器而言）</li>
</ul>
</li>
<li>原子硬件指令TestAndSet<ul>
<li>TS指令功能<ul>
<li>设置锁变量为1</li>
<li>返回原先的锁变量</li>
</ul>
</li>
<li>临界区访问步骤<ul>
<li>当TS为1则等待</li>
<li>访问完临界区把锁变量设置为0</li>
</ul>
</li>
<li>特点<ul>
<li>实现简单、多进程</li>
<li>原子操作（一般都是硬件实现），屏蔽中断，只适合多处理器</li>
<li>违背“让权等待”</li>
</ul>
</li>
</ul>
</li>
<li>原子硬件指令Swap<ul>
<li>Swap功能：交换两个变量的值（Ts指令的本质其实就是把1和锁变量旧值进行交换）</li>
<li>临界区访问步骤<ul>
<li>新建变量old为1</li>
<li>old和锁变量交换</li>
<li>如果old为1则等待</li>
<li>访问完临界区把锁设置为0</li>
</ul>
</li>
<li>特点<ul>
<li>实现简单、多进程</li>
<li>原子操作（一般都是硬件实现），屏蔽中断，只适合多处理器</li>
<li>违背“让权等待”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul>
<li>实现思路<ul>
<li>临界区可访问标志为available</li>
<li>acquire函数<ul>
<li>循环检查available，为0则循环检查</li>
<li>当available为1时，则available设置为0</li>
</ul>
</li>
<li>release函数<ul>
<li>available设置为1</li>
</ul>
</li>
</ul>
</li>
<li>访问临界区步骤<ul>
<li>初始化available=1</li>
<li>进程调用acquire()获得权限</li>
<li>进程使用临界区</li>
<li>进程调用release()释放权限</li>
</ul>
</li>
<li>特点<ul>
<li>违背“让权等待”，有忙等待现象</li>
<li>acquire和release都是原语，硬件实现，屏蔽中断，因此只适合多处理器系统</li>
<li>资源数为1</li>
</ul>
</li>
</ul>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><h4 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h4><ul>
<li>是锁方法的多资源的修改版本</li>
<li>用整型信号量S表示资源数</li>
<li>wait(S)函数对应acquire函数，简称P操作<ul>
<li>循环检查整型资源S&gt;0是否满足，不满足则循环检测</li>
<li>当S&gt;0时，S=S-1</li>
</ul>
</li>
<li>signal(S)函数对应release函数，简称V操作<ul>
<li>S=S+1</li>
</ul>
</li>
<li>违背“让权等待”，进程等待时一直占用处理器，不被阻塞</li>
<li>P和V都是原子操作，屏蔽中断，只适合多处理器系统</li>
</ul>
<h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><ul>
<li>对整型信号量的忙等待现象的改进，<strong>一般默认信号量为记录型信号量</strong></li>
<li>信号量S为记录型结构体，包括资源数value和等待的进程队列list</li>
<li>wait(S)函数（简称P操作）<ul>
<li>value=value-1</li>
<li>如果value&lt;0，则进程加入list并阻塞</li>
</ul>
</li>
<li>signal(S)函数（简称V操作）<ul>
<li>value=value+1</li>
<li>如果value&lt;=0，则list中取出一个进程并唤醒</li>
</ul>
</li>
<li>满足“让权等待”，进程在等待时主动被阻塞（不是外部中断），单处理器系统也可以使用</li>
</ul>
<h4 id="信号量实现同步"><a href="#信号量实现同步" class="headerlink" title="信号量实现同步"></a>信号量实现同步</h4><ul>
<li>问题：希望进程A的a操作在进程B的b操作前执行</li>
<li>实现：<ul>
<li>初始化信号量，资源数设为0</li>
<li>a后面插入V操作：表示a执行完后出现一个资源，可以释放进程队列的B进程</li>
<li>b前面插入P操作：因为资源初始化为0，所以直接把B进程加入队列并阻塞</li>
</ul>
</li>
</ul>
<h4 id="信号量实现互斥"><a href="#信号量实现互斥" class="headerlink" title="信号量实现互斥"></a>信号量实现互斥</h4><ul>
<li>问题：希望进程A和进程B互斥的访问一个临界区</li>
<li>实现<ul>
<li>初始化信号量，资源数为1</li>
<li>A和B在访问前加入P操作，访问后加入V操作</li>
<li>注意<ul>
<li>互斥的操作前后需要用PV<strong>夹紧</strong>，不能有冗余操作，比如其他同步信号量的PV</li>
<li>具体问题具体分析，但一般互斥的P需要夹紧，否则容易死锁；互斥的V不一定夹紧</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="信号量实现前驱关系"><a href="#信号量实现前驱关系" class="headerlink" title="信号量实现前驱关系"></a>信号量实现前驱关系</h4><ul>
<li>问题：希望多个进程的操作之间满足一定的执行顺序（有向图表示），是同步问题的多进程版本</li>
<li>实现：<ul>
<li>因为每个有向边为一个同步关系，即对应一个信号量，所以需要初始化多个信号量，资源数都设为0（一开始没有边，即没资源）</li>
<li>每个进程在执行前，对所有入边信号量进行P操作（申请入边资源）</li>
<li>每个进程执行后，对所有出边信号量进行V操作（释放出边资源）</li>
</ul>
</li>
</ul>
<h4 id="信号量解决问题的思路"><a href="#信号量解决问题的思路" class="headerlink" title="信号量解决问题的思路"></a>信号量解决问题的思路</h4><ul>
<li>关系分析<ul>
<li>分析进程之间的同步、互斥关系</li>
<li>每对关系需要一个信号量，<strong>想清楚该信号量对应什么资源</strong></li>
</ul>
</li>
<li>PV操作位置<ul>
<li>每个进程都确定PV操作的顺序安排</li>
<li><strong>想清楚要申请什么资源，能释放什么资源</strong></li>
</ul>
</li>
<li>信号量设置和初始化<ul>
<li>设置需要的信号量</li>
<li><strong>根据开始时资源数目情况进行初始化</strong></li>
</ul>
</li>
</ul>
<h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><ul>
<li>管程也是一种进程同步互斥的工具</li>
<li>管程的特性保证进程互斥</li>
<li>管程提供的条件变量可灵活实现同步</li>
</ul>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>组成<ul>
<li>管程名称</li>
<li>管程内的共享数据结构，对应系统某共享资源</li>
<li>管程内共享数据结构的初始化函数</li>
<li>管程内共享数据结构的函数过程</li>
</ul>
</li>
<li>特点<ul>
<li>管程像一个类，把共享资源数据结构和在该数据结构上的操作封装起来</li>
<li>一次只能一个进程进入管程，使用管程的调用接口，从而一定保证互斥</li>
</ul>
</li>
<li>举例<ul>
<li>monitor <em>Name</em> {           //管程名称</li>
<li>共享数据结构S;             //管程内的共享数据结构</li>
<li>init_S(){S=5;}            //初始化函数</li>
<li>take_away(){S=S-1;}         //函数过程</li>
<li>give_back(){S=S+1;}         //函数过程</li>
<li>}       </li>
</ul>
</li>
</ul>
<h4 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h4><ul>
<li>定义：条件变量是，进程进入管程后不满足某些条件而被阻塞的原因</li>
<li>功能<ul>
<li>一个条件变量x包含一个阻塞队列</li>
<li>x对应条件不满足时，可调用x.wait，进程加入x的阻塞队列、阻塞进程、释放管程</li>
<li>x对应的条件满足时，可调用x.signal，从x的阻塞队列中移出一个进程唤醒</li>
</ul>
</li>
<li>举例<ul>
<li>monitor <em>Name</em> {           // 管程名称</li>
<li>共享数据结构S;             // 管程内的共享数据结构</li>
<li>condition x;              // 条件变量</li>
<li>init_S(){S=5;}            // 初始化函数</li>
<li>take_away(){if(S&lt;=0) x.wait(); S=S-1;}         // 函数过程</li>
<li>give_back(){S=S+1;if(有进程在阻塞队列) x.signal();}         // 函数过程</li>
<li>}    </li>
</ul>
</li>
</ul>
<h4 id="管程和信号量对比"><a href="#管程和信号量对比" class="headerlink" title="管程和信号量对比"></a>管程和信号量对比</h4><ul>
<li>资源数<ul>
<li>管程：共享数据结构</li>
<li>信号量：记录型信号量数据结构的一个成员</li>
</ul>
</li>
<li>资源有关操作<ul>
<li>管程：在take_away和give_back过程实现</li>
<li>信号量：PV操作内实现</li>
</ul>
</li>
<li>阻塞队列<ul>
<li>管程：包含在条件变量中</li>
<li>信号量：记录型信号量数据结构的一个成员</li>
</ul>
</li>
<li>阻塞队列的进出操作（进程阻塞和唤醒）<ul>
<li>管程：条件变量的wait和signal</li>
<li>信号量：PV操作内实现</li>
</ul>
</li>
</ul>
<h3 id="经典同步问题"><a href="#经典同步问题" class="headerlink" title="经典同步问题"></a>经典同步问题</h3><p>注：</p>
<ul>
<li>注意大部分同步问题的操作序列都是while(1)循环中</li>
<li>信号量类型是semaphore</li>
<li>函数前缀可以是Procedure或process，也可以忽略</li>
<li>多个函数并行可以使用cobegin、coend框起来</li>
</ul>
<h4 id="生产者-消费者"><a href="#生产者-消费者" class="headerlink" title="生产者-消费者"></a>生产者-消费者</h4><ul>
<li>问题：一个初始为空，大小为n的缓冲区，生产者放产品进入，消费者拿产品出</li>
<li>思路（可参考的前面信号量解决问题的思路小节）<ul>
<li>关系分析<ul>
<li>缓冲区访问是互斥的，需要先获取锁资源，信号量mutex，</li>
<li>生产者放入产品的同步条件是，有空盘资源，信号量empty</li>
<li>消费者拿出产品的同步条件是，有非空盘资源，信号量full</li>
</ul>
</li>
<li>PV操作的位置<ul>
<li>生产者操作序列：申请空盘、申请锁、放入产品、释放锁、提供非空盘</li>
<li>消费者操作序列：申请非空盘、申请锁、拿走产品、释放锁、提供空盘</li>
</ul>
</li>
<li>信号量设置和初始化<ul>
<li>mutex=1，表示锁资源空闲</li>
<li>empty=n，表示n个空盘</li>
<li>full=0，表示0个非空盘</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h4><ul>
<li>问题：一个文件，多个读者，多个写者。多个读者可以同时读；某写者写时不允许其他读者写者访问</li>
<li>思路<ul>
<li>关系分析<ul>
<li>写者访问文件需要互斥，先获得锁资源；读者访问文件需要和写者互斥，如果是第一个读者则需要获得锁资源，信号量mutex</li>
<li>需要引入一个记录读者数量的变量count</li>
<li>对count变量的访问需要互斥，锁count_mutex</li>
</ul>
</li>
<li>PV操作的位置<ul>
<li>写者操作序列：申请mutex、写文件、释放mutex</li>
<li>读者操作序列：申请count_mutex、若count为0则申请mutex、count+=1、释放count_mutex、读文件、申请count_mutex、count-=1、如果count为0则释放mutex、释放count_mutex</li>
</ul>
</li>
<li>信号量的设置和初始化<ul>
<li>mutex=1</li>
<li>count=0</li>
<li>count_mutex=1</li>
</ul>
</li>
</ul>
</li>
<li>上面的思路优先处理读，随着读者不断进入，写者可能饥饿。下面改成读写公平算法<ul>
<li>关系分析<ul>
<li>在原本的关系基础上，要求所有的读者写者有同步关系，即读者和写者公平的按申请文件的顺序进入文件</li>
<li>这可以理解成读者、写者一个个登记后才处理申请，需要信号量t表示目前有登记表资源  </li>
</ul>
</li>
<li>PV操作的位置<ul>
<li>写者修改思路：进入前申请登记表t，走之后才释放t，让其他人登记</li>
<li>写者操作序列：申请t、申请mutex、写文件、释放mutex、释放t</li>
<li>读者修改思路：进入前申请登记表t，再修改count（理解成登记过程），然后释放登记表。</li>
<li>读者操作序列：申请t、申请count_mutex、若count为0则申请mutex、count+=1、释放count_mutex、释放t、读文件、申请count_mutex、count-=1、如果count为0则释放mutex、释放count_mutex</li>
</ul>
</li>
<li>信号量的设置和初始化<ul>
<li>mutex=1</li>
<li>count=0</li>
<li>count_mutex=1</li>
<li>t=1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h4><ul>
<li>问题：n个哲学家，哲学家之间有一根筷子，共n根筷子，哲学家要拿起左右边两个筷子才能吃饭。哲学家毕生都在思考和吃饭</li>
<li>初步思路<ul>
<li>关系分析：n个筷子是互斥资源，n个信号量</li>
<li>PV操作的位置<ul>
<li>申请左边筷子、申请右边筷子、用餐、释放右边筷子、释放左边筷子、思考</li>
</ul>
</li>
<li>信号量的设置和初始化<ul>
<li>n个chopstick[n]都设置为1</li>
</ul>
</li>
</ul>
</li>
<li>该初步思路可能存在死锁，即每个哲学家拿起一侧的筷子，相互等待出现死锁</li>
<li>三种改进方法<ul>
<li>最多允许n-1个哲学家一起用餐<ul>
<li>关系分析：考虑座椅资源，互斥关系，引入额外信号量seat</li>
<li>PV操作位置：申请座椅、申请左边筷子、申请右边筷子、用餐、释放右边筷子、释放左边筷子、释放座椅、思考</li>
<li>信号量设置和初始化：seat=n-1，n个chopstick[n]都设置为1</li>
</ul>
</li>
<li>同时只允许1个哲学家拿筷子<ul>
<li>关系分析：考虑拿筷子锁，引入额外信号量mutex</li>
<li>PV操作位置：申请mutex、申请左边筷子、申请右边筷子、释放mutex、用餐、释放右边筷子、释放左边筷子、思考</li>
<li>信号量设置和初始化：mutex=1，n个chopstick[n]都设置为1</li>
</ul>
</li>
<li>奇数号哲学家先拿左筷子，偶数号哲学家先拿右筷子<ul>
<li>关系分析：不用引入额外信号量</li>
<li>PV操作位置：申请左（右）边筷子、申请右（左）边筷子、用餐、释放右边筷子、释放左边筷子、思考</li>
<li>信号设置和初始化：n个chopstick[n]都设置为1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h4><ul>
<li>问题：三个吸烟者，一个供应者，每次吸烟需要三种材料，吸烟者各自有一种材料，供应者可以提供三种材料。供应者提供两种材料，相应吸烟者拿材料吸烟，完成后供应者再提供其他两种材料，循环下去的过程。</li>
<li>思路<ul>
<li>关系分析<ul>
<li>三种材料的两两组合，共三种组合，对应三种同步资源，信号量为offer1、offer2、offer3</li>
<li>完成信号finish也是一个同步资源，由吸烟者提供给供应者</li>
<li>需要一个变量num来记录当前需要给哪个吸烟者提供材料，因为只有一个供应者可访问num，因此不需要加锁</li>
</ul>
</li>
<li>PV操作<ul>
<li>吸烟者：申请offeri、吸烟、释放finish</li>
<li>供应者：num++、根据num的值释放对应offeri、申请finish</li>
</ul>
</li>
<li>初始化<ul>
<li>offeri=0</li>
<li>finish=0</li>
<li>num=0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>定义：死锁是多个进程竞争资源而造成的互相等待的僵局</li>
<li>产生原因<ul>
<li>对不可剥夺资源的竞争</li>
<li>进程推进顺序非法</li>
<li>死锁四个必要条件<ul>
<li>互斥：资源同段时间只能被一个进程使用</li>
<li>不可剥夺：资源只能被主动释放，不能被剥夺</li>
<li>请求并保持：请求资源的进程进入阻塞队列等待，但保持现有资源不释放</li>
<li>循环等待：存在一条进程对资源的循环等待链（如果每类资源都只有一个，则本条变为充要条件）</li>
</ul>
</li>
</ul>
</li>
<li>处理策略<ul>
<li>死锁预防<ul>
<li>定义：设置限制条件，破坏4个必要条件中的一个或几个</li>
<li>特点：限制严格，资源容易闲置，实现简单</li>
</ul>
</li>
<li>死锁避免<ul>
<li>定义：在资源动态分配过程中，设置限制条件，让系统保持安全状态（详见后面死锁避免小节）</li>
<li>特点：限制相对较弱，不一定破坏4个必要条件，在运行时判断是否会死锁，实现复杂</li>
</ul>
</li>
<li>死锁检测和解除<ul>
<li>定义：允许死锁发生，但能检测出并解除</li>
<li>特点：需要进行资源剥夺</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><ul>
<li>破坏互斥条件<ul>
<li>适用于只读的文件、磁盘、时钟</li>
<li>大部分情况不可行，因为有些资源必须互斥</li>
</ul>
</li>
<li>破坏不剥夺条件<ul>
<li>适用于内存和处理器资源</li>
<li>方法一：进程申请等待新资源，主动释放已占有资源，之后需要时向系统申请</li>
<li>方法二：资源分配管理程序为进程分配资源，若资源不充足则剥夺其所有资源并阻塞，等资源充足再唤醒分配</li>
</ul>
</li>
<li>破坏请求并保持条件<ul>
<li>静态分配法，进程执行前申请所有需要的资源，全部满足后再执行</li>
<li>资源利用率低</li>
</ul>
</li>
<li>破坏循环等待条件<ul>
<li>层次分配法：给资源分层次<ul>
<li>进程获得某资源后，只能申请高层次资源</li>
<li>进程释放某资源前，先释放高层次资源</li>
<li>进程获得某资源后，需要释放该资源才能申请同层次其他资源</li>
</ul>
</li>
<li>编号法：每个层次一个资源，即给资源编号</li>
</ul>
</li>
</ul>
<h3 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a>死锁避免</h3><p><em>进程在动态分配资源前，先计算系统安全性，达到死锁避免的目的</em></p>
<h4 id="系统安全状态"><a href="#系统安全状态" class="headerlink" title="系统安全状态"></a>系统安全状态</h4><ul>
<li>安全序列：进程的完成推进顺序，按该顺序分配资源能满足每个进程的资源需求</li>
<li>系统安全状态：存在安全序列</li>
<li>系统安全状态和死锁的关系<ul>
<li>“破坏必要条件”是“安全状态”的真子集，保证系统安全状态不一定破坏必要条件</li>
<li>“死锁”是“不安全状态”的真子集，系统不安全状态也不一定死锁（后面补充思考会进一步分析）</li>
<li>系统安全可以保证避免死锁</li>
</ul>
</li>
</ul>
<h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><ul>
<li>数据结构<ul>
<li>Available向量：当前的可用资源数</li>
<li>Max矩阵：各行进程对各列资源总需求（预估上界），等于Allocation+Need</li>
<li>Allocation矩阵：各行进程对各列资源已分配量</li>
<li>Need矩阵：各行进程对各列资源的剩余需求（预估上界）</li>
<li>Work向量：系统安全判断时使用，作为Available向量的副本，这样不用修改Available</li>
<li>Request向量：银行家算法的输入，是某进程发出的资源请求</li>
</ul>
</li>
<li>安全判断算法（当系统安全时，求出<strong>一个</strong>安全序列）<ul>
<li>已知当前的Need、Allocation、Available</li>
<li>备份Available，记为Work，此后对Work操作（Work=Available）</li>
<li>选择比Work小的Need行，设对应进程k，完成该进程、加入安全序列、释放资源（Work+=Allocation[k]）</li>
<li>重复上一步，直至找不到比Work小的Need行</li>
<li>如果安全序列有所有进程，则系统安全；否则系统不安全</li>
</ul>
</li>
<li>银行家算法（当进程k发出一个资源请求时，用银行家算法进行处理）<ul>
<li>已知当前的Request、Need、Allocation、Available</li>
<li>检测请求合法性：Request&lt;Need[k]，不合法则报错</li>
<li>检测资源充足性：Request&lt;Available，不充足则让进程等待</li>
<li>计算资源分配后的数据：Available-=Request，Need[k]-=Request，Allocation[k]+=Request</li>
<li>检查此时系统安全性</li>
<li>如果安全则分配，不安全则让进程等待</li>
</ul>
</li>
</ul>
<h3 id="死锁检测和解除"><a href="#死锁检测和解除" class="headerlink" title="死锁检测和解除"></a>死锁检测和解除</h3><h4 id="资源分配有向图"><a href="#资源分配有向图" class="headerlink" title="资源分配有向图"></a>资源分配有向图</h4><ul>
<li>进程点：圆点表示一个进程</li>
<li>资源点：方形表示一类资源，如果该类资源的总数目为n，则方形内画n个小圆</li>
<li>分配边：从资源点到进程点的边，表示分配一个资源</li>
<li>请求边：进程点到资源点的边表示请求一个资源</li>
<li>分配边<strong>合法性</strong><ul>
<li>资源点：分配边数$\leq$资源总数n</li>
<li>进程点：分配边数$\leq$请求边数</li>
</ul>
</li>
</ul>
<h4 id="死锁定理"><a href="#死锁定理" class="headerlink" title="死锁定理"></a>死锁定理</h4><p>利用资源分配图可用检测死锁</p>
<ul>
<li>选择非孤立进程点（孤立进程不需要资源就能执行，不用考虑），且该点的每个申请边都满足<ul>
<li>要么已有对应资源的分配边</li>
<li>要么对应资源可以<strong>合法的新添</strong>的分配边</li>
</ul>
</li>
<li>简化：上一步所选的非孤立点进程，执行、完成、释放资源、去掉边，该进程点简化为孤立点</li>
<li>返回第二步重复执行<ul>
<li>如果全是孤立点，则不存在死锁</li>
<li>如果存在非孤立点，但这些点无法简化，则存在死锁</li>
</ul>
</li>
</ul>
<h4 id="补充思考"><a href="#补充思考" class="headerlink" title="补充思考"></a>补充思考</h4><ul>
<li>问题：系统安全性判断、死锁定理十分相似，但为什么找不到安全序列，不一定死锁；找不到简化序列，一定死锁</li>
<li>回答<ul>
<li>找不到安全序列<ul>
<li>指的是所有进程的Need都不比Work小的情况</li>
<li>Need是剩余资源需求，是对接下来资源请求<strong>上界的估计</strong></li>
<li>找不到安全序列不一定死锁，因为实际资源请求不一定到上界</li>
</ul>
</li>
<li>找不到简化序列<ul>
<li>指的是所有进程的Request都不比Work小的情况</li>
<li>Request是实际已发出的资源申请</li>
<li>实际的资源请求得不到满足，必然死锁，所有进程都处于阻塞态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="死锁解除"><a href="#死锁解除" class="headerlink" title="死锁解除"></a>死锁解除</h4><ul>
<li>资源剥夺<ul>
<li>挂起进程、剥夺资源</li>
</ul>
</li>
<li>撤销进程<ul>
<li>撤销进程、剥夺资源</li>
</ul>
</li>
<li>进程回退法<ul>
<li>回退进程、非剥夺的主动释放资源</li>
<li>要求进程保存历史信息设置还原点</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Knowledge Summary</tag>
      </tags>
  </entry>
</search>
